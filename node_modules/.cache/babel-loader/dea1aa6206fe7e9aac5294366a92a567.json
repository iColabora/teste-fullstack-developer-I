{"ast":null,"code":"import { Vue } from '../vue';\nimport { arrayIncludes } from '../utils/array';\nimport { keys } from '../utils/object'; // --- Constants ---\n\nvar PROP = '$_rootListeners'; // --- Mixin ---\n// @vue/component\n\nexport var listenOnRootMixin = Vue.extend({\n  created: function created() {\n    // Define non-reactive property\n    // Object of arrays, keyed by event name,\n    // where value is an array of callbacks\n    this[PROP] = {};\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _this = this; // Unregister all registered listeners\n\n\n    keys(this[PROP] || {}).forEach(function (event) {\n      _this[PROP][event].forEach(function (callback) {\n        _this.listenOffRoot(event, callback);\n      });\n    });\n    this[PROP] = null;\n  },\n  methods: {\n    registerRootListener: function registerRootListener(event, callback) {\n      if (this[PROP]) {\n        this[PROP][event] = this[PROP][event] || [];\n\n        if (!arrayIncludes(this[PROP][event], callback)) {\n          this[PROP][event].push(callback);\n        }\n      }\n    },\n    unregisterRootListener: function unregisterRootListener(event, callback) {\n      if (this[PROP] && this[PROP][event]) {\n        this[PROP][event] = this[PROP][event].filter(function (cb) {\n          return cb !== callback;\n        });\n      }\n    },\n\n    /**\n     * Safely register event listeners on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on `$root` and is destroyed,\n     * this orphans a callback because the node is gone, but the `$root`\n     * does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers the listener\n     * to be removed in the component's `beforeDestroy()` hook\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      if (this.$root) {\n        this.$root.$on(event, callback);\n        this.registerRootListener(event, callback);\n      }\n    },\n\n    /**\n     * Safely register a `$once()` event listener on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on `$root` and is destroyed,\n     * this orphans a callback because the node is gone, but the `$root`\n     * does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers the listener\n     * to be removed in the component's `beforeDestroy()` hook\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n\n      if (this.$root) {\n        var _callback = function _callback() {\n          _this2.unregisterRootListener(_callback); // eslint-disable-next-line node/no-callback-literal\n\n\n          callback.apply(void 0, arguments);\n        };\n\n        this.$root.$once(event, _callback);\n        this.registerRootListener(event, _callback);\n      }\n    },\n\n    /**\n     * Safely unregister event listeners from the root Vue node\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOffRoot: function listenOffRoot(event, callback) {\n      this.unregisterRootListener(event, callback);\n\n      if (this.$root) {\n        this.$root.$off(event, callback);\n      }\n    },\n\n    /**\n     * Convenience method for calling `vm.$emit()` on `$root`\n     *\n     * @param {string} event\n     * @param {*} args\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      if (this.$root) {\n        var _this$$root;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args));\n      }\n    }\n  }\n});","map":{"version":3,"names":["Vue","arrayIncludes","keys","PROP","listenOnRootMixin","extend","created","beforeDestroy","_this","forEach","event","callback","listenOffRoot","methods","registerRootListener","push","unregisterRootListener","filter","cb","listenOnRoot","$root","$on","listenOnRootOnce","_this2","_callback","apply","arguments","$once","$off","emitOnRoot","_this$$root","_len","length","args","Array","_key","$emit","concat"],"sources":["C:/Users/rayss/dev-fullstack-i/node_modules/bootstrap-vue/esm/mixins/listen-on-root.js"],"sourcesContent":["import { Vue } from '../vue';\nimport { arrayIncludes } from '../utils/array';\nimport { keys } from '../utils/object'; // --- Constants ---\n\nvar PROP = '$_rootListeners'; // --- Mixin ---\n// @vue/component\n\nexport var listenOnRootMixin = Vue.extend({\n  created: function created() {\n    // Define non-reactive property\n    // Object of arrays, keyed by event name,\n    // where value is an array of callbacks\n    this[PROP] = {};\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _this = this;\n\n    // Unregister all registered listeners\n    keys(this[PROP] || {}).forEach(function (event) {\n      _this[PROP][event].forEach(function (callback) {\n        _this.listenOffRoot(event, callback);\n      });\n    });\n    this[PROP] = null;\n  },\n  methods: {\n    registerRootListener: function registerRootListener(event, callback) {\n      if (this[PROP]) {\n        this[PROP][event] = this[PROP][event] || [];\n\n        if (!arrayIncludes(this[PROP][event], callback)) {\n          this[PROP][event].push(callback);\n        }\n      }\n    },\n    unregisterRootListener: function unregisterRootListener(event, callback) {\n      if (this[PROP] && this[PROP][event]) {\n        this[PROP][event] = this[PROP][event].filter(function (cb) {\n          return cb !== callback;\n        });\n      }\n    },\n\n    /**\n     * Safely register event listeners on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on `$root` and is destroyed,\n     * this orphans a callback because the node is gone, but the `$root`\n     * does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers the listener\n     * to be removed in the component's `beforeDestroy()` hook\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      if (this.$root) {\n        this.$root.$on(event, callback);\n        this.registerRootListener(event, callback);\n      }\n    },\n\n    /**\n     * Safely register a `$once()` event listener on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on `$root` and is destroyed,\n     * this orphans a callback because the node is gone, but the `$root`\n     * does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers the listener\n     * to be removed in the component's `beforeDestroy()` hook\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n\n      if (this.$root) {\n        var _callback = function _callback() {\n          _this2.unregisterRootListener(_callback); // eslint-disable-next-line node/no-callback-literal\n\n\n          callback.apply(void 0, arguments);\n        };\n\n        this.$root.$once(event, _callback);\n        this.registerRootListener(event, _callback);\n      }\n    },\n\n    /**\n     * Safely unregister event listeners from the root Vue node\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOffRoot: function listenOffRoot(event, callback) {\n      this.unregisterRootListener(event, callback);\n\n      if (this.$root) {\n        this.$root.$off(event, callback);\n      }\n    },\n\n    /**\n     * Convenience method for calling `vm.$emit()` on `$root`\n     *\n     * @param {string} event\n     * @param {*} args\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      if (this.$root) {\n        var _this$$root;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args));\n      }\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}