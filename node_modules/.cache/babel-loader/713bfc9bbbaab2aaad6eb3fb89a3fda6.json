{"ast":null,"code":"import { IS_BROWSER } from '../../constants/env';\nimport { isNumber, isObject, isString } from '../../utils/inspect';\nimport { mathRound } from '../../utils/math';\nimport { toInteger } from '../../utils/number';\nimport { keys } from '../../utils/object';\nimport { BVScrollspy } from './helpers/bv-scrollspy.class'; // Key we use to store our instance\n\nvar BV_SCROLLSPY = '__BV_Scrollspy__'; // Pre-compiled regular expressions\n\nvar onlyDigitsRE = /^\\d+$/;\nvar offsetRE = /^(auto|position|offset)$/; // Build a Scrollspy config based on bindings (if any)\n// Arguments and modifiers take precedence over passed value config object\n\n/* istanbul ignore next: not easy to test */\n\nvar parseBindings = function parseBindings(bindings)\n/* istanbul ignore next: not easy to test */\n{\n  var config = {}; // If argument, assume element ID\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.element = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  keys(bindings.modifiers).forEach(function (mod) {\n    if (onlyDigitsRE.test(mod)) {\n      // Offset value\n      config.offset = toInteger(mod, 0);\n    } else if (offsetRE.test(mod)) {\n      // Offset method\n      config.method = mod;\n    }\n  }); // Process value\n\n  if (isString(bindings.value)) {\n    // Value is a CSS ID or selector\n    config.element = bindings.value;\n  } else if (isNumber(bindings.value)) {\n    // Value is offset\n    config.offset = mathRound(bindings.value);\n  } else if (isObject(bindings.value)) {\n    // Value is config object\n    // Filter the object based on our supported config options\n    keys(bindings.value).filter(function (k) {\n      return !!BVScrollspy.DefaultType[k];\n    }).forEach(function (k) {\n      config[k] = bindings.value[k];\n    });\n  }\n\n  return config;\n}; // Add or update Scrollspy on our element\n\n\nvar applyScrollspy = function applyScrollspy(el, bindings, vnode)\n/* istanbul ignore next: not easy to test */\n{\n  if (!IS_BROWSER) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  var config = parseBindings(bindings);\n\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].updateConfig(config, vnode.context.$root);\n  } else {\n    el[BV_SCROLLSPY] = new BVScrollspy(el, config, vnode.context.$root);\n  }\n}; // Remove Scrollspy on our element\n\n/* istanbul ignore next: not easy to test */\n\n\nvar removeScrollspy = function removeScrollspy(el)\n/* istanbul ignore next: not easy to test */\n{\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].dispose();\n    el[BV_SCROLLSPY] = null;\n    delete el[BV_SCROLLSPY];\n  }\n};\n/*\n * Export our directive\n */\n\n\nexport var VBScrollspy = {\n  /* istanbul ignore next: not easy to test */\n  bind: function bind(el, bindings, vnode) {\n    applyScrollspy(el, bindings, vnode);\n  },\n\n  /* istanbul ignore next: not easy to test */\n  inserted: function inserted(el, bindings, vnode) {\n    applyScrollspy(el, bindings, vnode);\n  },\n\n  /* istanbul ignore next: not easy to test */\n  update: function update(el, bindings, vnode) {\n    if (bindings.value !== bindings.oldValue) {\n      applyScrollspy(el, bindings, vnode);\n    }\n  },\n\n  /* istanbul ignore next: not easy to test */\n  componentUpdated: function componentUpdated(el, bindings, vnode) {\n    if (bindings.value !== bindings.oldValue) {\n      applyScrollspy(el, bindings, vnode);\n    }\n  },\n\n  /* istanbul ignore next: not easy to test */\n  unbind: function unbind(el) {\n    removeScrollspy(el);\n  }\n};","map":{"version":3,"names":["IS_BROWSER","isNumber","isObject","isString","mathRound","toInteger","keys","BVScrollspy","BV_SCROLLSPY","onlyDigitsRE","offsetRE","parseBindings","bindings","config","arg","element","concat","modifiers","forEach","mod","test","offset","method","value","filter","k","DefaultType","applyScrollspy","el","vnode","updateConfig","context","$root","removeScrollspy","dispose","VBScrollspy","bind","inserted","update","oldValue","componentUpdated","unbind"],"sources":["C:/Users/rayss/dev-fullstack-i/node_modules/bootstrap-vue/esm/directives/scrollspy/scrollspy.js"],"sourcesContent":["import { IS_BROWSER } from '../../constants/env';\nimport { isNumber, isObject, isString } from '../../utils/inspect';\nimport { mathRound } from '../../utils/math';\nimport { toInteger } from '../../utils/number';\nimport { keys } from '../../utils/object';\nimport { BVScrollspy } from './helpers/bv-scrollspy.class'; // Key we use to store our instance\n\nvar BV_SCROLLSPY = '__BV_Scrollspy__'; // Pre-compiled regular expressions\n\nvar onlyDigitsRE = /^\\d+$/;\nvar offsetRE = /^(auto|position|offset)$/; // Build a Scrollspy config based on bindings (if any)\n// Arguments and modifiers take precedence over passed value config object\n\n/* istanbul ignore next: not easy to test */\n\nvar parseBindings = function parseBindings(bindings)\n/* istanbul ignore next: not easy to test */\n{\n  var config = {}; // If argument, assume element ID\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.element = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  keys(bindings.modifiers).forEach(function (mod) {\n    if (onlyDigitsRE.test(mod)) {\n      // Offset value\n      config.offset = toInteger(mod, 0);\n    } else if (offsetRE.test(mod)) {\n      // Offset method\n      config.method = mod;\n    }\n  }); // Process value\n\n  if (isString(bindings.value)) {\n    // Value is a CSS ID or selector\n    config.element = bindings.value;\n  } else if (isNumber(bindings.value)) {\n    // Value is offset\n    config.offset = mathRound(bindings.value);\n  } else if (isObject(bindings.value)) {\n    // Value is config object\n    // Filter the object based on our supported config options\n    keys(bindings.value).filter(function (k) {\n      return !!BVScrollspy.DefaultType[k];\n    }).forEach(function (k) {\n      config[k] = bindings.value[k];\n    });\n  }\n\n  return config;\n}; // Add or update Scrollspy on our element\n\n\nvar applyScrollspy = function applyScrollspy(el, bindings, vnode)\n/* istanbul ignore next: not easy to test */\n{\n  if (!IS_BROWSER) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  var config = parseBindings(bindings);\n\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].updateConfig(config, vnode.context.$root);\n  } else {\n    el[BV_SCROLLSPY] = new BVScrollspy(el, config, vnode.context.$root);\n  }\n}; // Remove Scrollspy on our element\n\n/* istanbul ignore next: not easy to test */\n\n\nvar removeScrollspy = function removeScrollspy(el)\n/* istanbul ignore next: not easy to test */\n{\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].dispose();\n    el[BV_SCROLLSPY] = null;\n    delete el[BV_SCROLLSPY];\n  }\n};\n/*\n * Export our directive\n */\n\n\nexport var VBScrollspy = {\n  /* istanbul ignore next: not easy to test */\n  bind: function bind(el, bindings, vnode) {\n    applyScrollspy(el, bindings, vnode);\n  },\n\n  /* istanbul ignore next: not easy to test */\n  inserted: function inserted(el, bindings, vnode) {\n    applyScrollspy(el, bindings, vnode);\n  },\n\n  /* istanbul ignore next: not easy to test */\n  update: function update(el, bindings, vnode) {\n    if (bindings.value !== bindings.oldValue) {\n      applyScrollspy(el, bindings, vnode);\n    }\n  },\n\n  /* istanbul ignore next: not easy to test */\n  componentUpdated: function componentUpdated(el, bindings, vnode) {\n    if (bindings.value !== bindings.oldValue) {\n      applyScrollspy(el, bindings, vnode);\n    }\n  },\n\n  /* istanbul ignore next: not easy to test */\n  unbind: function unbind(el) {\n    removeScrollspy(el);\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}