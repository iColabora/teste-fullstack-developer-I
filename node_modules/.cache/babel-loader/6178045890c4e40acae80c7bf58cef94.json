{"ast":null,"code":"import { toString } from './string';\n\nvar escapeChar = function escapeChar(value) {\n  return '\\\\' + value;\n}; // The `cssEscape()` util is based on this `CSS.escape()` polyfill:\n// https://github.com/mathiasbynens/CSS.escape\n\n\nexport var cssEscape = function cssEscape(value) {\n  value = toString(value);\n  var length = value.length;\n  var firstCharCode = value.charCodeAt(0);\n  return value.split('').reduce(function (result, char, index) {\n    var charCode = value.charCodeAt(index); // If the character is NULL (U+0000), use (U+FFFD) as replacement\n\n    if (charCode === 0x0000) {\n      return result + \"\\uFFFD\";\n    } // If the character ...\n\n\n    if ( // ... is U+007F OR\n    charCode === 0x007f || // ... is in the range [\\1-\\1F] (U+0001 to U+001F) OR ...\n    charCode >= 0x0001 && charCode <= 0x001f || // ... is the first character and is in the range [0-9] (U+0030 to U+0039) OR ...\n    index === 0 && charCode >= 0x0030 && charCode <= 0x0039 || // ... is the second character and is in the range [0-9] (U+0030 to U+0039)\n    // and the first character is a `-` (U+002D) ...\n    index === 1 && charCode >= 0x0030 && charCode <= 0x0039 && firstCharCode === 0x002d) {\n      // ... https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n      return result + escapeChar(\"\".concat(charCode.toString(16), \" \"));\n    } // If the character ...\n\n\n    if ( // ... is the first character AND ...\n    index === 0 && // ... is a `-` (U+002D) AND ...\n    charCode === 0x002d && // ... there is no second character ...\n    length === 1) {\n      // ... use the escaped character\n      return result + escapeChar(char);\n    } // If the character ...\n\n\n    if ( // ... is greater than or equal to U+0080 OR ...\n    charCode >= 0x0080 || // ... is `-` (U+002D) OR ...\n    charCode === 0x002d || // ... is `_` (U+005F) OR ...\n    charCode === 0x005f || // ... is in the range [0-9] (U+0030 to U+0039) OR ...\n    charCode >= 0x0030 && charCode <= 0x0039 || // ... is in the range [A-Z] (U+0041 to U+005A) OR ...\n    charCode >= 0x0041 && charCode <= 0x005a || // ... is in the range [a-z] (U+0061 to U+007A) ...\n    charCode >= 0x0061 && charCode <= 0x007a) {\n      // ... use the character itself\n      return result + char;\n    } // Otherwise use the escaped character\n    // See: https://drafts.csswg.org/cssom/#escape-a-character\n\n\n    return result + escapeChar(char);\n  }, '');\n};","map":{"version":3,"names":["toString","escapeChar","value","cssEscape","length","firstCharCode","charCodeAt","split","reduce","result","char","index","charCode","concat"],"sources":["C:/Users/rayss/dev-fullstack-i/node_modules/bootstrap-vue/esm/utils/css-escape.js"],"sourcesContent":["import { toString } from './string';\n\nvar escapeChar = function escapeChar(value) {\n  return '\\\\' + value;\n}; // The `cssEscape()` util is based on this `CSS.escape()` polyfill:\n// https://github.com/mathiasbynens/CSS.escape\n\n\nexport var cssEscape = function cssEscape(value) {\n  value = toString(value);\n  var length = value.length;\n  var firstCharCode = value.charCodeAt(0);\n  return value.split('').reduce(function (result, char, index) {\n    var charCode = value.charCodeAt(index); // If the character is NULL (U+0000), use (U+FFFD) as replacement\n\n    if (charCode === 0x0000) {\n      return result + \"\\uFFFD\";\n    } // If the character ...\n\n\n    if ( // ... is U+007F OR\n    charCode === 0x007f || // ... is in the range [\\1-\\1F] (U+0001 to U+001F) OR ...\n    charCode >= 0x0001 && charCode <= 0x001f || // ... is the first character and is in the range [0-9] (U+0030 to U+0039) OR ...\n    index === 0 && charCode >= 0x0030 && charCode <= 0x0039 || // ... is the second character and is in the range [0-9] (U+0030 to U+0039)\n    // and the first character is a `-` (U+002D) ...\n    index === 1 && charCode >= 0x0030 && charCode <= 0x0039 && firstCharCode === 0x002d) {\n      // ... https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n      return result + escapeChar(\"\".concat(charCode.toString(16), \" \"));\n    } // If the character ...\n\n\n    if ( // ... is the first character AND ...\n    index === 0 && // ... is a `-` (U+002D) AND ...\n    charCode === 0x002d && // ... there is no second character ...\n    length === 1) {\n      // ... use the escaped character\n      return result + escapeChar(char);\n    } // If the character ...\n\n\n    if ( // ... is greater than or equal to U+0080 OR ...\n    charCode >= 0x0080 || // ... is `-` (U+002D) OR ...\n    charCode === 0x002d || // ... is `_` (U+005F) OR ...\n    charCode === 0x005f || // ... is in the range [0-9] (U+0030 to U+0039) OR ...\n    charCode >= 0x0030 && charCode <= 0x0039 || // ... is in the range [A-Z] (U+0041 to U+005A) OR ...\n    charCode >= 0x0041 && charCode <= 0x005a || // ... is in the range [a-z] (U+0061 to U+007A) ...\n    charCode >= 0x0061 && charCode <= 0x007a) {\n      // ... use the character itself\n      return result + char;\n    } // Otherwise use the escaped character\n    // See: https://drafts.csswg.org/cssom/#escape-a-character\n\n\n    return result + escapeChar(char);\n  }, '');\n};"],"mappings":"AAAA,SAASA,QAAT,QAAyB,UAAzB;;AAEA,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,KAApB,EAA2B;EAC1C,OAAO,OAAOA,KAAd;AACD,CAFD,C,CAEG;AACH;;;AAGA,OAAO,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBD,KAAnB,EAA0B;EAC/CA,KAAK,GAAGF,QAAQ,CAACE,KAAD,CAAhB;EACA,IAAIE,MAAM,GAAGF,KAAK,CAACE,MAAnB;EACA,IAAIC,aAAa,GAAGH,KAAK,CAACI,UAAN,CAAiB,CAAjB,CAApB;EACA,OAAOJ,KAAK,CAACK,KAAN,CAAY,EAAZ,EAAgBC,MAAhB,CAAuB,UAAUC,MAAV,EAAkBC,IAAlB,EAAwBC,KAAxB,EAA+B;IAC3D,IAAIC,QAAQ,GAAGV,KAAK,CAACI,UAAN,CAAiBK,KAAjB,CAAf,CAD2D,CACnB;;IAExC,IAAIC,QAAQ,KAAK,MAAjB,EAAyB;MACvB,OAAOH,MAAM,GAAG,QAAhB;IACD,CAL0D,CAKzD;;;IAGF,KAAK;IACLG,QAAQ,KAAK,MAAb,IAAuB;IACvBA,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,MADlC,IAC4C;IAC5CD,KAAK,KAAK,CAAV,IAAeC,QAAQ,IAAI,MAA3B,IAAqCA,QAAQ,IAAI,MAFjD,IAE2D;IAC3D;IACAD,KAAK,KAAK,CAAV,IAAeC,QAAQ,IAAI,MAA3B,IAAqCA,QAAQ,IAAI,MAAjD,IAA2DP,aAAa,KAAK,MAL7E,EAKqF;MACnF;MACA,OAAOI,MAAM,GAAGR,UAAU,CAAC,GAAGY,MAAH,CAAUD,QAAQ,CAACZ,QAAT,CAAkB,EAAlB,CAAV,EAAiC,GAAjC,CAAD,CAA1B;IACD,CAhB0D,CAgBzD;;;IAGF,KAAK;IACLW,KAAK,KAAK,CAAV,IAAe;IACfC,QAAQ,KAAK,MADb,IACuB;IACvBR,MAAM,KAAK,CAHX,EAGc;MACZ;MACA,OAAOK,MAAM,GAAGR,UAAU,CAACS,IAAD,CAA1B;IACD,CAzB0D,CAyBzD;;;IAGF,KAAK;IACLE,QAAQ,IAAI,MAAZ,IAAsB;IACtBA,QAAQ,KAAK,MADb,IACuB;IACvBA,QAAQ,KAAK,MAFb,IAEuB;IACvBA,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,MAHlC,IAG4C;IAC5CA,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,MAJlC,IAI4C;IAC5CA,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,MANlC,EAM0C;MACxC;MACA,OAAOH,MAAM,GAAGC,IAAhB;IACD,CArC0D,CAqCzD;IACF;;;IAGA,OAAOD,MAAM,GAAGR,UAAU,CAACS,IAAD,CAA1B;EACD,CA1CM,EA0CJ,EA1CI,CAAP;AA2CD,CA/CM"},"metadata":{},"sourceType":"module"}