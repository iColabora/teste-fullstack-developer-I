{"ast":null,"code":"import { isDate, isObject, isUndefinedOrNull } from './inspect';\nimport { keys } from './object';\nimport { toString } from './string'; // Recursively stringifies the values of an object, space separated, in an\n// SSR safe deterministic way (keys are sorted before stringification)\n//\n//   ex:\n//     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\n//   becomes\n//     'one 3 2 zzz 10 12 11'\n//\n// Strings are returned as-is\n// Numbers get converted to string\n// `null` and `undefined` values are filtered out\n// Dates are converted to their native string format\n\nexport var stringifyObjectValues = function stringifyObjectValues(value) {\n  if (isUndefinedOrNull(value)) {\n    return '';\n  } // Arrays are also object, and keys just returns the array indexes\n  // Date objects we convert to strings\n\n\n  if (isObject(value) && !isDate(value)) {\n    return keys(value).sort() // Sort to prevent SSR issues on pre-rendered sorted tables\n    .map(function (k) {\n      return stringifyObjectValues(value[k]);\n    }).filter(function (v) {\n      return !!v;\n    }) // Ignore empty strings\n    .join(' ');\n  }\n\n  return toString(value);\n};","map":{"version":3,"names":["isDate","isObject","isUndefinedOrNull","keys","toString","stringifyObjectValues","value","sort","map","k","filter","v","join"],"sources":["C:/Users/rayss/dev-fullstack-i/node_modules/bootstrap-vue/esm/utils/stringify-object-values.js"],"sourcesContent":["import { isDate, isObject, isUndefinedOrNull } from './inspect';\nimport { keys } from './object';\nimport { toString } from './string'; // Recursively stringifies the values of an object, space separated, in an\n// SSR safe deterministic way (keys are sorted before stringification)\n//\n//   ex:\n//     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\n//   becomes\n//     'one 3 2 zzz 10 12 11'\n//\n// Strings are returned as-is\n// Numbers get converted to string\n// `null` and `undefined` values are filtered out\n// Dates are converted to their native string format\n\nexport var stringifyObjectValues = function stringifyObjectValues(value) {\n  if (isUndefinedOrNull(value)) {\n    return '';\n  } // Arrays are also object, and keys just returns the array indexes\n  // Date objects we convert to strings\n\n\n  if (isObject(value) && !isDate(value)) {\n    return keys(value).sort() // Sort to prevent SSR issues on pre-rendered sorted tables\n    .map(function (k) {\n      return stringifyObjectValues(value[k]);\n    }).filter(function (v) {\n      return !!v;\n    }) // Ignore empty strings\n    .join(' ');\n  }\n\n  return toString(value);\n};"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,iBAA3B,QAAoD,WAApD;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,SAASC,QAAT,QAAyB,UAAzB,C,CAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;EACvE,IAAIJ,iBAAiB,CAACI,KAAD,CAArB,EAA8B;IAC5B,OAAO,EAAP;EACD,CAHsE,CAGrE;EACF;;;EAGA,IAAIL,QAAQ,CAACK,KAAD,CAAR,IAAmB,CAACN,MAAM,CAACM,KAAD,CAA9B,EAAuC;IACrC,OAAOH,IAAI,CAACG,KAAD,CAAJ,CAAYC,IAAZ,GAAmB;IAAnB,CACNC,GADM,CACF,UAAUC,CAAV,EAAa;MAChB,OAAOJ,qBAAqB,CAACC,KAAK,CAACG,CAAD,CAAN,CAA5B;IACD,CAHM,EAGJC,MAHI,CAGG,UAAUC,CAAV,EAAa;MACrB,OAAO,CAAC,CAACA,CAAT;IACD,CALM,EAKJ;IALI,CAMNC,IANM,CAMD,GANC,CAAP;EAOD;;EAED,OAAOR,QAAQ,CAACE,KAAD,CAAf;AACD,CAlBM"},"metadata":{},"sourceType":"module"}