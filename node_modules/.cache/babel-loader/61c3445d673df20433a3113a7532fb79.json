{"ast":null,"code":"import { arrayIncludes } from '../../../utils/array';\nimport { isArray, isFunction } from '../../../utils/inspect';\nimport { clone, keys, pick } from '../../../utils/object';\nimport { IGNORED_FIELD_KEYS } from './constants'; // Return a copy of a row after all reserved fields have been filtered out\n\nexport var sanitizeRow = function sanitizeRow(row, ignoreFields, includeFields) {\n  var fieldsObj = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {}; // We first need to format the row based on the field configurations\n  // This ensures that we add formatted values for keys that may not\n  // exist in the row itself\n\n  var formattedRow = keys(fieldsObj).reduce(function (result, key) {\n    var field = fieldsObj[key];\n    var filterByFormatted = field.filterByFormatted;\n    var formatter = isFunction(filterByFormatted) ?\n    /* istanbul ignore next */\n    filterByFormatted : filterByFormatted ?\n    /* istanbul ignore next */\n    field.formatter : null;\n\n    if (isFunction(formatter)) {\n      result[key] = formatter(row[key], key, row);\n    }\n\n    return result;\n  }, clone(row)); // Determine the allowed keys:\n  //   - Ignore special fields that start with `_`\n  //   - Ignore fields in the `ignoreFields` array\n  //   - Include only fields in the `includeFields` array\n\n  var allowedKeys = keys(formattedRow).filter(function (key) {\n    return !IGNORED_FIELD_KEYS[key] && !(isArray(ignoreFields) && ignoreFields.length > 0 && arrayIncludes(ignoreFields, key)) && !(isArray(includeFields) && includeFields.length > 0 && !arrayIncludes(includeFields, key));\n  });\n  return pick(formattedRow, allowedKeys);\n};","map":{"version":3,"names":["arrayIncludes","isArray","isFunction","clone","keys","pick","IGNORED_FIELD_KEYS","sanitizeRow","row","ignoreFields","includeFields","fieldsObj","arguments","length","undefined","formattedRow","reduce","result","key","field","filterByFormatted","formatter","allowedKeys","filter"],"sources":["C:/Users/rayss/dev-fullstack-i/node_modules/bootstrap-vue/esm/components/table/helpers/sanitize-row.js"],"sourcesContent":["import { arrayIncludes } from '../../../utils/array';\nimport { isArray, isFunction } from '../../../utils/inspect';\nimport { clone, keys, pick } from '../../../utils/object';\nimport { IGNORED_FIELD_KEYS } from './constants'; // Return a copy of a row after all reserved fields have been filtered out\n\nexport var sanitizeRow = function sanitizeRow(row, ignoreFields, includeFields) {\n  var fieldsObj = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // We first need to format the row based on the field configurations\n  // This ensures that we add formatted values for keys that may not\n  // exist in the row itself\n  var formattedRow = keys(fieldsObj).reduce(function (result, key) {\n    var field = fieldsObj[key];\n    var filterByFormatted = field.filterByFormatted;\n    var formatter = isFunction(filterByFormatted) ?\n    /* istanbul ignore next */\n    filterByFormatted : filterByFormatted ?\n    /* istanbul ignore next */\n    field.formatter : null;\n\n    if (isFunction(formatter)) {\n      result[key] = formatter(row[key], key, row);\n    }\n\n    return result;\n  }, clone(row)); // Determine the allowed keys:\n  //   - Ignore special fields that start with `_`\n  //   - Ignore fields in the `ignoreFields` array\n  //   - Include only fields in the `includeFields` array\n\n  var allowedKeys = keys(formattedRow).filter(function (key) {\n    return !IGNORED_FIELD_KEYS[key] && !(isArray(ignoreFields) && ignoreFields.length > 0 && arrayIncludes(ignoreFields, key)) && !(isArray(includeFields) && includeFields.length > 0 && !arrayIncludes(includeFields, key));\n  });\n  return pick(formattedRow, allowedKeys);\n};"],"mappings":"AAAA,SAASA,aAAT,QAA8B,sBAA9B;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,wBAApC;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,IAAtB,QAAkC,uBAAlC;AACA,SAASC,kBAAT,QAAmC,aAAnC,C,CAAkD;;AAElD,OAAO,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,GAArB,EAA0BC,YAA1B,EAAwCC,aAAxC,EAAuD;EAC9E,IAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF,CAD8E,CAE9E;EACA;EACA;;EACA,IAAIG,YAAY,GAAGX,IAAI,CAACO,SAAD,CAAJ,CAAgBK,MAAhB,CAAuB,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;IAC/D,IAAIC,KAAK,GAAGR,SAAS,CAACO,GAAD,CAArB;IACA,IAAIE,iBAAiB,GAAGD,KAAK,CAACC,iBAA9B;IACA,IAAIC,SAAS,GAAGnB,UAAU,CAACkB,iBAAD,CAAV;IAChB;IACAA,iBAFgB,GAEIA,iBAAiB;IACrC;IACAD,KAAK,CAACE,SAF+B,GAEnB,IAJlB;;IAMA,IAAInB,UAAU,CAACmB,SAAD,CAAd,EAA2B;MACzBJ,MAAM,CAACC,GAAD,CAAN,GAAcG,SAAS,CAACb,GAAG,CAACU,GAAD,CAAJ,EAAWA,GAAX,EAAgBV,GAAhB,CAAvB;IACD;;IAED,OAAOS,MAAP;EACD,CAdkB,EAchBd,KAAK,CAACK,GAAD,CAdW,CAAnB,CAL8E,CAmB9D;EAChB;EACA;EACA;;EAEA,IAAIc,WAAW,GAAGlB,IAAI,CAACW,YAAD,CAAJ,CAAmBQ,MAAnB,CAA0B,UAAUL,GAAV,EAAe;IACzD,OAAO,CAACZ,kBAAkB,CAACY,GAAD,CAAnB,IAA4B,EAAEjB,OAAO,CAACQ,YAAD,CAAP,IAAyBA,YAAY,CAACI,MAAb,GAAsB,CAA/C,IAAoDb,aAAa,CAACS,YAAD,EAAeS,GAAf,CAAnE,CAA5B,IAAuH,EAAEjB,OAAO,CAACS,aAAD,CAAP,IAA0BA,aAAa,CAACG,MAAd,GAAuB,CAAjD,IAAsD,CAACb,aAAa,CAACU,aAAD,EAAgBQ,GAAhB,CAAtE,CAA9H;EACD,CAFiB,CAAlB;EAGA,OAAOb,IAAI,CAACU,YAAD,EAAeO,WAAf,CAAX;AACD,CA5BM"},"metadata":{},"sourceType":"module"}