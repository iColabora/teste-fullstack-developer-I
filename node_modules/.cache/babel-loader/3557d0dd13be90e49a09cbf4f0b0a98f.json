{"ast":null,"code":"// String utilities\nimport { RX_HYPHENATE, RX_LOWER_UPPER, RX_REGEXP_REPLACE, RX_START_SPACE_WORD, RX_TRIM_LEFT, RX_TRIM_RIGHT, RX_UNDERSCORE, RX_UN_KEBAB } from '../constants/regex';\nimport { isArray, isPlainObject, isString, isUndefinedOrNull } from './inspect'; // --- Utilities ---\n// Converts PascalCase or camelCase to kebab-case\n\nexport var kebabCase = function kebabCase(str) {\n  return str.replace(RX_HYPHENATE, '-$1').toLowerCase();\n}; // Converts a kebab-case or camelCase string to PascalCase\n\nexport var pascalCase = function pascalCase(str) {\n  str = kebabCase(str).replace(RX_UN_KEBAB, function (_, c) {\n    return c ? c.toUpperCase() : '';\n  });\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}; // Converts a string, including strings in camelCase or snake_case, into Start Case\n// It keeps original single quote and hyphen in the word\n// https://github.com/UrbanCompass/to-start-case\n\nexport var startCase = function startCase(str) {\n  return str.replace(RX_UNDERSCORE, ' ').replace(RX_LOWER_UPPER, function (str, $1, $2) {\n    return $1 + ' ' + $2;\n  }).replace(RX_START_SPACE_WORD, function (str, $1, $2) {\n    return $1 + $2.toUpperCase();\n  });\n}; // Lowercases the first letter of a string and returns a new string\n\nexport var lowerFirst = function lowerFirst(str) {\n  str = isString(str) ? str.trim() : String(str);\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}; // Uppercases the first letter of a string and returns a new string\n\nexport var upperFirst = function upperFirst(str) {\n  str = isString(str) ? str.trim() : String(str);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}; // Escape characters to be used in building a regular expression\n\nexport var escapeRegExp = function escapeRegExp(str) {\n  return str.replace(RX_REGEXP_REPLACE, '\\\\$&');\n}; // Convert a value to a string that can be rendered\n// `undefined`/`null` will be converted to `''`\n// Plain objects and arrays will be JSON stringified\n\nexport var toString = function toString(val) {\n  var spaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return isUndefinedOrNull(val) ? '' : isArray(val) || isPlainObject(val) && val.toString === Object.prototype.toString ? JSON.stringify(val, null, spaces) : String(val);\n}; // Remove leading white space from a string\n\nexport var trimLeft = function trimLeft(str) {\n  return toString(str).replace(RX_TRIM_LEFT, '');\n}; // Remove Trailing white space from a string\n\nexport var trimRight = function trimRight(str) {\n  return toString(str).replace(RX_TRIM_RIGHT, '');\n}; // Remove leading and trailing white space from a string\n\nexport var trim = function trim(str) {\n  return toString(str).trim();\n}; // Lower case a string\n\nexport var lowerCase = function lowerCase(str) {\n  return toString(str).toLowerCase();\n}; // Upper case a string\n\nexport var upperCase = function upperCase(str) {\n  return toString(str).toUpperCase();\n};","map":{"version":3,"names":["RX_HYPHENATE","RX_LOWER_UPPER","RX_REGEXP_REPLACE","RX_START_SPACE_WORD","RX_TRIM_LEFT","RX_TRIM_RIGHT","RX_UNDERSCORE","RX_UN_KEBAB","isArray","isPlainObject","isString","isUndefinedOrNull","kebabCase","str","replace","toLowerCase","pascalCase","_","c","toUpperCase","charAt","slice","startCase","$1","$2","lowerFirst","trim","String","upperFirst","escapeRegExp","toString","val","spaces","arguments","length","undefined","Object","prototype","JSON","stringify","trimLeft","trimRight","lowerCase","upperCase"],"sources":["C:/Users/rayss/dev-fullstack-i/node_modules/bootstrap-vue/esm/utils/string.js"],"sourcesContent":["// String utilities\nimport { RX_HYPHENATE, RX_LOWER_UPPER, RX_REGEXP_REPLACE, RX_START_SPACE_WORD, RX_TRIM_LEFT, RX_TRIM_RIGHT, RX_UNDERSCORE, RX_UN_KEBAB } from '../constants/regex';\nimport { isArray, isPlainObject, isString, isUndefinedOrNull } from './inspect'; // --- Utilities ---\n// Converts PascalCase or camelCase to kebab-case\n\nexport var kebabCase = function kebabCase(str) {\n  return str.replace(RX_HYPHENATE, '-$1').toLowerCase();\n}; // Converts a kebab-case or camelCase string to PascalCase\n\nexport var pascalCase = function pascalCase(str) {\n  str = kebabCase(str).replace(RX_UN_KEBAB, function (_, c) {\n    return c ? c.toUpperCase() : '';\n  });\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}; // Converts a string, including strings in camelCase or snake_case, into Start Case\n// It keeps original single quote and hyphen in the word\n// https://github.com/UrbanCompass/to-start-case\n\nexport var startCase = function startCase(str) {\n  return str.replace(RX_UNDERSCORE, ' ').replace(RX_LOWER_UPPER, function (str, $1, $2) {\n    return $1 + ' ' + $2;\n  }).replace(RX_START_SPACE_WORD, function (str, $1, $2) {\n    return $1 + $2.toUpperCase();\n  });\n}; // Lowercases the first letter of a string and returns a new string\n\nexport var lowerFirst = function lowerFirst(str) {\n  str = isString(str) ? str.trim() : String(str);\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}; // Uppercases the first letter of a string and returns a new string\n\nexport var upperFirst = function upperFirst(str) {\n  str = isString(str) ? str.trim() : String(str);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}; // Escape characters to be used in building a regular expression\n\nexport var escapeRegExp = function escapeRegExp(str) {\n  return str.replace(RX_REGEXP_REPLACE, '\\\\$&');\n}; // Convert a value to a string that can be rendered\n// `undefined`/`null` will be converted to `''`\n// Plain objects and arrays will be JSON stringified\n\nexport var toString = function toString(val) {\n  var spaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return isUndefinedOrNull(val) ? '' : isArray(val) || isPlainObject(val) && val.toString === Object.prototype.toString ? JSON.stringify(val, null, spaces) : String(val);\n}; // Remove leading white space from a string\n\nexport var trimLeft = function trimLeft(str) {\n  return toString(str).replace(RX_TRIM_LEFT, '');\n}; // Remove Trailing white space from a string\n\nexport var trimRight = function trimRight(str) {\n  return toString(str).replace(RX_TRIM_RIGHT, '');\n}; // Remove leading and trailing white space from a string\n\nexport var trim = function trim(str) {\n  return toString(str).trim();\n}; // Lower case a string\n\nexport var lowerCase = function lowerCase(str) {\n  return toString(str).toLowerCase();\n}; // Upper case a string\n\nexport var upperCase = function upperCase(str) {\n  return toString(str).toUpperCase();\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}