import { PropType, StyleValue } from 'vue';
import { ColorVariant } from '../../types';
export declare const computeSize: (value: any) => string | null;
declare const _sfc_main: import("vue").DefineComponent<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        required: false;
    };
    badge: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    badgeLeft: {
        type: BooleanConstructor;
        default: boolean;
    };
    badgeOffset: {
        type: StringConstructor;
        required: false;
    };
    badgeTop: {
        type: BooleanConstructor;
        default: boolean;
    };
    badgeVariant: {
        type: PropType<ColorVariant>;
        default: string;
    };
    button: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonType: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        required: false;
    };
    rounded: {
        type: (BooleanConstructor | StringConstructor)[];
        default: string;
    };
    size: {
        type: PropType<string | number>;
        required: false;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    src: {
        type: StringConstructor;
        required: false;
    };
    text: {
        type: StringConstructor;
        required: false;
    };
    textVariant: {
        type: PropType<ColorVariant | undefined>;
        default: undefined;
    };
    variant: {
        type: PropType<ColorVariant>;
        default: string;
    };
}, {
    attrs: import("vue").ComputedRef<{
        'aria-label': string | null;
        disabled: true | null;
    }>;
    badgeClasses: import("vue").ComputedRef<{
        [x: string]: ColorVariant;
    }>;
    badgeStyle: import("vue").ComputedRef<StyleValue>;
    badgeText: import("vue").ComputedRef<string | false>;
    badgeTextClasses: import("vue").ComputedRef<string>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean | "" | 0 | ColorVariant | null | undefined;
        badge: boolean;
        rounded: boolean;
        "rounded-circle": boolean;
        "rounded-0": boolean;
        "rounded-1": boolean;
        "rounded-3": boolean;
        "rounded-top": boolean;
        "rounded-bottom": boolean;
        "rounded-start": boolean;
        "rounded-end": boolean;
        btn: boolean;
    }>;
    clicked: (e: PointerEvent) => void;
    fontStyle: import("vue").ComputedRef<StyleValue>;
    hasBadgeSlot: import("vue").ComputedRef<boolean>;
    hasDefaultSlot: import("vue").ComputedRef<boolean>;
    iconName: import("vue").ComputedRef<string | undefined>;
    onImgError: (e: Event) => void;
    showBadge: import("vue").ComputedRef<string | boolean>;
    tag: import("vue").ComputedRef<string>;
    tagStyle: import("vue").ComputedRef<{
        width: string | null;
        height: string | null;
        marginLeft: string;
        marginRight: string;
    } | {
        width: string | null;
        height: string | null;
        marginLeft?: undefined;
        marginRight?: undefined;
    }>;
    textClasses: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "img-error")[], "click" | "img-error", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    alt: {
        type: StringConstructor;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        required: false;
    };
    badge: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    badgeLeft: {
        type: BooleanConstructor;
        default: boolean;
    };
    badgeOffset: {
        type: StringConstructor;
        required: false;
    };
    badgeTop: {
        type: BooleanConstructor;
        default: boolean;
    };
    badgeVariant: {
        type: PropType<ColorVariant>;
        default: string;
    };
    button: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonType: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        required: false;
    };
    rounded: {
        type: (BooleanConstructor | StringConstructor)[];
        default: string;
    };
    size: {
        type: PropType<string | number>;
        required: false;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    src: {
        type: StringConstructor;
        required: false;
    };
    text: {
        type: StringConstructor;
        required: false;
    };
    textVariant: {
        type: PropType<ColorVariant | undefined>;
        default: undefined;
    };
    variant: {
        type: PropType<ColorVariant>;
        default: string;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    "onImg-error"?: ((...args: any[]) => any) | undefined;
}, {
    variant: ColorVariant;
    button: boolean;
    alt: string;
    badge: string | boolean;
    badgeLeft: boolean;
    badgeTop: boolean;
    badgeVariant: ColorVariant;
    buttonType: string;
    disabled: boolean;
    rounded: string | boolean;
    square: boolean;
    textVariant: ColorVariant | undefined;
}>;
export default _sfc_main;
