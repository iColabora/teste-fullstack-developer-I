import { ComputedRef, InjectionKey, PropType, StyleValue } from 'vue';
import { ColorVariant, InputSize } from '../../types';
export interface ParentData {
    overlapScale: ComputedRef<number>;
    size: InputSize | string | undefined;
    square: boolean;
    rounded: boolean | string;
    variant: ColorVariant | undefined;
}
export declare const injectionKey: InjectionKey<ParentData>;
declare const _sfc_main: import("vue").DefineComponent<{
    overlap: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rounded: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    size: {
        type: PropType<string>;
        required: false;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    variant: {
        type: PropType<ColorVariant>;
        required: false;
    };
}, {
    paddingStyle: ComputedRef<StyleValue>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    overlap: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rounded: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    size: {
        type: PropType<string>;
        required: false;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    variant: {
        type: PropType<ColorVariant>;
        required: false;
    };
}>>, {
    tag: string;
    rounded: string | boolean;
    square: boolean;
    overlap: string | number;
}>;
export default _sfc_main;
