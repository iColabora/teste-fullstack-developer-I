import { ButtonVariant, Size } from '../types';
import { PropType } from 'vue';
declare const _sfc_main: import("vue").DefineComponent<{
    autoClose: {
        type: StringConstructor;
        default: string;
    };
    id: {
        type: StringConstructor;
    };
    dark: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropleft: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropright: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropup: {
        type: BooleanConstructor;
        default: boolean;
    };
    right: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    left: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    text: {
        type: StringConstructor;
    };
    offset: {
        type: StringConstructor;
    };
    offsetParent: {
        type: BooleanConstructor;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
        default: boolean;
    };
    splitVariant: {
        type: PropType<ButtonVariant>;
    };
    size: {
        type: PropType<Size>;
    };
    variant: {
        type: PropType<ButtonVariant>;
        default: string;
    };
}, {
    props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
        autoClose: {
            type: StringConstructor;
            default: string;
        };
        id: {
            type: StringConstructor;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        dropleft: {
            type: BooleanConstructor;
            default: boolean;
        };
        dropright: {
            type: BooleanConstructor;
            default: boolean;
        };
        dropup: {
            type: BooleanConstructor;
            default: boolean;
        };
        right: {
            type: (BooleanConstructor | StringConstructor)[];
            default: boolean;
        };
        left: {
            type: (BooleanConstructor | StringConstructor)[];
            default: boolean;
        };
        text: {
            type: StringConstructor;
        };
        offset: {
            type: StringConstructor;
        };
        offsetParent: {
            type: BooleanConstructor;
            default: boolean;
        };
        split: {
            type: BooleanConstructor;
            default: boolean;
        };
        splitVariant: {
            type: PropType<ButtonVariant>;
        };
        size: {
            type: PropType<Size>;
        };
        variant: {
            type: PropType<ButtonVariant>;
            default: string;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
    }>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    autoClose: {
        type: StringConstructor;
        default: string;
    };
    id: {
        type: StringConstructor;
    };
    dark: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropleft: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropright: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropup: {
        type: BooleanConstructor;
        default: boolean;
    };
    right: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    left: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    text: {
        type: StringConstructor;
    };
    offset: {
        type: StringConstructor;
    };
    offsetParent: {
        type: BooleanConstructor;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
        default: boolean;
    };
    splitVariant: {
        type: PropType<ButtonVariant>;
    };
    size: {
        type: PropType<Size>;
    };
    variant: {
        type: PropType<ButtonVariant>;
        default: string;
    };
}>>, {
    split: boolean;
    dark: boolean;
    variant: ButtonVariant;
    left: string | boolean;
    right: string | boolean;
    autoClose: string;
    dropup: boolean;
    dropright: boolean;
    dropleft: boolean;
    offsetParent: boolean;
}>;
export default _sfc_main;
