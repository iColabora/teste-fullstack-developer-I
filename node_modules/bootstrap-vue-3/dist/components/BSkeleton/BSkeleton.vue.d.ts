import { PropType, StyleValue } from 'vue';
import type { ColorVariant, SkeletonAnimation, SkeletonType } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    animation: {
        type: PropType<SkeletonAnimation>;
        default: string;
    };
    height: {
        type: StringConstructor;
    };
    size: {
        type: StringConstructor;
    };
    type: {
        type: PropType<SkeletonType>;
        default: string;
    };
    variant: {
        type: PropType<ColorVariant>;
    };
    width: {
        type: StringConstructor;
    };
}, {
    props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: PropType<SkeletonAnimation>;
            default: string;
        };
        height: {
            type: StringConstructor;
        };
        size: {
            type: StringConstructor;
        };
        type: {
            type: PropType<SkeletonType>;
            default: string;
        };
        variant: {
            type: PropType<ColorVariant>;
        };
        width: {
            type: StringConstructor;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
    }>>;
    classes: import("vue").ComputedRef<(string | {
        [x: string]: ColorVariant | undefined;
    })[]>;
    style: import("vue").ComputedRef<StyleValue>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: PropType<SkeletonAnimation>;
        default: string;
    };
    height: {
        type: StringConstructor;
    };
    size: {
        type: StringConstructor;
    };
    type: {
        type: PropType<SkeletonType>;
        default: string;
    };
    variant: {
        type: PropType<ColorVariant>;
    };
    width: {
        type: StringConstructor;
    };
}>>, {
    type: SkeletonType;
    animation: SkeletonAnimation;
}>;
export default _sfc_main;
