import { PropType } from 'vue';
import type { InputSize, InputType } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    addButtonText: {
        type: StringConstructor;
        default: string;
    };
    addButtonVariant: {
        type: StringConstructor;
        default: string;
    };
    addOnChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    duplicateTagText: {
        type: StringConstructor;
        default: string;
    };
    inputAttrs: {
        type: ObjectConstructor;
    };
    inputClass: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    };
    inputId: {
        type: StringConstructor;
    };
    inputType: {
        type: PropType<InputType>;
        default: string;
    };
    invalidTagText: {
        type: StringConstructor;
        default: string;
    };
    form: {
        type: StringConstructor;
    };
    limit: {
        type: NumberConstructor;
    };
    limitTagsText: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: PropType<string[]>;
        default: () => never[];
    };
    name: {
        type: StringConstructor;
    };
    noAddOnEnter: {
        type: BooleanConstructor;
        default: boolean;
    };
    noOuterFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    noTagRemove: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    removeOnDelete: {
        type: BooleanConstructor;
        default: boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    separator: {
        type: PropType<string | string[]>;
    };
    state: {
        type: BooleanConstructor;
        default: null;
    };
    size: {
        type: PropType<InputSize>;
    };
    tagClass: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    };
    tagPills: {
        type: BooleanConstructor;
        default: boolean;
    };
    tagRemoveLabel: {
        type: StringConstructor;
    };
    tagRemovedLabel: {
        type: StringConstructor;
        default: string;
    };
    tagValidator: {
        type: FunctionConstructor;
        default: () => boolean;
    };
    tagVariant: {
        type: StringConstructor;
        default: string;
    };
}, {
    props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
        addButtonText: {
            type: StringConstructor;
            default: string;
        };
        addButtonVariant: {
            type: StringConstructor;
            default: string;
        };
        addOnChange: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        duplicateTagText: {
            type: StringConstructor;
            default: string;
        };
        inputAttrs: {
            type: ObjectConstructor;
        };
        inputClass: {
            type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
        };
        inputId: {
            type: StringConstructor;
        };
        inputType: {
            type: PropType<InputType>;
            default: string;
        };
        invalidTagText: {
            type: StringConstructor;
            default: string;
        };
        form: {
            type: StringConstructor;
        };
        limit: {
            type: NumberConstructor;
        };
        limitTagsText: {
            type: StringConstructor;
            default: string;
        };
        modelValue: {
            type: PropType<string[]>;
            default: () => never[];
        };
        name: {
            type: StringConstructor;
        };
        noAddOnEnter: {
            type: BooleanConstructor;
            default: boolean;
        };
        noOuterFocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        noTagRemove: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        removeOnDelete: {
            type: BooleanConstructor;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        separator: {
            type: PropType<string | string[]>;
        };
        state: {
            type: BooleanConstructor;
            default: null;
        };
        size: {
            type: PropType<InputSize>;
        };
        tagClass: {
            type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
        };
        tagPills: {
            type: BooleanConstructor;
            default: boolean;
        };
        tagRemoveLabel: {
            type: StringConstructor;
        };
        tagRemovedLabel: {
            type: StringConstructor;
            default: string;
        };
        tagValidator: {
            type: FunctionConstructor;
            default: () => boolean;
        };
        tagVariant: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        "onTag-state"?: ((...args: any[]) => any) | undefined;
        onFocus?: ((...args: any[]) => any) | undefined;
        onFocusin?: ((...args: any[]) => any) | undefined;
        onFocusout?: ((...args: any[]) => any) | undefined;
    }>>;
    input: import("vue").Ref<HTMLInputElement | null>;
    computedId: import("vue").ComputedRef<string>;
    _inputId: import("vue").ComputedRef<string>;
    emit: (event: "update:modelValue" | "input" | "blur" | "tag-state" | "focus" | "focusin" | "focusout", ...args: any[]) => void;
    tags: import("vue").Ref<string[]>;
    inputValue: import("vue").Ref<string>;
    shouldRemoveOnDelete: import("vue").Ref<boolean>;
    focus: import("vue").Ref<boolean>;
    lastRemovedTag: import("vue").Ref<string>;
    validTags: import("vue").Ref<string[]>;
    invalidTags: import("vue").Ref<string[]>;
    duplicateTags: import("vue").Ref<string[]>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean | InputSize | undefined;
        disabled: boolean;
        focus: boolean;
        'is-invalid': boolean;
        'is-valid': boolean;
    }>;
    isDuplicate: import("vue").ComputedRef<boolean>;
    isInvalid: import("vue").ComputedRef<boolean>;
    isLimitReached: import("vue").ComputedRef<boolean>;
    disableAddButton: import("vue").ComputedRef<boolean>;
    checkAutofocus: () => void;
    onFocusin: (e: FocusEvent) => void;
    onFocus: (e: FocusEvent) => void;
    onBlur: (e: FocusEvent) => void;
    onInput: (e: Event | string) => void;
    onChange: (e: Event) => void;
    onKeydown: (e: KeyboardEvent) => void;
    addTag: (tag?: string | undefined) => void;
    removeTag: (tag: string) => void;
    BFormTag: import("vue").DefineComponent<{
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        id: {
            type: StringConstructor;
        };
        noRemove: {
            type: BooleanConstructor;
            default: boolean;
        };
        pill: {
            type: BooleanConstructor;
            default: boolean;
        };
        removeLabel: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
        };
        variant: {
            type: StringConstructor;
            default: string;
        };
    }, {
        props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            id: {
                type: StringConstructor;
            };
            noRemove: {
                type: BooleanConstructor;
                default: boolean;
            };
            pill: {
                type: BooleanConstructor;
                default: boolean;
            };
            removeLabel: {
                type: StringConstructor;
                default: string;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            title: {
                type: StringConstructor;
            };
            variant: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            onRemove?: ((...args: any[]) => any) | undefined;
        }>>;
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        tagText: import("vue").ComputedRef<string | import("vue").VNodeArrayChildren | {
            [name: string]: unknown;
            $stable?: boolean | undefined;
        } | undefined>;
        computedId: import("vue").ComputedRef<string>;
        taglabelId: import("vue").ComputedRef<string>;
        classes: import("vue").ComputedRef<(string | {
            'text-dark': boolean;
            'rounded-pill': boolean;
            disabled: boolean;
        })[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "remove"[], "remove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        id: {
            type: StringConstructor;
        };
        noRemove: {
            type: BooleanConstructor;
            default: boolean;
        };
        pill: {
            type: BooleanConstructor;
            default: boolean;
        };
        removeLabel: {
            type: StringConstructor;
            default: string;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        title: {
            type: StringConstructor;
        };
        variant: {
            type: StringConstructor;
            default: string;
        };
    }>> & {
        onRemove?: ((...args: any[]) => any) | undefined;
    }, {
        tag: string;
        variant: string;
        disabled: boolean;
        pill: boolean;
        noRemove: boolean;
        removeLabel: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "blur" | "tag-state" | "focus" | "focusin" | "focusout")[], "update:modelValue" | "input" | "blur" | "focus" | "tag-state" | "focusin" | "focusout", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    addButtonText: {
        type: StringConstructor;
        default: string;
    };
    addButtonVariant: {
        type: StringConstructor;
        default: string;
    };
    addOnChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    duplicateTagText: {
        type: StringConstructor;
        default: string;
    };
    inputAttrs: {
        type: ObjectConstructor;
    };
    inputClass: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    };
    inputId: {
        type: StringConstructor;
    };
    inputType: {
        type: PropType<InputType>;
        default: string;
    };
    invalidTagText: {
        type: StringConstructor;
        default: string;
    };
    form: {
        type: StringConstructor;
    };
    limit: {
        type: NumberConstructor;
    };
    limitTagsText: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: PropType<string[]>;
        default: () => never[];
    };
    name: {
        type: StringConstructor;
    };
    noAddOnEnter: {
        type: BooleanConstructor;
        default: boolean;
    };
    noOuterFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    noTagRemove: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    removeOnDelete: {
        type: BooleanConstructor;
        default: boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    separator: {
        type: PropType<string | string[]>;
    };
    state: {
        type: BooleanConstructor;
        default: null;
    };
    size: {
        type: PropType<InputSize>;
    };
    tagClass: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    };
    tagPills: {
        type: BooleanConstructor;
        default: boolean;
    };
    tagRemoveLabel: {
        type: StringConstructor;
    };
    tagRemovedLabel: {
        type: StringConstructor;
        default: string;
    };
    tagValidator: {
        type: FunctionConstructor;
        default: () => boolean;
    };
    tagVariant: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    "onTag-state"?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    onFocusin?: ((...args: any[]) => any) | undefined;
    onFocusout?: ((...args: any[]) => any) | undefined;
}, {
    required: boolean;
    modelValue: string[];
    disabled: boolean;
    state: boolean;
    autofocus: boolean;
    placeholder: string;
    addButtonText: string;
    addButtonVariant: string;
    addOnChange: boolean;
    duplicateTagText: string;
    inputType: InputType;
    invalidTagText: string;
    limitTagsText: string;
    noAddOnEnter: boolean;
    noOuterFocus: boolean;
    noTagRemove: boolean;
    removeOnDelete: boolean;
    tagPills: boolean;
    tagRemovedLabel: string;
    tagValidator: Function;
    tagVariant: string;
}>;
export default _sfc_main;
