import { PropType, Ref } from 'vue';
declare const _sfc_main: import("vue").DefineComponent<{
    ariaLabel: {
        type: StringConstructor;
    };
    ariaLabelledBy: {
        type: StringConstructor;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: (ObjectConstructor | BooleanConstructor | StringConstructor | NumberConstructor | ArrayConstructor)[];
        default: null;
    };
    plain: {
        type: BooleanConstructor;
        default: boolean;
    };
    button: {
        type: BooleanConstructor;
        default: boolean;
    };
    switch: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonVariant: {
        type: StringConstructor;
        default: string;
    };
    form: {
        type: StringConstructor;
    };
    id: {
        type: StringConstructor;
    };
    inline: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
    };
    state: {
        type: PropType<boolean | null | undefined>;
        default: null;
    };
    value: {
        type: (ObjectConstructor | BooleanConstructor | StringConstructor | NumberConstructor)[];
        default: boolean;
    };
}, {
    localValue: any;
    computedId: import("vue").ComputedRef<string>;
    classes: import("vue").ComputedRef<any>;
    inputClasses: import("vue").ComputedRef<any>;
    labelClasses: import("vue").ComputedRef<any>;
    isChecked: import("vue").ComputedRef<unknown>;
    isFocused: Ref<boolean>;
    input: Ref<HTMLElement>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    ariaLabel: {
        type: StringConstructor;
    };
    ariaLabelledBy: {
        type: StringConstructor;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: (ObjectConstructor | BooleanConstructor | StringConstructor | NumberConstructor | ArrayConstructor)[];
        default: null;
    };
    plain: {
        type: BooleanConstructor;
        default: boolean;
    };
    button: {
        type: BooleanConstructor;
        default: boolean;
    };
    switch: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonVariant: {
        type: StringConstructor;
        default: string;
    };
    form: {
        type: StringConstructor;
    };
    id: {
        type: StringConstructor;
    };
    inline: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
    };
    state: {
        type: PropType<boolean | null | undefined>;
        default: null;
    };
    value: {
        type: (ObjectConstructor | BooleanConstructor | StringConstructor | NumberConstructor)[];
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    required: boolean;
    modelValue: string | number | boolean | unknown[] | Record<string, any>;
    button: boolean;
    disabled: boolean;
    state: boolean | null | undefined;
    autofocus: boolean;
    plain: boolean;
    switch: boolean;
    buttonVariant: string;
    inline: boolean;
    value: string | number | boolean | Record<string, any>;
}>;
export default _sfc_main;
