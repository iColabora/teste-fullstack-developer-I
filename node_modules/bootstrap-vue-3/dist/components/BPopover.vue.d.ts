import { ComponentPublicInstance, PropType } from 'vue';
import { ColorVariant } from '../types';
interface DelayObject {
    show: number;
    hide: number;
}
declare const _sfc_main: import("vue").DefineComponent<{
    container: {
        type: PropType<string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>>;
        default: string;
    };
    content: {
        type: StringConstructor;
    };
    id: {
        type: StringConstructor;
    };
    noninteractive: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<"top" | "bottom" | "left" | "right" | "auto" | (() => void)>;
        default: string;
    };
    target: {
        type: PropType<string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
        default: undefined;
    };
    title: {
        type: StringConstructor;
    };
    delay: {
        type: PropType<number | DelayObject>;
        default: number;
    };
    triggers: {
        type: PropType<"click" | "focus" | "hover" | "manual" | "click hover" | "click focus" | "hover focus" | "click hover focus">;
        default: string;
    };
    show: {
        type: BooleanConstructor;
        default: boolean;
    };
    variant: {
        type: PropType<ColorVariant>;
        default: undefined;
    };
    html: {
        type: BooleanConstructor;
        default: boolean;
    };
    sanitize: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    element: import("vue").Ref<HTMLElement | undefined>;
    titleRef: import("vue").Ref<HTMLElement | undefined>;
    contentRef: import("vue").Ref<HTMLElement | undefined>;
    classes: import("vue").ComputedRef<{
        [x: string]: ColorVariant | undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "shown" | "hide" | "hidden" | "inserted")[], "show" | "shown" | "hide" | "hidden" | "inserted", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    container: {
        type: PropType<string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>>;
        default: string;
    };
    content: {
        type: StringConstructor;
    };
    id: {
        type: StringConstructor;
    };
    noninteractive: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<"top" | "bottom" | "left" | "right" | "auto" | (() => void)>;
        default: string;
    };
    target: {
        type: PropType<string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
        default: undefined;
    };
    title: {
        type: StringConstructor;
    };
    delay: {
        type: PropType<number | DelayObject>;
        default: number;
    };
    triggers: {
        type: PropType<"click" | "focus" | "hover" | "manual" | "click hover" | "click focus" | "hover focus" | "click hover focus">;
        default: string;
    };
    show: {
        type: BooleanConstructor;
        default: boolean;
    };
    variant: {
        type: PropType<ColorVariant>;
        default: undefined;
    };
    html: {
        type: BooleanConstructor;
        default: boolean;
    };
    sanitize: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onShow?: ((...args: any[]) => any) | undefined;
    onShown?: ((...args: any[]) => any) | undefined;
    onHide?: ((...args: any[]) => any) | undefined;
    onHidden?: ((...args: any[]) => any) | undefined;
    onInserted?: ((...args: any[]) => any) | undefined;
}, {
    show: boolean;
    variant: ColorVariant;
    target: string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined;
    html: boolean;
    placement: "top" | "bottom" | "left" | "right" | "auto" | (() => void);
    container: string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
    delay: number | DelayObject;
    sanitize: boolean;
    noninteractive: boolean;
    triggers: "click" | "focus" | "hover" | "manual" | "click hover" | "click focus" | "hover focus" | "click hover focus";
}>;
export default _sfc_main;
