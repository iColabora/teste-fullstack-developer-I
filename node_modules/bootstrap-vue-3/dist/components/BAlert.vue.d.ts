import { PropType } from 'vue';
import { ColorVariant } from '../types';
declare const _sfc_main: import("vue").DefineComponent<{
    dismissLabel: {
        type: StringConstructor;
        default: string;
    };
    dismissible: {
        type: BooleanConstructor;
        default: boolean;
    };
    fade: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: (BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    show: {
        type: BooleanConstructor;
        default: boolean;
    };
    variant: {
        type: PropType<ColorVariant>;
        default: string;
    };
}, {
    dismissClicked: () => void;
    isAlertVisible: import("vue").ComputedRef<number | boolean>;
    element: import("vue").Ref<HTMLElement | undefined>;
    classes: import("vue").ComputedRef<{
        [x: string]: number | boolean | ColorVariant;
        show: number | boolean;
        'alert-dismissible': boolean;
        fade: number | boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "dismissed" | "dismiss-count-down")[], "update:modelValue" | "dismissed" | "dismiss-count-down", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dismissLabel: {
        type: StringConstructor;
        default: string;
    };
    dismissible: {
        type: BooleanConstructor;
        default: boolean;
    };
    fade: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: (BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    show: {
        type: BooleanConstructor;
        default: boolean;
    };
    variant: {
        type: PropType<ColorVariant>;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onDismissed?: ((...args: any[]) => any) | undefined;
    "onDismiss-count-down"?: ((...args: any[]) => any) | undefined;
}, {
    show: boolean;
    modelValue: number | boolean;
    dismissLabel: string;
    dismissible: boolean;
    fade: boolean;
    variant: ColorVariant;
}>;
export default _sfc_main;
