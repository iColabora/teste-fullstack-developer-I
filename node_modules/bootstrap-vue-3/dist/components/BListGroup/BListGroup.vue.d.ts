import { InjectionKey, PropType } from 'vue';
import { Breakpoint } from '../../types';
export interface ParentData {
    numbered: boolean;
}
export declare const injectionKey: InjectionKey<ParentData>;
declare const _sfc_main: import("vue").DefineComponent<{
    flush: {
        type: BooleanConstructor;
        default: boolean;
    };
    horizontal: {
        type: PropType<boolean | Breakpoint>;
        default: boolean;
    };
    numbered: {
        type: BooleanConstructor;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
}, {
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
        'list-group-flush': boolean;
        'list-group-horizontal': boolean;
        'list-group-numbered': boolean;
    }>;
    computedTag: import("vue").Ref<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    flush: {
        type: BooleanConstructor;
        default: boolean;
    };
    horizontal: {
        type: PropType<boolean | Breakpoint>;
        default: boolean;
    };
    numbered: {
        type: BooleanConstructor;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    flush: boolean;
    tag: string;
    horizontal: boolean | Breakpoint;
    numbered: boolean;
}>;
export default _sfc_main;
