import { PropType } from 'vue';
import ColorVariant from '../types/ColorVariant';
import InputSize from '../types/InputSize';
declare const _sfc_main: import("vue").DefineComponent<{
    bodyBgVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    bodyClass: {
        type: StringConstructor;
        required: false;
    };
    bodyTextVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    busy: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonSize: {
        type: PropType<InputSize>;
        default: string;
    };
    cancelDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    cancelTitle: {
        type: StringConstructor;
        default: string;
    };
    cancelVariant: {
        type: PropType<ColorVariant>;
        default: string;
    };
    centered: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentClass: {
        type: StringConstructor;
        required: false;
    };
    dialogClass: {
        type: StringConstructor;
        required: false;
    };
    footerBgVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    footerBorderVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    footerClass: {
        type: StringConstructor;
        required: false;
    };
    footerTextVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    fullscreen: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    headerBgVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    headerBorderVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    headerClass: {
        type: StringConstructor;
        required: false;
    };
    headerCloseLabel: {
        type: StringConstructor;
        default: string;
    };
    headerCloseWhite: {
        type: BooleanConstructor;
        default: boolean;
    };
    headerTextVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    hideBackdrop: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideHeaderClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    modalClass: {
        type: StringConstructor;
        required: false;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    noCloseOnBackdrop: {
        type: BooleanConstructor;
        default: boolean;
    };
    noCloseOnEsc: {
        type: BooleanConstructor;
        default: boolean;
    };
    noFade: {
        type: BooleanConstructor;
        default: boolean;
    };
    noFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    okDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    okOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    okTitle: {
        type: StringConstructor;
        default: string;
    };
    okVariant: {
        type: PropType<ColorVariant>;
        default: string;
    };
    scrollable: {
        type: BooleanConstructor;
        default: boolean;
    };
    show: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        required: false;
    };
    title: {
        type: StringConstructor;
        required: false;
    };
    titleClass: {
        type: StringConstructor;
        required: false;
    };
    titleSrOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    titleTag: {
        type: StringConstructor;
        default: string;
    };
}, {
    element: import("vue").Ref<HTMLElement | undefined>;
    disableCancel: import("vue").ComputedRef<boolean>;
    disableOk: import("vue").ComputedRef<boolean>;
    modalClasses: import("vue").ComputedRef<(string | {
        fade: boolean;
        show: boolean;
    } | undefined)[]>;
    modalDialogClasses: import("vue").ComputedRef<(string | {
        [x: string]: string | boolean | undefined;
        'modal-fullscreen': boolean;
        'modal-dialog-centered': boolean;
        'modal-dialog-scrollable': boolean;
    } | undefined)[]>;
    computedBodyClasses: import("vue").ComputedRef<(string | {
        [x: string]: ColorVariant | undefined;
    } | undefined)[]>;
    computedFooterClasses: import("vue").ComputedRef<(string | {
        [x: string]: ColorVariant | undefined;
    } | undefined)[]>;
    computedHeaderClasses: import("vue").ComputedRef<(string | {
        [x: string]: ColorVariant | undefined;
    } | undefined)[]>;
    computedTitleClasses: import("vue").ComputedRef<(string | {
        "visually-hidden": boolean;
    } | undefined)[]>;
    computedCloseButtonClasses: import("vue").ComputedRef<{
        "btn-close-content": boolean;
        "d-flex": boolean;
        "btn-close-white": boolean;
    }[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "show" | "shown" | "hide" | "hidden" | "hide-prevented" | "ok" | "cancel")[], "update:modelValue" | "show" | "shown" | "hide" | "hidden" | "hide-prevented" | "ok" | "cancel", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    bodyBgVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    bodyClass: {
        type: StringConstructor;
        required: false;
    };
    bodyTextVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    busy: {
        type: BooleanConstructor;
        default: boolean;
    };
    buttonSize: {
        type: PropType<InputSize>;
        default: string;
    };
    cancelDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    cancelTitle: {
        type: StringConstructor;
        default: string;
    };
    cancelVariant: {
        type: PropType<ColorVariant>;
        default: string;
    };
    centered: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentClass: {
        type: StringConstructor;
        required: false;
    };
    dialogClass: {
        type: StringConstructor;
        required: false;
    };
    footerBgVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    footerBorderVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    footerClass: {
        type: StringConstructor;
        required: false;
    };
    footerTextVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    fullscreen: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    headerBgVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    headerBorderVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    headerClass: {
        type: StringConstructor;
        required: false;
    };
    headerCloseLabel: {
        type: StringConstructor;
        default: string;
    };
    headerCloseWhite: {
        type: BooleanConstructor;
        default: boolean;
    };
    headerTextVariant: {
        type: PropType<ColorVariant>;
        required: false;
    };
    hideBackdrop: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideHeaderClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    modalClass: {
        type: StringConstructor;
        required: false;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    noCloseOnBackdrop: {
        type: BooleanConstructor;
        default: boolean;
    };
    noCloseOnEsc: {
        type: BooleanConstructor;
        default: boolean;
    };
    noFade: {
        type: BooleanConstructor;
        default: boolean;
    };
    noFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    okDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    okOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    okTitle: {
        type: StringConstructor;
        default: string;
    };
    okVariant: {
        type: PropType<ColorVariant>;
        default: string;
    };
    scrollable: {
        type: BooleanConstructor;
        default: boolean;
    };
    show: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        required: false;
    };
    title: {
        type: StringConstructor;
        required: false;
    };
    titleClass: {
        type: StringConstructor;
        required: false;
    };
    titleSrOnly: {
        type: BooleanConstructor;
        default: boolean;
    };
    titleTag: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onShow?: ((...args: any[]) => any) | undefined;
    onShown?: ((...args: any[]) => any) | undefined;
    onHide?: ((...args: any[]) => any) | undefined;
    onHidden?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
    onOk?: ((...args: any[]) => any) | undefined;
    "onHide-prevented"?: ((...args: any[]) => any) | undefined;
}, {
    show: boolean;
    modelValue: boolean;
    titleTag: string;
    busy: boolean;
    buttonSize: InputSize;
    cancelDisabled: boolean;
    cancelTitle: string;
    cancelVariant: ColorVariant;
    centered: boolean;
    fullscreen: string | boolean;
    headerCloseLabel: string;
    headerCloseWhite: boolean;
    hideBackdrop: boolean;
    hideFooter: boolean;
    hideHeader: boolean;
    hideHeaderClose: boolean;
    noCloseOnBackdrop: boolean;
    noCloseOnEsc: boolean;
    noFade: boolean;
    noFocus: boolean;
    okDisabled: boolean;
    okOnly: boolean;
    okTitle: string;
    okVariant: ColorVariant;
    scrollable: boolean;
    titleSrOnly: boolean;
}>;
export default _sfc_main;
