import { PropType } from 'vue';
import { Size } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    ariaInvalid: {
        type: PropType<boolean | "true" | "false" | "grammar" | "spelling">;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabledField: {
        type: StringConstructor;
        default: string;
    };
    form: {
        type: StringConstructor;
        required: false;
    };
    htmlField: {
        type: StringConstructor;
        default: string;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    labelField: {
        type: StringConstructor;
        default: string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        required: false;
    };
    options: {
        type: (ObjectConstructor | ArrayConstructor)[];
        default: () => never[];
    };
    optionsField: {
        type: StringConstructor;
        default: string;
    };
    plain: {
        type: BooleanConstructor;
        default: boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectSize: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: PropType<Size>;
        required: false;
    };
    state: {
        type: PropType<boolean | null | undefined>;
        default: null;
    };
    textField: {
        type: StringConstructor;
        default: string;
    };
    valueField: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: (ObjectConstructor | StringConstructor | NumberConstructor | ArrayConstructor)[];
        default: string;
    };
}, {
    input: import("vue").Ref<HTMLElement | undefined>;
    computedId: import("vue").ComputedRef<string>;
    computedSelectSize: import("vue").ComputedRef<number | null>;
    computedAriaInvalid: import("vue").ComputedRef<string | null>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean | undefined;
        'form-control': boolean;
        'form-select': boolean;
        'is-valid': boolean;
        'is-invalid': boolean;
    }>;
    formOptions: import("vue").ComputedRef<any>;
    localValue: import("vue").WritableComputedRef<any>;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    ariaInvalid: {
        type: PropType<boolean | "true" | "false" | "grammar" | "spelling">;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabledField: {
        type: StringConstructor;
        default: string;
    };
    form: {
        type: StringConstructor;
        required: false;
    };
    htmlField: {
        type: StringConstructor;
        default: string;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    labelField: {
        type: StringConstructor;
        default: string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        required: false;
    };
    options: {
        type: (ObjectConstructor | ArrayConstructor)[];
        default: () => never[];
    };
    optionsField: {
        type: StringConstructor;
        default: string;
    };
    plain: {
        type: BooleanConstructor;
        default: boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectSize: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: PropType<Size>;
        required: false;
    };
    state: {
        type: PropType<boolean | null | undefined>;
        default: null;
    };
    textField: {
        type: StringConstructor;
        default: string;
    };
    valueField: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: (ObjectConstructor | StringConstructor | NumberConstructor | ArrayConstructor)[];
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    required: boolean;
    modelValue: string | number | unknown[] | Record<string, any>;
    disabled: boolean;
    state: boolean | null | undefined;
    autofocus: boolean;
    plain: boolean;
    ariaInvalid: boolean | "true" | "false" | "grammar" | "spelling";
    disabledField: string;
    htmlField: string;
    options: unknown[] | Record<string, any>;
    textField: string;
    valueField: string;
    labelField: string;
    multiple: boolean;
    optionsField: string;
    selectSize: number;
}>;
export default _sfc_main;
