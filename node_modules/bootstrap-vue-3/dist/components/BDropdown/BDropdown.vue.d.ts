import * as Popper from '@popperjs/core';
import { ComponentPublicInstance, PropType } from 'vue';
import { ButtonVariant, Size } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    autoClose: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    block: {
        type: BooleanConstructor;
        default: boolean;
    };
    boundary: {
        type: PropType<Popper.Boundary>;
        default: string;
    };
    dark: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropup: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropright: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropleft: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: {
        type: StringConstructor;
    };
    menuClass: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    };
    noFlip: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    popperOpts: {
        type: ObjectConstructor;
        default: () => {};
    };
    right: {
        type: BooleanConstructor;
        default: boolean;
    };
    role: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<Size>;
    };
    split: {
        type: BooleanConstructor;
        default: boolean;
    };
    splitButtonType: {
        type: PropType<"button" | "submit" | "reset">;
        default: string;
    };
    splitClass: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    };
    splitHref: {
        type: StringConstructor;
        default: null;
    };
    noCaret: {
        type: BooleanConstructor;
        default: boolean;
    };
    splitVariant: {
        type: PropType<ButtonVariant>;
    };
    text: {
        type: StringConstructor;
    };
    toggleClass: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    };
    toggleText: {
        type: StringConstructor;
        default: string;
    };
    variant: {
        type: PropType<ButtonVariant>;
        default: string;
    };
}, {
    parent: import("vue").Ref<HTMLElement | undefined>;
    computedId: import("vue").ComputedRef<string>;
    classes: import("vue").ComputedRef<{
        'd-grid': boolean;
        'd-flex': boolean;
    }>;
    buttonClasses: import("vue").ComputedRef<{
        'dropdown-toggle': boolean;
        'dropdown-toggle-no-caret': boolean;
        'w-100': boolean;
    }>;
    buttonAttr: import("vue").ComputedRef<{
        'data-bs-toggle': string | null;
        'aria-expanded': boolean | null;
        ref: import("vue").Ref<ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | null;
        href: string | null;
    }>;
    splitAttr: import("vue").ComputedRef<{
        ref: import("vue").Ref<ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | null;
    }>;
    dropdownMenuClasses: import("vue").ComputedRef<{
        'dropdown-menu-dark': boolean;
    }>;
    dropdown: import("vue").Ref<ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
    hide: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "shown" | "hide" | "hidden")[], "show" | "shown" | "hide" | "hidden", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    autoClose: {
        type: (BooleanConstructor | StringConstructor)[];
        default: boolean;
    };
    block: {
        type: BooleanConstructor;
        default: boolean;
    };
    boundary: {
        type: PropType<Popper.Boundary>;
        default: string;
    };
    dark: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropup: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropright: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropleft: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: {
        type: StringConstructor;
    };
    menuClass: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    };
    noFlip: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    popperOpts: {
        type: ObjectConstructor;
        default: () => {};
    };
    right: {
        type: BooleanConstructor;
        default: boolean;
    };
    role: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<Size>;
    };
    split: {
        type: BooleanConstructor;
        default: boolean;
    };
    splitButtonType: {
        type: PropType<"button" | "submit" | "reset">;
        default: string;
    };
    splitClass: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    };
    splitHref: {
        type: StringConstructor;
        default: null;
    };
    noCaret: {
        type: BooleanConstructor;
        default: boolean;
    };
    splitVariant: {
        type: PropType<ButtonVariant>;
    };
    text: {
        type: StringConstructor;
    };
    toggleClass: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    };
    toggleText: {
        type: StringConstructor;
        default: string;
    };
    variant: {
        type: PropType<ButtonVariant>;
        default: string;
    };
}>> & {
    onShow?: ((...args: any[]) => any) | undefined;
    onShown?: ((...args: any[]) => any) | undefined;
    onHide?: ((...args: any[]) => any) | undefined;
    onHidden?: ((...args: any[]) => any) | undefined;
}, {
    split: boolean;
    dark: boolean;
    variant: ButtonVariant;
    disabled: boolean;
    right: boolean;
    offset: string | number;
    autoClose: string | boolean;
    block: boolean;
    boundary: Popper.Boundary;
    dropup: boolean;
    dropright: boolean;
    dropleft: boolean;
    noFlip: boolean;
    popperOpts: Record<string, any>;
    role: string;
    splitButtonType: "button" | "submit" | "reset";
    splitHref: string;
    noCaret: boolean;
    toggleText: string;
}>;
export default _sfc_main;
