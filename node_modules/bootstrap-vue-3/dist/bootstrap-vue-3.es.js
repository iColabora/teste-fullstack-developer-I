var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { computed, defineComponent, provide, openBlock, createElementBlock, normalizeClass, renderSlot, onMounted, onBeforeUnmount, ref, watch, createBlock, resolveDynamicComponent, withCtx, Comment, inject, resolveComponent, resolveDirective, createElementVNode, withDirectives, createTextVNode, toDisplayString, createVNode, createCommentVNode, normalizeStyle, mergeProps, getCurrentInstance, reactive, Fragment, renderList, isReactive, h, withModifiers, vModelCheckbox, nextTick, onActivated, vModelRadio, vModelSelect, useSlots, unref, normalizeProps, guardReactiveProps, Teleport, createSlots, Transition, onUnmounted } from "vue";
import Collapse from "bootstrap/js/dist/collapse";
import Alert from "bootstrap/js/dist/alert";
import Carousel from "bootstrap/js/dist/carousel";
import Dropdown from "bootstrap/js/dist/dropdown";
import Modal from "bootstrap/js/dist/modal";
import Offcanvas from "bootstrap/js/dist/offcanvas";
import Popover from "bootstrap/js/dist/popover";
import Tooltip from "bootstrap/js/dist/tooltip";
function getID(suffix = "") {
  return `__BVID__${Math.random().toString().substr(2, 6)}___BV_${suffix}__`;
}
function useId(id, suffix) {
  return computed(() => id || getID(suffix));
}
var _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const injectionKey$5 = Symbol();
const _sfc_main$1p = defineComponent({
  name: "BAccordion",
  props: {
    flush: { type: Boolean, default: false },
    free: { type: Boolean, default: false },
    id: { type: String, default: void 0 }
  },
  setup(props) {
    const computedId = useId(props.id, "accordion");
    const classes = computed(() => ({
      "accordion-flush": props.flush
    }));
    if (!props.free) {
      provide(injectionKey$5, `${computedId.value}`);
    }
    return {
      computedId,
      classes
    };
  }
});
const _hoisted_1$G = ["id"];
function _sfc_render$15(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    id: _ctx.computedId,
    class: normalizeClass(["accordion", _ctx.classes])
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 10, _hoisted_1$G);
}
var BAccordion = /* @__PURE__ */ _export_sfc(_sfc_main$1p, [["render", _sfc_render$15]]);
function useEventListener(element, event, callback) {
  onMounted(() => {
    var _a;
    (_a = element == null ? void 0 : element.value) == null ? void 0 : _a.addEventListener(event, callback);
  });
  onBeforeUnmount(() => {
    var _a;
    (_a = element == null ? void 0 : element.value) == null ? void 0 : _a.removeEventListener(event, callback);
  });
}
const _sfc_main$1o = defineComponent({
  name: "BCollapse",
  props: {
    accordion: { type: String, required: false },
    id: { type: String, default: getID() },
    modelValue: { type: Boolean, default: false },
    tag: { type: String, default: "div" },
    toggle: { type: Boolean, default: false },
    visible: { type: Boolean, default: false }
  },
  emits: ["update:modelValue", "show", "shown", "hide", "hidden"],
  setup(props, { emit }) {
    const element = ref();
    const instance = ref();
    const classes = computed(() => ({
      show: props.modelValue
    }));
    const close = () => emit("update:modelValue", false);
    useEventListener(element, "show.bs.collapse", () => {
      emit("show");
      emit("update:modelValue", true);
    });
    useEventListener(element, "hide.bs.collapse", () => {
      emit("hide");
      emit("update:modelValue", false);
    });
    useEventListener(element, "shown.bs.collapse", () => emit("shown"));
    useEventListener(element, "hidden.bs.collapse", () => emit("hidden"));
    onMounted(() => {
      var _a;
      instance.value = new Collapse(element.value, {
        parent: props.accordion ? `#${props.accordion}` : void 0,
        toggle: props.toggle
      });
      if (props.visible || props.modelValue) {
        emit("update:modelValue", true);
        (_a = instance.value) == null ? void 0 : _a.show();
      }
    });
    watch(() => props.modelValue, (value) => {
      var _a, _b;
      if (value) {
        (_a = instance.value) == null ? void 0 : _a.show();
      } else {
        (_b = instance.value) == null ? void 0 : _b.hide();
      }
    });
    watch(() => props.visible, (value) => {
      var _a, _b;
      if (value) {
        emit("update:modelValue", !!value);
        (_a = instance.value) == null ? void 0 : _a.show();
      } else {
        emit("update:modelValue", !!value);
        (_b = instance.value) == null ? void 0 : _b.hide();
      }
    });
    return {
      element,
      classes,
      close
    };
  }
});
function _sfc_render$14(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    id: _ctx.id,
    ref: "element",
    class: normalizeClass(["collapse", _ctx.classes]),
    "data-bs-parent": _ctx.accordion || null
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default", {
        visible: _ctx.modelValue,
        close: _ctx.close
      })
    ]),
    _: 3
  }, 8, ["id", "class", "data-bs-parent"]);
}
var BCollapse = /* @__PURE__ */ _export_sfc(_sfc_main$1o, [["render", _sfc_render$14]]);
const RX_UNDERSCORE = /_/g;
const RX_LOWER_UPPER = /([a-z])([A-Z])/g;
const RX_FIRST_START_SPACE_WORD = /(\s|^)(\w)/;
const RX_SPACE_SPLIT = /\s+/;
const RX_HASH = /^#/;
const RX_HASH_ID = /^#[A-Za-z]+[\w\-:.]*$/;
const arrayIncludes = (array, value) => array.indexOf(value) !== -1;
const from = (...args) => Array.from([...args]);
const concat = (...args) => Array.prototype.concat.apply([], args);
const HAS_WINDOW_SUPPORT = typeof window !== "undefined";
const HAS_DOCUMENT_SUPPORT = typeof document !== "undefined";
const HAS_NAVIGATOR_SUPPORT = typeof navigator !== "undefined";
const IS_BROWSER = HAS_WINDOW_SUPPORT && HAS_DOCUMENT_SUPPORT && HAS_NAVIGATOR_SUPPORT;
const DOCUMENT = HAS_DOCUMENT_SUPPORT ? document : {};
const Element = HAS_WINDOW_SUPPORT ? window.Element : class Element2 extends Object {
};
const HTMLElement$1 = HAS_WINDOW_SUPPORT ? window.HTMLElement : class HTMLElement2 extends Element {
};
const RX_NUMBER = /^[0-9]*\.?[0-9]+$/;
const isBoolean = (value) => toType(value) === "boolean";
const isObject = (obj) => obj !== null && typeof obj === "object";
const isString = (value) => typeof value === "string";
const isUndefined = (value) => value === void 0;
const isNull = (value) => value === null;
const isUndefinedOrNull = (value) => isUndefined(value) || isNull(value);
const isNumeric = (value) => RX_NUMBER.test(String(value));
const isNumber = (value) => typeof value === "number";
const toType = (value) => typeof value;
const isFunction = (value) => toType(value) === "function";
const isPlainObject = (obj) => Object.prototype.toString.call(obj) === "[object Object]";
const isArray = (value) => Array.isArray(value);
const toString = (val, spaces = 2) => isUndefinedOrNull(val) ? "" : isArray(val) || isPlainObject(val) && val.toString === Object.prototype.toString ? JSON.stringify(val, null, spaces) : String(val);
const startCase = (str) => str.replace(RX_UNDERSCORE, " ").replace(RX_LOWER_UPPER, (str2, $1, $2) => `${$1} ${$2}`).replace(RX_FIRST_START_SPACE_WORD, (str2, $1, $2) => $1 + $2.toUpperCase());
const upperFirst = (str) => {
  str = isString(str) ? str.trim() : String(str);
  return str.charAt(0).toUpperCase() + str.slice(1);
};
const isElement = (el) => !!(el && el.nodeType === Node.ELEMENT_NODE);
const getBCR = (el) => isElement(el) ? el.getBoundingClientRect() : null;
const getActiveElement = (excludes = []) => {
  const { activeElement } = document;
  return activeElement && !excludes.some((el) => el === activeElement) ? activeElement : null;
};
const isActiveElement = (el) => isElement(el) && el === getActiveElement();
const attemptFocus = (el, options = {}) => {
  try {
    el.focus(options);
  } catch (e) {
    console.error(e);
  }
  return isActiveElement(el);
};
const getStyle = (el, prop) => prop && isElement(el) ? el.getAttribute(prop) || null : null;
const isVisible = (el) => {
  if (getStyle(el, "display") === "none") {
    return false;
  }
  const bcr = getBCR(el);
  return !!(bcr && bcr.height > 0 && bcr.width > 0);
};
const isEmptySlot = (slot, data) => !slot || slot(data).filter((vnode) => vnode.type !== Comment).length < 1;
const select = (selector, root) => (isElement(root) ? root : DOCUMENT).querySelector(selector) || null;
const selectAll = (selector, root) => from((isElement(root) ? root : DOCUMENT).querySelectorAll(selector));
const getAttr = (el, attr) => attr && isElement(el) ? el.getAttribute(attr) : null;
const setAttr = (el, attr, value) => {
  if (attr && isElement(el)) {
    el.setAttribute(attr, value);
  }
};
const removeAttr = (el, attr) => {
  if (attr && isElement(el)) {
    el.removeAttribute(attr);
  }
};
const isTag = (tag, name) => toString(tag).toLowerCase() === toString(name).toLowerCase();
const requestAF = HAS_WINDOW_SUPPORT ? window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || ((cb) => setTimeout(cb, 16)) : (cb) => setTimeout(cb, 0);
function resolveToggleType(el) {
  if (el.classList.contains("offcanvas")) {
    return "offcanvas";
  }
  if (el.classList.contains("collapse")) {
    return "collapse";
  }
  throw Error("Couldn't resolve toggle type");
}
const getTargets = (binding, el) => {
  const { modifiers, arg, value } = binding;
  const targets = Object.keys(modifiers || {});
  const localValue = isString(value) ? value.split(RX_SPACE_SPLIT) : value;
  if (isTag(el.tagName, "a")) {
    const href = getAttr(el, "href") || "";
    if (RX_HASH_ID.test(href)) {
      targets.push(href.replace(RX_HASH, ""));
    }
  }
  concat(arg, localValue).forEach((t) => isString(t) && targets.push(t));
  return targets.filter((t, index, arr) => t && arr.indexOf(t) === index);
};
const BToggle = {
  mounted(el, binding) {
    const targetIds = getTargets(binding, el);
    const targetAttrs = [];
    let targetAttr = "data-bs-target";
    if (el.tagName === "a") {
      targetAttr = "href";
    }
    for (let index = 0; index < targetIds.length; index++) {
      const targetId = targetIds[index];
      const target = document.getElementById(targetId);
      if (target) {
        el.setAttribute("data-bs-toggle", resolveToggleType(target));
        targetAttrs.push(`#${targetId}`);
      }
    }
    if (targetAttrs.length > 0) {
      el.setAttribute(targetAttr, targetAttrs.join(","));
    }
  }
};
const _sfc_main$1n = defineComponent({
  name: "BAccordionItem",
  components: {
    BCollapse
  },
  directives: {
    BToggle
  },
  props: {
    title: { type: String },
    id: { type: String },
    visible: { type: Boolean, default: false }
  },
  setup(props) {
    const computedId = useId(props.id, "accordion_item");
    const parent = inject(injectionKey$5, "");
    return {
      parent,
      computedId
    };
  }
});
const _hoisted_1$F = { class: "accordion-item" };
const _hoisted_2$l = ["id"];
const _hoisted_3$9 = ["aria-expanded", "aria-controls"];
const _hoisted_4$5 = { class: "accordion-body" };
function _sfc_render$13(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_collapse = resolveComponent("b-collapse");
  const _directive_b_toggle = resolveDirective("b-toggle");
  return openBlock(), createElementBlock("div", _hoisted_1$F, [
    createElementVNode("h2", {
      id: `${_ctx.computedId}heading`,
      class: "accordion-header"
    }, [
      withDirectives((openBlock(), createElementBlock("button", {
        class: normalizeClass(["accordion-button", { collapsed: !_ctx.visible }]),
        type: "button",
        "aria-expanded": _ctx.visible ? "true" : "false",
        "aria-controls": _ctx.computedId
      }, [
        renderSlot(_ctx.$slots, "title", {}, () => [
          createTextVNode(toDisplayString(_ctx.title), 1)
        ])
      ], 10, _hoisted_3$9)), [
        [_directive_b_toggle, void 0, _ctx.computedId]
      ])
    ], 8, _hoisted_2$l),
    createVNode(_component_b_collapse, {
      id: _ctx.computedId,
      class: "accordion-collapse",
      visible: _ctx.visible,
      accordion: _ctx.parent,
      "aria-labelledby": `heading${_ctx.computedId}`
    }, {
      default: withCtx(() => [
        createElementVNode("div", _hoisted_4$5, [
          renderSlot(_ctx.$slots, "default")
        ])
      ]),
      _: 3
    }, 8, ["id", "visible", "accordion", "aria-labelledby"])
  ]);
}
var BAccordionItem = /* @__PURE__ */ _export_sfc(_sfc_main$1n, [["render", _sfc_render$13]]);
const toInteger = (value, defaultValue = NaN) => {
  return Number.isInteger(value) ? value : defaultValue;
};
const stringToInteger = (value, defaultValue = NaN) => {
  const integer = parseInt(value, 10);
  return isNaN(integer) ? defaultValue : integer;
};
const toFloat = (value, defaultValue = NaN) => {
  const float = parseFloat(value.toString());
  return isNaN(float) ? defaultValue : float;
};
const _sfc_main$1m = defineComponent({
  name: "BAlert",
  props: {
    dismissLabel: { type: String, default: "Close" },
    dismissible: { type: Boolean, default: false },
    fade: { type: Boolean, default: false },
    modelValue: { type: [Boolean, Number], default: false },
    show: { type: Boolean, default: false },
    variant: { type: String, default: "info" }
  },
  emits: ["dismissed", "dismiss-count-down", "update:modelValue"],
  setup(props, { emit }) {
    const element = ref();
    const instance = ref();
    const classes = computed(() => ({
      [`alert-${props.variant}`]: props.variant,
      "show": props.modelValue,
      "alert-dismissible": props.dismissible,
      "fade": props.modelValue
    }));
    let _countDownTimeout = 0;
    const parseCountDown = (value) => {
      if (typeof value === "boolean") {
        return 0;
      }
      const numberValue = toInteger(value, 0);
      return numberValue > 0 ? numberValue : 0;
    };
    const clearCountDownInterval = () => {
      if (_countDownTimeout === void 0)
        return;
      clearTimeout(_countDownTimeout);
      _countDownTimeout = void 0;
    };
    const countDown = ref(parseCountDown(props.modelValue));
    const isAlertVisible = computed(() => props.modelValue || props.show);
    onBeforeUnmount(() => {
      var _a;
      clearCountDownInterval();
      (_a = instance.value) == null ? void 0 : _a.dispose();
      instance.value = void 0;
    });
    const parsedModelValue = computed(() => {
      if (props.modelValue === true) {
        return true;
      }
      if (props.modelValue === false)
        return false;
      if (toInteger(props.modelValue, 0) < 1) {
        return false;
      }
      return !!props.modelValue;
    });
    const handleShowAndModelChanged = () => {
      countDown.value = parseCountDown(props.modelValue);
      if ((parsedModelValue.value || props.show) && !instance.value)
        instance.value = new Alert(element.value);
    };
    const dismissClicked = () => {
      if (typeof props.modelValue === "boolean") {
        emit("update:modelValue", false);
      } else {
        emit("update:modelValue", 0);
      }
      emit("dismissed");
    };
    watch(() => props.modelValue, handleShowAndModelChanged);
    watch(() => props.show, handleShowAndModelChanged);
    watch(countDown, (newValue) => {
      clearCountDownInterval();
      if (typeof props.modelValue === "boolean")
        return;
      emit("dismiss-count-down", newValue);
      if (newValue === 0 && props.modelValue > 0)
        emit("dismissed");
      if (props.modelValue !== newValue)
        emit("update:modelValue", newValue);
      if (newValue > 0) {
        _countDownTimeout = setTimeout(() => {
          countDown.value--;
        }, 1e3);
      }
    });
    return {
      dismissClicked,
      isAlertVisible,
      element,
      classes
    };
  }
});
const _hoisted_1$E = ["aria-label"];
function _sfc_render$12(_ctx, _cache, $props, $setup, $data, $options) {
  return _ctx.isAlertVisible ? (openBlock(), createElementBlock("div", {
    key: 0,
    ref: "element",
    class: normalizeClass(["alert", _ctx.classes]),
    role: "alert"
  }, [
    renderSlot(_ctx.$slots, "default"),
    _ctx.dismissible ? (openBlock(), createElementBlock("button", {
      key: 0,
      type: "button",
      class: "btn-close",
      "data-bs-dismiss": "alert",
      "aria-label": _ctx.dismissLabel,
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.dismissClicked && _ctx.dismissClicked(...args))
    }, null, 8, _hoisted_1$E)) : createCommentVNode("", true)
  ], 2)) : createCommentVNode("", true);
}
var BAlert = /* @__PURE__ */ _export_sfc(_sfc_main$1m, [["render", _sfc_render$12]]);
const mathMin = Math.min;
const mathMax = Math.max;
const injectionKey$4 = Symbol();
const _sfc_main$1l = defineComponent({
  name: "BAvatarGroup",
  props: {
    overlap: { type: [Number, String], default: 0.3 },
    rounded: { type: [Boolean, String], default: false },
    size: { type: String, required: false },
    square: { type: Boolean, default: false },
    tag: { type: String, default: "div" },
    variant: { type: String, required: false }
  },
  setup(props) {
    const computedSize = computed(() => computeSize(props.size));
    const computeOverlap = (value) => isString(value) && isNumeric(value) ? toFloat(value, 0) : value || 0;
    const overlapScale = computed(() => mathMin(mathMax(computeOverlap(props.overlap), 0), 1) / 2);
    const paddingStyle = computed(() => {
      let { value } = computedSize;
      value = value ? `calc(${value} * ${overlapScale.value})` : null;
      return value ? { paddingLeft: value, paddingRight: value } : {};
    });
    provide(injectionKey$4, {
      overlapScale,
      size: props.size,
      square: props.square,
      rounded: props.rounded,
      variant: props.variant
    });
    return {
      paddingStyle
    };
  }
});
function _sfc_render$11(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    class: "b-avatar-group",
    role: "group"
  }, {
    default: withCtx(() => [
      createElementVNode("div", {
        class: "b-avatar-group-inner",
        style: normalizeStyle(_ctx.paddingStyle)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 4)
    ]),
    _: 3
  });
}
var BAvatarGroup = /* @__PURE__ */ _export_sfc(_sfc_main$1l, [["render", _sfc_render$11]]);
const computeSize = (value) => {
  const calcValue = isString(value) && isNumeric(value) ? toFloat(value, 0) : value;
  return isNumber(calcValue) ? `${calcValue}px` : calcValue || null;
};
const _sfc_main$1k = defineComponent({
  name: "BAvatar",
  props: {
    alt: { type: String, default: "avatar" },
    ariaLabel: { type: String, required: false },
    badge: { type: [Boolean, String], default: false },
    badgeLeft: { type: Boolean, default: false },
    badgeOffset: { type: String, required: false },
    badgeTop: { type: Boolean, default: false },
    badgeVariant: { type: String, default: "primary" },
    button: { type: Boolean, default: false },
    buttonType: { type: String, default: "button" },
    disabled: { type: Boolean, default: false },
    icon: { type: String, required: false },
    rounded: { type: [Boolean, String], default: "circle" },
    size: { type: [String, Number], required: false },
    square: { type: Boolean, default: false },
    src: { type: String, required: false },
    text: { type: String, required: false },
    textVariant: { type: String, default: void 0 },
    variant: { type: String, default: "secondary" }
  },
  emits: ["click", "img-error"],
  setup(props, { emit, slots }) {
    const SIZES = ["sm", null, "lg"];
    const FONT_SIZE_SCALE = 0.4;
    const BADGE_FONT_SIZE_SCALE = FONT_SIZE_SCALE * 0.7;
    const parentData = inject(injectionKey$4, null);
    const computeContrastVariant = (colorVariant) => {
      const variant = colorVariant;
      if (variant === "light")
        return "dark";
      if (variant === "warning")
        return "dark";
      return "light";
    };
    const hasDefaultSlot = computed(() => !isEmptySlot(slots.default));
    const hasBadgeSlot = computed(() => !isEmptySlot(slots.badge));
    const showBadge = computed(() => props.badge || props.badge === "" || hasBadgeSlot.value);
    const computedSize = computed(() => (parentData == null ? void 0 : parentData.size) ? parentData.size : computeSize(props.size));
    const computedVariant = computed(() => (parentData == null ? void 0 : parentData.variant) ? parentData.variant : props.variant);
    const computedRounded = computed(() => (parentData == null ? void 0 : parentData.rounded) ? parentData.rounded : props.rounded);
    const attrs = computed(() => ({
      "aria-label": props.ariaLabel || null,
      "disabled": props.disabled || null
    }));
    const badgeClasses = computed(() => ({
      [`bg-${props.badgeVariant}`]: props.badgeVariant
    }));
    const badgeText = computed(() => props.badge === true ? "" : props.badge);
    const badgeTextClasses = computed(() => {
      const textVariant = computeContrastVariant(props.badgeVariant);
      return `text-${textVariant}`;
    });
    const classes = computed(() => ({
      [`b-avatar-${props.size}`]: props.size && SIZES.indexOf(computeSize(props.size)) !== -1,
      [`bg-${computedVariant.value}`]: computedVariant.value,
      [`badge`]: !props.button && computedVariant.value && hasDefaultSlot.value,
      rounded: computedRounded.value === "" || computedRounded.value === true,
      [`rounded-circle`]: !props.square && computedRounded.value === "circle",
      [`rounded-0`]: props.square || computedRounded.value === "0",
      [`rounded-1`]: !props.square && computedRounded.value === "sm",
      [`rounded-3`]: !props.square && computedRounded.value === "lg",
      [`rounded-top`]: !props.square && computedRounded.value === "top",
      [`rounded-bottom`]: !props.square && computedRounded.value === "bottom",
      [`rounded-start`]: !props.square && computedRounded.value === "left",
      [`rounded-end`]: !props.square && computedRounded.value === "right",
      btn: props.button,
      [`btn-${computedVariant.value}`]: props.button ? computedVariant.value : null
    }));
    const textClasses = computed(() => {
      const textVariant = props.textVariant || computeContrastVariant(computedVariant.value);
      return `text-${textVariant}`;
    });
    const iconName = computed(() => {
      if (props.icon)
        return props.icon;
      if (!props.text && !props.src)
        return "person-fill";
      return void 0;
    });
    const badgeStyle = computed(() => {
      const offset = props.badgeOffset || "0px";
      const fontSize = SIZES.indexOf(computedSize.value || null) === -1 ? `calc(${computedSize.value} * ${BADGE_FONT_SIZE_SCALE})` : "";
      return {
        fontSize: fontSize || "",
        top: props.badgeTop ? offset : "",
        bottom: props.badgeTop ? "" : offset,
        left: props.badgeLeft ? offset : "",
        right: props.badgeLeft ? "" : offset
      };
    });
    const fontStyle = computed(() => {
      const fontSize = SIZES.indexOf(computedSize.value || null) === -1 ? `calc(${computedSize.value} * ${FONT_SIZE_SCALE})` : null;
      return fontSize ? { fontSize } : {};
    });
    const marginStyle = computed(() => {
      var _a;
      const overlapScale = ((_a = parentData == null ? void 0 : parentData.overlapScale) == null ? void 0 : _a.value) || 0;
      const value = computedSize.value && overlapScale ? `calc(${computedSize.value} * -${overlapScale})` : null;
      return value ? { marginLeft: value, marginRight: value } : {};
    });
    const tag = computed(() => props.button ? props.buttonType : "span");
    const tagStyle = computed(() => __spreadProps(__spreadValues({}, marginStyle.value), {
      width: computedSize.value,
      height: computedSize.value
    }));
    const clicked = function(e) {
      if (!props.disabled && props.button)
        emit("click", e);
    };
    const onImgError = (e) => emit("img-error", e);
    return {
      attrs,
      badgeClasses,
      badgeStyle,
      badgeText,
      badgeTextClasses,
      classes,
      clicked,
      fontStyle,
      hasBadgeSlot,
      hasDefaultSlot,
      iconName,
      onImgError,
      showBadge,
      tag,
      tagStyle,
      textClasses
    };
  }
});
const _hoisted_1$D = {
  key: 0,
  class: "b-avatar-custom"
};
const _hoisted_2$k = {
  key: 1,
  class: "b-avatar-img"
};
const _hoisted_3$8 = ["src", "alt"];
function _sfc_render$10(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({
    class: ["b-avatar", _ctx.classes],
    style: _ctx.tagStyle
  }, _ctx.attrs, { onClick: _ctx.clicked }), {
    default: withCtx(() => [
      _ctx.hasDefaultSlot ? (openBlock(), createElementBlock("span", _hoisted_1$D, [
        renderSlot(_ctx.$slots, "default")
      ])) : _ctx.src ? (openBlock(), createElementBlock("span", _hoisted_2$k, [
        createElementVNode("img", {
          src: _ctx.src,
          alt: _ctx.alt,
          onError: _cache[0] || (_cache[0] = (...args) => _ctx.onImgError && _ctx.onImgError(...args))
        }, null, 40, _hoisted_3$8)
      ])) : _ctx.text ? (openBlock(), createElementBlock("span", {
        key: 2,
        class: normalizeClass(["b-avatar-text", _ctx.textClasses]),
        style: normalizeStyle(_ctx.fontStyle)
      }, toDisplayString(_ctx.text), 7)) : createCommentVNode("", true),
      _ctx.showBadge ? (openBlock(), createElementBlock("span", {
        key: 3,
        class: normalizeClass(["b-avatar-badge", _ctx.badgeClasses]),
        style: normalizeStyle(_ctx.badgeStyle)
      }, [
        _ctx.hasBadgeSlot ? renderSlot(_ctx.$slots, "badge", { key: 0 }) : (openBlock(), createElementBlock("span", {
          key: 1,
          class: normalizeClass(_ctx.badgeTextClasses)
        }, toDisplayString(_ctx.badgeText), 3))
      ], 6)) : createCommentVNode("", true)
    ]),
    _: 3
  }, 16, ["class", "style", "onClick"]);
}
var BAvatar = /* @__PURE__ */ _export_sfc(_sfc_main$1k, [["render", _sfc_render$10]]);
const assign = (target, ...args) => Object.assign(target, ...args);
const defineProperties = (obj, props) => Object.defineProperties(obj, props);
const defineProperty = (obj, prop, descriptor) => Object.defineProperty(obj, prop, descriptor);
const omit = (obj, props) => Object.keys(obj).filter((key) => props.indexOf(key) === -1).reduce((result, key) => __spreadProps(__spreadValues({}, result), { [key]: obj[key] }), {});
const readonlyDescriptor = () => ({ enumerable: true, configurable: false, writable: false });
const BLINK_PROPS = {
  active: { type: Boolean, default: false },
  activeClass: { type: String, default: "router-link-active" },
  append: { type: Boolean, default: false },
  disabled: { type: Boolean, default: false },
  event: { type: [String, Array], default: "click" },
  exact: { type: Boolean, default: false },
  exactActiveClass: { type: String, default: "router-link-exact-active" },
  href: { type: String },
  rel: { type: String, default: null },
  replace: { type: Boolean, default: false },
  routerComponentName: { type: String, default: "router-link" },
  routerTag: { type: String, default: "a" },
  target: { type: String, default: "_self" },
  to: { type: [String, Object], default: null }
};
const _sfc_main$1j = defineComponent({
  name: "BLink",
  props: BLINK_PROPS,
  emits: ["click"],
  setup(props, { emit, attrs }) {
    const instance = getCurrentInstance();
    const link = ref(null);
    const tag = computed(() => {
      const routerName = props.routerComponentName.split("-").map((e) => e.charAt(0).toUpperCase() + e.slice(1)).join("");
      const hasRouter = (instance == null ? void 0 : instance.appContext.app.component(routerName)) !== void 0;
      if (!hasRouter || props.disabled || !props.to) {
        return "a";
      }
      return props.routerComponentName;
    });
    const computedHref = computed(() => {
      const toFallback = "#";
      if (props.href)
        return props.href;
      if (typeof props.to === "string")
        return props.to || toFallback;
      const to = props.to;
      if (Object.prototype.toString.call(to) === "[object Object]" && (to.path || to.query || to.hash)) {
        const path = to.path || "";
        const query = to.query ? `?${Object.keys(to.query).map((e) => `${e}=${to.query[e]}`).join("=")}` : "";
        const hash = !to.hash || to.hash.charAt(0) === "#" ? to.hash || "" : `#${to.hash}`;
        return `${path}${query}${hash}` || toFallback;
      }
      return toFallback;
    });
    const clicked = function(e) {
      if (props.disabled) {
        e.preventDefault();
        e.stopImmediatePropagation();
        return;
      }
      emit("click", e);
    };
    const routerAttr = computed(() => ({
      "to": props.to,
      "href": computedHref.value,
      "target": props.target,
      "rel": props.target === "_blank" && props.rel === null ? "noopener" : props.rel || null,
      "tabindex": props.disabled ? "-1" : typeof attrs.tabindex === "undefined" ? null : attrs.tabindex,
      "aria-disabled": props.disabled ? "true" : null
    }));
    return {
      tag,
      routerAttr,
      link,
      clicked
    };
  }
});
function _sfc_render$$(_ctx, _cache, $props, $setup, $data, $options) {
  return _ctx.tag === "router-link" ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({ key: 0 }, _ctx.routerAttr, { custom: "" }), {
    default: withCtx(({ href, navigate, isActive, isExactActive }) => [
      (openBlock(), createBlock(resolveDynamicComponent(_ctx.routerTag), mergeProps({
        ref: "link",
        href,
        class: [isActive && _ctx.activeClass, isExactActive && _ctx.exactActiveClass]
      }, _ctx.$attrs, { onClick: navigate }), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 2
      }, 1040, ["href", "class", "onClick"]))
    ]),
    _: 3
  }, 16)) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({
    key: 1,
    ref: "link",
    class: { active: _ctx.active, disabled: _ctx.disabled }
  }, _ctx.routerAttr, { onClick: _ctx.clicked }), {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16, ["class", "onClick"]));
}
var BLink = /* @__PURE__ */ _export_sfc(_sfc_main$1j, [["render", _sfc_render$$]]);
const isLink = (props) => !!(props.href || props.to);
const suffixPropName = (suffix, value) => value + (suffix ? upperFirst(suffix) : "");
const pluckProps = (keysToPluck, objToPluck, transformFn = (x) => x) => (isArray(keysToPluck) ? keysToPluck.slice() : Object.keys(keysToPluck)).reduce((memo, prop) => {
  memo[transformFn(prop)] = objToPluck[prop];
  return memo;
}, {});
const linkProps = omit(BLINK_PROPS, ["event", "routerTag"]);
const _sfc_main$1i = defineComponent({
  name: "BBadge",
  props: __spreadValues({
    pill: { type: Boolean, default: false },
    tag: { type: String, default: "span" },
    variant: { type: String, default: "secondary" },
    textIndicator: { type: Boolean, default: false },
    dotIndicator: { type: Boolean, default: false }
  }, linkProps),
  setup(props) {
    const link = computed(() => isLink(props));
    const computedTag = computed(() => link.value ? "b-link" : props.tag);
    const classes = computed(() => ({
      [`bg-${props.variant}`]: props.variant,
      "active": props.active,
      "disabled": props.disabled,
      "text-dark": ["warning", "info", "light"].includes(props.variant),
      "rounded-pill": props.pill,
      "position-absolute top-0 start-100 translate-middle": props.textIndicator || props.dotIndicator,
      "p-2 border border-light rounded-circle": props.dotIndicator,
      "text-decoration-none": link
    }));
    return {
      classes,
      props: link.value ? pluckProps(linkProps, props) : {},
      computedTag
    };
  }
});
function _sfc_render$_(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.computedTag), mergeProps({
    class: ["badge", _ctx.classes]
  }, _ctx.props), {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16, ["class"]);
}
var BBadge = /* @__PURE__ */ _export_sfc(_sfc_main$1i, [["render", _sfc_render$_]]);
const BREADCRUMB_SYMBOL = Symbol();
const BREADCRUMB_OBJECT = {
  items: reactive([]),
  reset() {
    this.items = reactive([]);
  }
};
function createBreadcrumb(app) {
  app.provide(BREADCRUMB_SYMBOL, BREADCRUMB_OBJECT);
}
function useBreadcrumb() {
  const context = inject(BREADCRUMB_SYMBOL);
  if (!context) {
    return BREADCRUMB_OBJECT;
  }
  return context;
}
const _sfc_main$1h = defineComponent({
  name: "BBreadcrumbItem",
  props: __spreadProps(__spreadValues({}, omit(BLINK_PROPS, ["event", "routerTag"])), {
    active: { type: Boolean, default: false },
    ariaCurrent: { type: String, default: "location" },
    disabled: { type: Boolean, default: false },
    text: { type: String, required: false }
  }),
  emits: ["click"],
  setup(props, { emit }) {
    const liClasses = computed(() => ({
      active: props.active
    }));
    const computedTag = computed(() => props.active ? "span" : "b-link");
    const computedAriaCurrent = computed(() => ({
      "aria-current": props.active ? props.ariaCurrent : void 0
    }));
    const clicked = function(e) {
      if (props.disabled || props.active) {
        e.preventDefault();
        e.stopImmediatePropagation();
        return;
      }
      if (!props.disabled)
        emit("click", e);
    };
    return {
      liClasses,
      computedTag,
      computedAriaCurrent,
      clicked
    };
  }
});
function _sfc_render$Z(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("li", {
    class: normalizeClass(["breadcrumb-item", _ctx.liClasses])
  }, [
    (openBlock(), createBlock(resolveDynamicComponent(_ctx.computedTag), mergeProps({ "aria-current": _ctx.computedAriaCurrent }, _ctx.$props, { onClick: _ctx.clicked }), {
      default: withCtx(() => [
        renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
    }, 16, ["aria-current", "onClick"]))
  ], 2);
}
var BBreadcrumbItem = /* @__PURE__ */ _export_sfc(_sfc_main$1h, [["render", _sfc_render$Z]]);
const _sfc_main$1g = defineComponent({
  name: "BBreadcrumb",
  components: {
    BBreadcrumbItem
  },
  props: {
    items: { type: Array }
  },
  setup(props) {
    const breadcrumb = useBreadcrumb();
    const computedItems = computed(() => {
      const localItems = props.items || (breadcrumb == null ? void 0 : breadcrumb.items) || [];
      let activeDefined = false;
      const items = localItems.map((item, idx) => {
        if (typeof item === "string") {
          item = { text: item };
          if (idx < localItems.length - 1)
            item.href = "#";
        }
        if (item.active)
          activeDefined = true;
        if (!item.active && !activeDefined) {
          item.active = idx + 1 === localItems.length;
        }
        return item;
      });
      return items;
    });
    return {
      computedItems
    };
  }
});
const _hoisted_1$C = { "aria-label": "breadcrumb" };
const _hoisted_2$j = { class: "breadcrumb" };
function _sfc_render$Y(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_breadcrumb_item = resolveComponent("b-breadcrumb-item");
  return openBlock(), createElementBlock("nav", _hoisted_1$C, [
    createElementVNode("ol", _hoisted_2$j, [
      renderSlot(_ctx.$slots, "prepend"),
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.computedItems, (item, i) => {
        return openBlock(), createBlock(_component_b_breadcrumb_item, mergeProps({ key: i }, item), {
          default: withCtx(() => [
            createTextVNode(toDisplayString(item.text), 1)
          ]),
          _: 2
        }, 1040);
      }), 128)),
      renderSlot(_ctx.$slots, "default"),
      renderSlot(_ctx.$slots, "append")
    ])
  ]);
}
var BBreadcrumb = /* @__PURE__ */ _export_sfc(_sfc_main$1g, [["render", _sfc_render$Y]]);
const _sfc_main$1f = defineComponent({
  name: "BButton",
  props: __spreadProps(__spreadValues({}, BLINK_PROPS), {
    active: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    href: { type: String, required: false },
    pill: { type: Boolean, default: false },
    pressed: { type: Boolean, default: null },
    rel: { type: String, default: null },
    size: { type: String },
    squared: { type: Boolean, default: false },
    tag: { type: String, default: "button" },
    target: { type: String, default: "_self" },
    type: { type: String, default: "button" },
    variant: { type: String, default: "secondary" }
  }),
  emits: ["click", "update:pressed"],
  setup(props, { emit }) {
    const isToggle = props.pressed !== null;
    const isButton = props.tag === "button" && !props.href && !props.to;
    const isLink2 = !!(props.href || props.to);
    const isBLink = !!props.to;
    const nonStandardTag = props.href ? false : !isButton;
    const classes = computed(() => ({
      [`btn-${props.variant}`]: props.variant,
      [`btn-${props.size}`]: props.size,
      "active": props.active || props.pressed,
      "rounded-pill": props.pill,
      "rounded-0": props.squared,
      "disabled": props.disabled
    }));
    const attrs = computed(() => ({
      "aria-disabled": nonStandardTag ? String(props.disabled) : null,
      "aria-pressed": isToggle ? String(props.pressed) : null,
      "autocomplete": isToggle ? "off" : null,
      "disabled": isButton ? props.disabled : null,
      "href": props.href,
      "rel": isLink2 ? props.rel : null,
      "role": nonStandardTag || isLink2 ? "button" : null,
      "target": isLink2 ? props.target : null,
      "type": isButton ? props.type : null,
      "to": !isButton ? props.to : null,
      "append": isLink2 ? props.append : null,
      "activeClass": isBLink ? props.activeClass : null,
      "event": isBLink ? props.event : null,
      "exact": isBLink ? props.exact : null,
      "exactActiveClass": isBLink ? props.exactActiveClass : null,
      "replace": isBLink ? props.replace : null,
      "routerComponentName": isBLink ? props.routerComponentName : null,
      "routerTag": isBLink ? props.routerTag : null
    }));
    const clicked = function(e) {
      if (props.disabled) {
        e.preventDefault();
        e.stopPropagation();
        return;
      }
      emit("click", e);
      if (isToggle) {
        emit("update:pressed", !props.pressed);
      }
    };
    const computedTag = computed(() => {
      if (isBLink)
        return "b-link";
      return props.href ? "a" : props.tag;
    });
    return {
      classes,
      attrs,
      computedTag,
      clicked
    };
  }
});
function _sfc_render$X(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.computedTag), mergeProps({
    class: ["btn", _ctx.classes]
  }, _ctx.attrs, { onClick: _ctx.clicked }), {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16, ["class", "onClick"]);
}
var BButton = /* @__PURE__ */ _export_sfc(_sfc_main$1f, [["render", _sfc_render$X]]);
const _sfc_main$1e = defineComponent({
  name: "BButtonGroup",
  props: {
    ariaRole: { type: String, default: "group" },
    size: { type: String, required: false },
    tag: { type: String, default: "div" },
    vertical: { type: Boolean, default: false }
  },
  setup(props) {
    const classes = computed(() => ({
      "btn-group": !props.vertical,
      "btn-group-vertical": props.vertical,
      [`btn-group-${props.size}`]: props.size
    }));
    return {
      classes
    };
  }
});
function _sfc_render$W(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    class: normalizeClass(_ctx.classes),
    role: "group",
    "aria-role": _ctx.ariaRole
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["class", "aria-role"]);
}
var BButtonGroup = /* @__PURE__ */ _export_sfc(_sfc_main$1e, [["render", _sfc_render$W]]);
const _sfc_main$1d = defineComponent({
  name: "BButtonToolbar",
  props: {
    ariaRole: { type: String, default: "group" },
    justify: { type: Boolean, default: false }
  },
  setup(props) {
    const classes = computed(() => ({
      "justify-content-between": props.justify
    }));
    return {
      classes
    };
  }
});
const _hoisted_1$B = ["aria-label"];
function _sfc_render$V(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass([_ctx.classes, "btn-toolbar"]),
    role: "toolbar",
    "aria-label": _ctx.ariaRole
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 10, _hoisted_1$B);
}
var BButtonToolbar = /* @__PURE__ */ _export_sfc(_sfc_main$1d, [["render", _sfc_render$V]]);
const _sfc_main$1c = defineComponent({
  name: "BCard",
  props: {
    align: { type: String, required: false },
    bgVariant: { type: String, required: false },
    bodyBgVariant: { type: String, required: false },
    bodyClass: { type: [Array, Object, String], required: false },
    bodyTag: { type: String, default: "div" },
    bodyTextVariant: { type: String, required: false },
    borderVariant: { type: String, required: false },
    footer: { type: String, required: false },
    footerBgVariant: { type: String, required: false },
    footerBorderVariant: { type: String, required: false },
    footerClass: { type: [Array, Object, String], required: false },
    footerHtml: { type: String, default: "" },
    footerTag: { type: String, default: "div" },
    footerTextVariant: { type: String, required: false },
    header: { type: String, required: false },
    headerBgVariant: { type: String, required: false },
    headerBorderVariant: { type: String, required: false },
    headerClass: { type: [Array, Object, String], required: false },
    headerHtml: { type: String, default: "" },
    headerTag: { type: String, default: "div" },
    headerTextVariant: { type: String, required: false },
    imgAlt: { type: String, required: false },
    imgBottom: { type: Boolean, default: false },
    imgEnd: { type: Boolean, default: false },
    imgHeight: { type: [String, Number], required: false },
    imgLeft: { type: Boolean, default: false },
    imgRight: { type: Boolean, default: false },
    imgSrc: { type: String, required: false },
    imgStart: { type: Boolean, default: false },
    imgTop: { type: Boolean, default: false },
    imgWidth: { type: [String, Number], required: false },
    noBody: { type: Boolean, default: false },
    overlay: { type: Boolean, default: false },
    subTitle: { type: String, required: false },
    subTitleTag: { type: String, default: "h6" },
    subTitleTextVariant: { type: String, default: "muted" },
    tag: { type: String, default: "div" },
    textVariant: { type: String, required: false },
    title: { type: String, required: false },
    titleTag: { type: String, default: "h4" }
  },
  setup(props) {
    const classes = computed(() => ({
      [`text-${props.align}`]: props.align,
      [`text-${props.textVariant}`]: props.textVariant,
      [`bg-${props.bgVariant}`]: props.bgVariant,
      [`border-${props.borderVariant}`]: props.borderVariant,
      "flex-row": props.imgLeft || props.imgStart,
      "flex-row-reverse": props.imgEnd || props.imgRight
    }));
    const bodyClasses = computed(() => ({
      "card-body": !props.noBody,
      "card-img-overlay": props.overlay,
      [`bg-${props.bodyBgVariant}`]: props.bodyBgVariant,
      [`text-${props.bodyTextVariant}`]: props.bodyTextVariant
    }));
    const footerClasses = computed(() => ({
      [`bg-${props.footerBgVariant}`]: props.footerBgVariant,
      [`border-${props.footerBorderVariant}`]: props.footerBorderVariant,
      [`text-${props.footerTextVariant}`]: props.footerTextVariant
    }));
    const headerClasses = computed(() => ({
      [`bg-${props.headerBgVariant}`]: props.headerBgVariant,
      [`border-${props.headerBorderVariant}`]: props.headerBorderVariant,
      [`text-${props.headerTextVariant}`]: props.headerTextVariant
    }));
    const imgClasses = computed(() => ({
      "card-img": !props.imgEnd && !props.imgRight && !props.imgStart && !props.imgLeft && !props.imgTop && !props.imgTop,
      "card-img-right": props.imgEnd || props.imgRight,
      "card-img-left": props.imgStart || props.imgLeft,
      "card-img-top": props.imgTop,
      "card-img-bottom": props.imgBottom
    }));
    const imgAttr = computed(() => ({
      src: props.imgSrc,
      alt: props.imgAlt,
      height: props.imgHeight,
      width: props.imgWidth
    }));
    const subTitleClasses = computed(() => ({
      [`text-${props.subTitleTextVariant}`]: props.subTitleTextVariant
    }));
    return {
      classes,
      bodyClasses,
      footerClasses,
      headerClasses,
      imgClasses,
      imgAttr,
      subTitleClasses
    };
  }
});
const _hoisted_1$A = ["innerHTML"];
const _hoisted_2$i = ["innerHTML"];
function _sfc_render$U(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    class: normalizeClass(["card", _ctx.classes])
  }, {
    default: withCtx(() => [
      _ctx.imgSrc && !_ctx.imgBottom ? (openBlock(), createElementBlock("img", mergeProps({ key: 0 }, _ctx.imgAttr, { class: _ctx.imgClasses }), null, 16)) : createCommentVNode("", true),
      _ctx.header || _ctx.$slots.header || _ctx.headerHtml ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.headerTag), {
        key: 1,
        class: normalizeClass(["card-header", [_ctx.headerClass, _ctx.headerClasses]])
      }, {
        default: withCtx(() => [
          !!_ctx.headerHtml ? (openBlock(), createElementBlock("div", {
            key: 0,
            innerHTML: _ctx.headerHtml
          }, null, 8, _hoisted_1$A)) : renderSlot(_ctx.$slots, "header", { key: 1 }, () => [
            createTextVNode(toDisplayString(_ctx.header), 1)
          ])
        ]),
        _: 3
      }, 8, ["class"])) : createCommentVNode("", true),
      !_ctx.noBody ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.bodyTag), {
        key: 2,
        class: normalizeClass([_ctx.bodyClass, _ctx.bodyClasses])
      }, {
        default: withCtx(() => [
          _ctx.title && !_ctx.noBody ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.titleTag), {
            key: 0,
            class: "card-title"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.title), 1)
            ]),
            _: 1
          })) : createCommentVNode("", true),
          _ctx.subTitle && !_ctx.noBody ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.subTitleTag), {
            key: 1,
            class: normalizeClass(["card-subtitle mb-2", _ctx.subTitleClasses])
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.subTitle), 1)
            ]),
            _: 1
          }, 8, ["class"])) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"])) : createCommentVNode("", true),
      _ctx.noBody ? renderSlot(_ctx.$slots, "default", { key: 3 }) : createCommentVNode("", true),
      _ctx.footer || _ctx.$slots.footer || _ctx.footerHtml ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.footerTag), {
        key: 4,
        class: normalizeClass(["card-footer", [_ctx.footerClass, _ctx.footerClasses]])
      }, {
        default: withCtx(() => [
          !!_ctx.footerHtml ? (openBlock(), createElementBlock("div", {
            key: 0,
            innerHTML: _ctx.footerHtml
          }, null, 8, _hoisted_2$i)) : renderSlot(_ctx.$slots, "footer", { key: 1 }, () => [
            createTextVNode(toDisplayString(_ctx.footer), 1)
          ])
        ]),
        _: 3
      }, 8, ["class"])) : createCommentVNode("", true),
      _ctx.imgSrc && _ctx.imgBottom ? (openBlock(), createElementBlock("img", mergeProps({ key: 5 }, _ctx.imgAttr, { class: _ctx.imgClasses }), null, 16)) : createCommentVNode("", true)
    ]),
    _: 3
  }, 8, ["class"]);
}
var BCard = /* @__PURE__ */ _export_sfc(_sfc_main$1c, [["render", _sfc_render$U]]);
const _sfc_main$1b = defineComponent({
  name: "BCardBody",
  props: {
    bodyBgVariant: { type: String, required: false },
    bodyClass: { type: [Array, Object, String], required: false },
    bodyTag: { type: String, default: "div" },
    bodyTextVariant: { type: String, required: false },
    overlay: { type: Boolean, default: false },
    subTitle: { type: String, required: false },
    subTitleTag: { type: String, default: "h4" },
    subTitleTextVariant: { type: String, required: false },
    title: { type: String, required: false },
    titleTag: { type: String, default: "h4" }
  },
  setup(props) {
    const classes = computed(() => ({
      [`text-${props.bodyTextVariant}`]: props.bodyTextVariant,
      [`bg-${props.bodyBgVariant}`]: props.bodyBgVariant
    }));
    return {
      classes
    };
  }
});
function _sfc_render$T(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_card_title = resolveComponent("b-card-title");
  const _component_b_card_sub_title = resolveComponent("b-card-sub-title");
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.bodyTag), {
    class: normalizeClass(["card-body", _ctx.classes])
  }, {
    default: withCtx(() => [
      _ctx.title ? (openBlock(), createBlock(_component_b_card_title, {
        key: 0,
        "title-tag": _ctx.titleTag,
        title: _ctx.title
      }, null, 8, ["title-tag", "title"])) : createCommentVNode("", true),
      _ctx.subTitle ? (openBlock(), createBlock(_component_b_card_sub_title, {
        key: 1,
        "sub-title-tag": _ctx.subTitleTag,
        "sub-title": _ctx.subTitle,
        "sub-title-text-variant": _ctx.subTitleTextVariant
      }, null, 8, ["sub-title-tag", "sub-title", "sub-title-text-variant"])) : createCommentVNode("", true),
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["class"]);
}
var BCardBody = /* @__PURE__ */ _export_sfc(_sfc_main$1b, [["render", _sfc_render$T]]);
const _sfc_main$1a = defineComponent({
  name: "BCardFooter",
  props: {
    footer: { type: String },
    footerBgVariant: { type: String, required: false },
    footerBorderVariant: { type: String, required: false },
    footerClass: { type: [Array, Object, String], required: false },
    footerHtml: { type: String, required: false },
    footerTag: { type: String, default: "div" },
    footerTextVariant: { type: String, required: false }
  },
  setup(props) {
    const classes = computed(() => ({
      [`text-${props.footerTextVariant}`]: props.footerTextVariant,
      [`bg-${props.footerBgVariant}`]: props.footerBgVariant,
      [`border-${props.footerBorderVariant}`]: props.footerBorderVariant
    }));
    return {
      classes
    };
  }
});
const _hoisted_1$z = ["innerHTML"];
function _sfc_render$S(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.footerTag), {
    class: normalizeClass(["card-footer", [_ctx.footerClass, _ctx.classes]])
  }, {
    default: withCtx(() => [
      !!_ctx.footerHtml ? (openBlock(), createElementBlock("div", {
        key: 0,
        innerHTML: _ctx.footerHtml
      }, null, 8, _hoisted_1$z)) : renderSlot(_ctx.$slots, "default", { key: 1 }, () => [
        createTextVNode(toDisplayString(_ctx.footer), 1)
      ])
    ]),
    _: 3
  }, 8, ["class"]);
}
var BCardFooter = /* @__PURE__ */ _export_sfc(_sfc_main$1a, [["render", _sfc_render$S]]);
const _sfc_main$19 = defineComponent({
  name: "BCardGroup",
  props: {
    columns: { type: Boolean, default: false },
    deck: { type: Boolean, default: false },
    tag: { type: String, default: "div" }
  },
  setup(props) {
    const classes = computed(() => props.deck ? "card-deck" : props.columns ? "card-columns" : "card-group");
    return {
      classes
    };
  }
});
function _sfc_render$R(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    class: normalizeClass(_ctx.classes)
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["class"]);
}
var BCardGroup = /* @__PURE__ */ _export_sfc(_sfc_main$19, [["render", _sfc_render$R]]);
const _sfc_main$18 = defineComponent({
  name: "BCardHeader",
  props: {
    header: { type: String, required: false },
    headerBgVariant: { type: String, required: false },
    headerBorderVariant: { type: String, required: false },
    headerClass: { type: [Array, Object, String], required: false },
    headerHtml: { type: String, required: false },
    headerTag: { type: String, default: "div" },
    headerTextVariant: { type: String, required: false }
  },
  setup(props) {
    const classes = computed(() => ({
      [`text-${props.headerTextVariant}`]: props.headerTextVariant,
      [`bg-${props.headerBgVariant}`]: props.headerBgVariant,
      [`border-${props.headerBorderVariant}`]: props.headerBorderVariant
    }));
    return {
      classes
    };
  }
});
const _hoisted_1$y = ["innerHTML"];
function _sfc_render$Q(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.headerTag), {
    class: normalizeClass(["card-header", [_ctx.headerClass, _ctx.classes]])
  }, {
    default: withCtx(() => [
      !!_ctx.headerHtml ? (openBlock(), createElementBlock("div", {
        key: 0,
        innerHTML: _ctx.headerHtml
      }, null, 8, _hoisted_1$y)) : renderSlot(_ctx.$slots, "default", { key: 1 }, () => [
        createTextVNode(toDisplayString(_ctx.header), 1)
      ])
    ]),
    _: 3
  }, 8, ["class"]);
}
var BCardHeader = /* @__PURE__ */ _export_sfc(_sfc_main$18, [["render", _sfc_render$Q]]);
const _sfc_main$17 = defineComponent({
  name: "BCardImage",
  props: {
    alt: { type: String, default: null },
    bottom: { type: Boolean, default: false },
    end: { type: Boolean, default: false },
    height: { type: [Number, String], required: false },
    left: { type: Boolean, default: false },
    right: { type: Boolean, default: false },
    src: { type: String, required: false },
    start: { type: Boolean, default: false },
    top: { type: Boolean, default: false },
    width: { type: [Number, String], required: false }
  },
  setup(props) {
    const attrs = computed(() => ({
      src: props.src,
      alt: props.alt,
      width: (typeof props.width === "number" ? props.width : parseInt(props.width, 10)) || void 0,
      height: (typeof props.height === "number" ? props.height : parseInt(props.height, 10)) || void 0
    }));
    const classes = computed(() => {
      const align = props.left ? "float-left" : props.right ? "float-right" : "";
      let baseClass = "card-img";
      if (props.top) {
        baseClass += "-top";
      } else if (props.right || props.end) {
        baseClass += "-right";
      } else if (props.bottom) {
        baseClass += "-bottom";
      } else if (props.left || props.start) {
        baseClass += "-left";
      }
      return {
        [align]: !!align,
        [baseClass]: true
      };
    });
    return {
      attrs,
      classes
    };
  }
});
function _sfc_render$P(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("img", mergeProps({ class: _ctx.classes }, _ctx.attrs), null, 16);
}
var BCardImg = /* @__PURE__ */ _export_sfc(_sfc_main$17, [["render", _sfc_render$P]]);
const _sfc_main$16 = defineComponent({
  name: "BCardSubTitle",
  props: {
    subTitle: { type: String },
    subTitleTag: { type: String, default: "h6" },
    subTitleTextVariant: { type: String, default: "muted" }
  },
  setup(props) {
    const classes = computed(() => ({
      [`text-${props.subTitleTextVariant}`]: props.subTitleTextVariant
    }));
    return {
      classes
    };
  }
});
function _sfc_render$O(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.subTitleTag), {
    class: normalizeClass(["card-subtitle mb-2", _ctx.classes])
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(_ctx.subTitle), 1)
      ])
    ]),
    _: 3
  }, 8, ["class"]);
}
var BCardSubTitle = /* @__PURE__ */ _export_sfc(_sfc_main$16, [["render", _sfc_render$O]]);
const _sfc_main$15 = defineComponent({
  name: "BCardText"
});
const _hoisted_1$x = { class: "card-text" };
function _sfc_render$N(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("p", _hoisted_1$x, [
    renderSlot(_ctx.$slots, "default")
  ]);
}
var BCardText = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["render", _sfc_render$N]]);
const _sfc_main$14 = defineComponent({
  name: "BCardTitle",
  props: {
    title: { type: String },
    titleTag: { type: String, default: "h4" }
  }
});
function _sfc_render$M(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.titleTag), { class: "card-title" }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(_ctx.title), 1)
      ])
    ]),
    _: 3
  });
}
var BCardTitle = /* @__PURE__ */ _export_sfc(_sfc_main$14, [["render", _sfc_render$M]]);
const injectionKey$3 = Symbol();
const _sfc_main$13 = defineComponent({
  name: "BCarousel",
  props: {
    background: { type: String, required: false },
    modelValue: { type: Number, default: 0 },
    controls: { type: Boolean, default: false },
    id: { type: String },
    imgHeight: { type: String },
    imgWidth: { type: String },
    indicators: { type: Boolean, default: false },
    interval: { type: Number, default: 5e3 },
    noTouch: { type: Boolean, default: false },
    noWrap: { type: Boolean, default: false }
  },
  emits: ["sliding-start", "sliding-end"],
  setup(props, { slots, emit }) {
    const element = ref();
    const instance = ref();
    const computedId = useId(props.id, "accordion");
    const slides = ref([]);
    useEventListener(element, "slide.bs.carousel", (payload) => emit("sliding-start", payload));
    useEventListener(element, "slid.bs.carousel", (payload) => emit("sliding-end", payload));
    onMounted(() => {
      instance.value = new Carousel(element.value, {
        wrap: !props.noTouch,
        interval: props.interval,
        touch: !props.noTouch
      });
      if (slots.default) {
        slides.value = slots.default().filter((child) => {
          var _a;
          return ((_a = child.type) == null ? void 0 : _a.name) === "BCarouselSlide";
        });
      }
    });
    provide(injectionKey$3, {
      background: props.background,
      width: props.imgWidth,
      height: props.imgHeight
    });
    return {
      element,
      computedId,
      slides
    };
  }
});
const _hoisted_1$w = ["id"];
const _hoisted_2$h = {
  key: 0,
  class: "carousel-indicators"
};
const _hoisted_3$7 = ["data-bs-target", "data-bs-slide-to", "aria-label"];
const _hoisted_4$4 = { class: "carousel-inner" };
const _hoisted_5$4 = ["data-bs-target"];
const _hoisted_6$2 = /* @__PURE__ */ createElementVNode("span", {
  class: "carousel-control-prev-icon",
  "aria-hidden": "true"
}, null, -1);
const _hoisted_7$1 = /* @__PURE__ */ createElementVNode("span", { class: "visually-hidden" }, "Previous", -1);
const _hoisted_8$1 = [
  _hoisted_6$2,
  _hoisted_7$1
];
const _hoisted_9$1 = ["data-bs-target"];
const _hoisted_10$1 = /* @__PURE__ */ createElementVNode("span", {
  class: "carousel-control-next-icon",
  "aria-hidden": "true"
}, null, -1);
const _hoisted_11$1 = /* @__PURE__ */ createElementVNode("span", { class: "visually-hidden" }, "Next", -1);
const _hoisted_12$1 = [
  _hoisted_10$1,
  _hoisted_11$1
];
function _sfc_render$L(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    id: _ctx.computedId,
    ref: "element",
    class: "carousel slide",
    "data-bs-ride": "carousel"
  }, [
    _ctx.indicators ? (openBlock(), createElementBlock("div", _hoisted_2$h, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.slides, (slide, i) => {
        return openBlock(), createElementBlock("button", {
          key: i,
          type: "button",
          "data-bs-target": `#${_ctx.computedId}`,
          "data-bs-slide-to": i,
          class: normalizeClass(i === 0 ? "active" : ""),
          "aria-current": "true",
          "aria-label": `Slide ${i}`
        }, null, 10, _hoisted_3$7);
      }), 128))
    ])) : createCommentVNode("", true),
    createElementVNode("div", _hoisted_4$4, [
      renderSlot(_ctx.$slots, "default")
    ]),
    _ctx.controls ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
      createElementVNode("button", {
        class: "carousel-control-prev",
        type: "button",
        "data-bs-target": `#${_ctx.computedId}`,
        "data-bs-slide": "prev"
      }, _hoisted_8$1, 8, _hoisted_5$4),
      createElementVNode("button", {
        class: "carousel-control-next",
        type: "button",
        "data-bs-target": `#${_ctx.computedId}`,
        "data-bs-slide": "next"
      }, _hoisted_12$1, 8, _hoisted_9$1)
    ], 64)) : createCommentVNode("", true)
  ], 8, _hoisted_1$w);
}
var BCarousel = /* @__PURE__ */ _export_sfc(_sfc_main$13, [["render", _sfc_render$L]]);
const _sfc_main$12 = defineComponent({
  name: "BCarouselSlide",
  props: {
    active: { type: Boolean, default: false },
    background: { type: String, required: false },
    caption: { type: String, required: false },
    captionHtml: { type: String, required: false },
    captionTag: { type: String, default: "h3" },
    contentTag: { type: String, default: "div" },
    contentVisibleUp: { type: String, required: false },
    id: { type: String, required: false },
    imgAlt: { type: String, required: false },
    imgBlank: { type: Boolean, default: false },
    imgBlankColor: { type: String, default: "transparent" },
    imgHeight: { type: String },
    imgSrc: { type: String },
    imgWidth: { type: String },
    interval: { type: [String, Number] },
    text: { type: String, required: false },
    textHtml: { type: String, required: false },
    textTag: { type: String, default: "p" }
  },
  setup(props) {
    const parentData = inject(injectionKey$3, {});
    const computedId = useId(props.id, "accordion");
    const img = computed(() => props.imgBlank ? props.imgBlank : props.imgSrc);
    const computedAttr = computed(() => ({
      background: `${props.background || parentData.background || "rgb(171, 171, 171)"} none repeat scroll 0% 0%`
    }));
    const computedContentClasses = computed(() => ({
      "d-none": props.contentVisibleUp,
      [`d-${props.contentVisibleUp}-block`]: props.contentVisibleUp
    }));
    const showText = computed(() => props.text && !props.textHtml);
    const showTextAsHtml = computed(() => props.textHtml);
    const showCaption = computed(() => props.caption && !props.captionHtml);
    const showCaptionAsHtml = computed(() => props.captionHtml);
    return {
      computedAttr,
      computedContentClasses,
      computedId,
      height: parentData.height,
      img,
      showCaption,
      showCaptionAsHtml,
      showText,
      showTextAsHtml,
      width: parentData.width
    };
  }
});
const _hoisted_1$v = ["id", "data-bs-interval"];
const _hoisted_2$g = { key: 0 };
const _hoisted_3$6 = ["innerHTML"];
const _hoisted_4$3 = { key: 0 };
const _hoisted_5$3 = ["innerHTML"];
function _sfc_render$K(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_img = resolveComponent("b-img");
  return openBlock(), createElementBlock("div", {
    id: _ctx.computedId,
    class: normalizeClass(["carousel-item", { active: _ctx.active }]),
    "data-bs-interval": _ctx.interval,
    style: normalizeStyle(_ctx.computedAttr)
  }, [
    renderSlot(_ctx.$slots, "img", {}, () => [
      createVNode(_component_b_img, {
        class: "d-block w-100",
        alt: _ctx.imgAlt,
        src: _ctx.imgSrc,
        width: _ctx.imgWidth || _ctx.width,
        height: _ctx.imgHeight || _ctx.height,
        blank: _ctx.imgBlank,
        "blank-color": _ctx.imgBlankColor
      }, null, 8, ["alt", "src", "width", "height", "blank", "blank-color"])
    ]),
    _ctx.caption || _ctx.captionHtml || _ctx.text || _ctx.textHtml || _ctx.$slots.default ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.contentTag), {
      key: 0,
      class: normalizeClass(["carousel-caption", _ctx.computedContentClasses])
    }, {
      default: withCtx(() => [
        _ctx.caption || _ctx.captionHtml ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.captionTag), { key: 0 }, {
          default: withCtx(() => [
            _ctx.showCaption ? (openBlock(), createElementBlock("span", _hoisted_2$g, toDisplayString(_ctx.caption), 1)) : createCommentVNode("", true),
            _ctx.showCaptionAsHtml ? (openBlock(), createElementBlock("span", {
              key: 1,
              innerHTML: _ctx.captionHtml
            }, null, 8, _hoisted_3$6)) : createCommentVNode("", true)
          ]),
          _: 1
        })) : createCommentVNode("", true),
        _ctx.text || _ctx.textHtml ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.textTag), { key: 1 }, {
          default: withCtx(() => [
            _ctx.showText ? (openBlock(), createElementBlock("span", _hoisted_4$3, toDisplayString(_ctx.text), 1)) : createCommentVNode("", true),
            _ctx.showTextAsHtml ? (openBlock(), createElementBlock("span", {
              key: 1,
              innerHTML: _ctx.textHtml
            }, null, 8, _hoisted_5$3)) : createCommentVNode("", true)
          ]),
          _: 1
        })) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"])) : createCommentVNode("", true)
  ], 14, _hoisted_1$v);
}
var BCarouselSlide = /* @__PURE__ */ _export_sfc(_sfc_main$12, [["render", _sfc_render$K]]);
const _sfc_main$11 = defineComponent({
  name: "BCloseButton",
  props: {
    disabled: { type: Boolean, default: false },
    white: { type: Boolean, default: false }
  },
  setup(props) {
    const classes = computed(() => ({
      "btn-close-white": props.white
    }));
    return {
      classes
    };
  }
});
const _hoisted_1$u = ["disabled"];
function _sfc_render$J(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("button", {
    type: "button",
    class: normalizeClass(["btn-close", _ctx.classes]),
    disabled: _ctx.disabled,
    "aria-label": "Close"
  }, null, 10, _hoisted_1$u);
}
var BCloseButton = /* @__PURE__ */ _export_sfc(_sfc_main$11, [["render", _sfc_render$J]]);
var getBreakpointProps = (prefix, breakpoints, definition) => breakpoints.concat(["sm", "md", "lg", "xl", "xxl"]).reduce((props, breakpoint) => {
  props[!prefix ? breakpoint : `${prefix}${breakpoint.charAt(0).toUpperCase() + breakpoint.slice(1)}`] = definition;
  return props;
}, /* @__PURE__ */ Object.create(null));
var getClasses$1 = (props, els, propPrefix, classPrefix = propPrefix) => Object.keys(els).reduce((arr, prop) => {
  if (!props[prop])
    return arr;
  arr.push([classPrefix, prop.replace(propPrefix, ""), props[prop]].filter((e) => e && typeof e !== "boolean").join("-").toLowerCase());
  return arr;
}, []);
const breakpointCol = getBreakpointProps("", [], { type: [Boolean, String, Number], default: false });
const breakpointOffset = getBreakpointProps("offset", [""], { type: [String, Number], default: null });
const breakpointOrder = getBreakpointProps("order", [""], { type: [String, Number], default: null });
const _sfc_main$10 = defineComponent({
  name: "BCol",
  props: __spreadProps(__spreadValues(__spreadProps(__spreadValues(__spreadProps(__spreadValues({
    col: { type: Boolean, default: false },
    cols: { type: [String, Number], default: null }
  }, breakpointCol), {
    offset: { type: [String, Number], default: null }
  }), breakpointOffset), {
    order: { type: [String, Number], default: null }
  }), breakpointOrder), {
    alignSelf: { type: String, default: null },
    tag: { type: String, default: "div" }
  }),
  setup(props) {
    let classList = [];
    const properties = [
      { content: breakpointCol, propPrefix: "cols", classPrefix: "col" },
      { content: breakpointOffset, propPrefix: "offset" },
      { content: breakpointOrder, propPrefix: "order" }
    ];
    properties.forEach((property) => {
      classList = classList.concat(getClasses$1(props, property.content, property.propPrefix, property.classPrefix));
    });
    const classes = computed(() => ({
      col: props.col || !classList.some((e) => /^col-/.test(e) && !props.cols),
      [`col-${props.cols}`]: !!props.cols,
      [`offset-${props.offset}`]: !!props.offset,
      [`order-${props.order}`]: !!props.order,
      [`align-self-${props.alignSelf}`]: !!props.alignSelf
    }));
    return {
      classes,
      classList
    };
  }
});
function _sfc_render$I(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    class: normalizeClass([_ctx.classes, _ctx.classList])
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["class"]);
}
var BCol = /* @__PURE__ */ _export_sfc(_sfc_main$10, [["render", _sfc_render$I]]);
let defaultToastOptions = { delay: 5e3, value: true, pos: "top-right" };
class ToastInstance {
  constructor(vm) {
    if (isReactive(vm)) {
      this.vm = vm;
    } else {
      this.vm = reactive(vm);
    }
    this.containerPositions = computed(() => {
      let s = /* @__PURE__ */ new Set([]);
      this.vm.toasts.map((toast) => {
        if (toast.options.pos) {
          s.add(toast.options.pos);
        }
      });
      return s;
    });
  }
  toasts(position) {
    if (position) {
      return computed(() => {
        return this.vm.toasts.filter((toast) => {
          if (toast.options.pos == position && toast.options.value) {
            return toast;
          }
        });
      });
    }
    return computed(() => {
      return this.vm.toasts;
    });
  }
  remove(...forDeletion) {
    this.vm.toasts = this.vm.toasts.filter((item) => {
      if (!forDeletion.includes(item.options.id)) {
        return item;
      }
    });
  }
  isRoot() {
    var _a;
    return (_a = this.vm.root) != null ? _a : false;
  }
  show(content, options = defaultToastOptions) {
    let topts = __spreadValues(__spreadValues({ id: getID() }, defaultToastOptions), options);
    let toast = {
      options: reactive(topts),
      content
    };
    this.vm.toasts.push(toast);
    return toast;
  }
  info(content, options = defaultToastOptions) {
    return this.show(content, __spreadValues({ variant: "info" }, options));
  }
  danger(content, options = defaultToastOptions) {
    return this.show(content, __spreadValues({ variant: "danger" }, options));
  }
  warning(content, options = defaultToastOptions) {
    return this.show(content, __spreadValues({ variant: "warning" }, options));
  }
  success(content, options = defaultToastOptions) {
    return this.show(content, __spreadValues({ variant: "success" }, options));
  }
  hide() {
  }
}
class ToastController {
  constructor() {
    this.useToast = useToast;
    this.vms = {};
  }
  getOrCreateViewModel(vm) {
    if (!vm) {
      if (this.rootInstance) {
        return this.vms[this.rootInstance];
      } else {
        let vm2 = { root: true, toasts: [], container: void 0, id: Symbol("toast") };
        this.rootInstance = vm2.id;
        this.vms[vm2.id] = vm2;
        return vm2;
      }
    } else {
      if (vm.root) {
        if (this.rootInstance) {
          return this.vms[this.rootInstance];
        }
        this.rootInstance = vm.id;
      }
      this.vms[vm.id] = vm;
      return vm;
    }
  }
  getVM(id) {
    if (!id && this.rootInstance) {
      return this.vms[this.rootInstance];
    } else if (id) {
      return this.vms[id];
    }
    return void 0;
  }
}
let injectkey = Symbol();
let defaults = {
  container: void 0,
  toasts: [],
  root: false
};
function useToast(vm, key = injectkey) {
  let controller = inject(key !== null ? key : injectkey);
  if (!vm) {
    let local_vm2 = new ToastInstance(controller.getOrCreateViewModel());
    return local_vm2;
  }
  let vm_id = { id: Symbol("toastInstance") };
  let local_vm = __spreadValues(__spreadValues(__spreadValues({}, defaults), vm_id), vm);
  let vm_instance = controller.getOrCreateViewModel(local_vm);
  return new ToastInstance(vm_instance);
}
const BToastPlugin = {
  install: (app, options = {}) => {
    var _a, _b;
    app.provide((_b = (_a = options == null ? void 0 : options.BToast) == null ? void 0 : _a.injectkey) != null ? _b : injectkey, new ToastController());
  }
};
const toastPositions = {
  "top-left": "top-0 start-0",
  "top-center": "top-0 start-50 translate-middle-x",
  "top-right": "top-0 end-0",
  "middle-left": "top-50 start-0 translate-middle-y",
  "middle-center": "top-50 start-50 translate-middle",
  "middle-right": "top-50 end-0 translate-middle-y",
  "bottom-left": "bottom-0 start-0",
  "bottom-center": "bottom-0 start-50 translate-middle-x",
  "bottom-right": "bottom-0 end-0"
};
const _sfc_main$$ = defineComponent({
  name: "BToaster",
  props: {
    position: { type: String, default: "top-right" },
    instance: { type: Object }
  },
  setup(props, { emit }) {
    const positionClass = computed(() => toastPositions[props.position]);
    const handleDestroy = (id) => {
      var _a;
      (_a = props.instance) == null ? void 0 : _a.remove(id);
    };
    return {
      positionClass,
      handleDestroy
    };
  },
  computed: {}
});
function _sfc_render$H(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_toast = resolveComponent("b-toast");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass([[_ctx.positionClass], "b-toaster position-fixed p-3"]),
    style: { "z-index": "11" }
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.instance.toasts(_ctx.position).value, (toast) => {
      return openBlock(), createBlock(_component_b_toast, {
        id: toast.options.id,
        key: toast.options.id,
        modelValue: toast.options.value,
        "onUpdate:modelValue": ($event) => toast.options.value = $event,
        title: toast.content.title,
        body: toast.content.body,
        component: toast.content.vnode,
        variant: toast.options.variant,
        onDestroyed: _ctx.handleDestroy
      }, null, 8, ["id", "modelValue", "onUpdate:modelValue", "title", "body", "component", "variant", "onDestroyed"]);
    }), 128))
  ], 2);
}
var BToastContainer = /* @__PURE__ */ _export_sfc(_sfc_main$$, [["render", _sfc_render$H]]);
const _sfc_main$_ = defineComponent({
  name: "BContainer",
  props: {
    gutterX: { type: String, default: null },
    gutterY: { type: String, default: null },
    fluid: { type: [Boolean, String], default: false },
    toast: { type: Object },
    position: { type: String, required: false }
  },
  setup(props, { slots, expose }) {
    const container = ref();
    let toastInstance;
    const classes = computed(() => ({
      container: !props.fluid,
      [`container-fluid`]: typeof props.fluid === "boolean" && props.fluid,
      [`container-${props.fluid}`]: typeof props.fluid === "string",
      [`gx-${props.gutterX}`]: props.gutterX !== null,
      [`gy-${props.gutterY}`]: props.gutterY !== null
    }));
    onMounted(() => {
      if (props.toast)
        ;
    });
    if (props.toast) {
      toastInstance = useToast({ container, root: props.toast.root });
      expose({});
    }
    return () => {
      var _a;
      const subContainers = [];
      toastInstance == null ? void 0 : toastInstance.containerPositions.value.forEach((position) => {
        subContainers.push(h(BToastContainer, { key: position, instance: toastInstance, position }));
      });
      return h("div", { class: [classes.value, props.position], ref: container }, [
        ...subContainers,
        (_a = slots.default) == null ? void 0 : _a.call(slots)
      ]);
    };
  },
  methods: {}
});
function _isObject(item) {
  return item && typeof item === "object" && item.constructor === Object;
}
function mergeDeep(target, source, extendArray = true) {
  const output = target instanceof Date && typeof target.getMonth === "function" ? new Date(target) : Object.assign({}, target);
  if (_isObject(target) && _isObject(source)) {
    Object.keys(source).forEach((key) => {
      if (_isObject(source[key])) {
        if (!(key in target))
          Object.assign(output, { [key]: source[key] });
        else
          output[key] = mergeDeep(target[key], source[key], extendArray);
      } else if (Array.isArray(source[key]) && Array.isArray(target[key])) {
        Object.assign(output, {
          [key]: !extendArray ? source[key] : target[key].concat(source[key].filter((item) => !target[key].includes(item)))
        });
      } else {
        Object.assign(output, { [key]: source[key] });
      }
    });
  }
  return output;
}
const _sfc_main$Z = defineComponent({
  name: "BDropdown",
  components: { BButton },
  props: {
    autoClose: { type: [Boolean, String], default: true },
    block: { type: Boolean, default: false },
    boundary: {
      type: [HTMLElement$1, String],
      default: "clippingParents"
    },
    dark: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    dropup: { type: Boolean, default: false },
    dropright: { type: Boolean, default: false },
    dropleft: { type: Boolean, default: false },
    id: { type: String },
    menuClass: { type: [Array, Object, String] },
    noFlip: { type: Boolean, default: false },
    offset: { type: [Number, String], default: 0 },
    popperOpts: { type: Object, default: () => ({}) },
    right: { type: Boolean, default: false },
    role: { type: String, default: "menu" },
    size: { type: String },
    split: { type: Boolean, default: false },
    splitButtonType: { type: String, default: "button" },
    splitClass: { type: [Array, Object, String] },
    splitHref: { type: String, default: null },
    noCaret: { type: Boolean, default: false },
    splitVariant: { type: String },
    text: { type: String },
    toggleClass: { type: [Array, Object, String] },
    toggleText: { type: String, default: "Toggle dropdown" },
    variant: { type: String, default: "secondary" }
  },
  emits: ["show", "shown", "hide", "hidden"],
  setup(props, { emit }) {
    const parent = ref();
    const dropdown = ref();
    const instance = ref();
    const computedId = useId(props.id, "dropdown");
    useEventListener(parent, "show.bs.dropdown", () => emit("show"));
    useEventListener(parent, "shown.bs.dropdown", () => emit("shown"));
    useEventListener(parent, "hide.bs.dropdown", () => emit("hide"));
    useEventListener(parent, "hidden.bs.dropdown", () => emit("hidden"));
    const classes = computed(() => ({
      "d-grid": props.block,
      "d-flex": props.block && props.split
    }));
    const buttonClasses = computed(() => ({
      "dropdown-toggle": !props.split,
      "dropdown-toggle-no-caret": props.noCaret && !props.split,
      "w-100": props.split && props.block
    }));
    const dropdownMenuClasses = computed(() => ({
      "dropdown-menu-dark": props.dark
    }));
    const buttonAttr = computed(() => ({
      "data-bs-toggle": props.split ? null : "dropdown",
      "aria-expanded": props.split ? null : false,
      "ref": props.split ? null : dropdown,
      "href": props.split ? props.splitHref : null
    }));
    const splitAttr = computed(() => ({
      ref: props.split ? dropdown : null
    }));
    const hide = () => {
      var _a;
      (_a = instance.value) == null ? void 0 : _a.hide();
    };
    onMounted(() => {
      var _a;
      instance.value = new Dropdown((_a = dropdown.value) == null ? void 0 : _a.$el, {
        autoClose: props.autoClose,
        boundary: props.boundary,
        offset: props.offset.toString(),
        reference: props.offset || props.split ? "parent" : "toggle",
        popperConfig: (defaultConfig) => {
          const dropDownConfig = {
            placement: "bottom-start",
            modifiers: !props.noFlip ? [] : [
              {
                name: "flip",
                options: {
                  fallbackPlacements: []
                }
              }
            ]
          };
          if (props.dropup) {
            dropDownConfig.placement = props.right ? "top-end" : "top-start";
          } else if (props.dropright) {
            dropDownConfig.placement = "right-start";
          } else if (props.dropleft) {
            dropDownConfig.placement = "left-start";
          } else if (props.right) {
            dropDownConfig.placement = "bottom-end";
          }
          return mergeDeep(defaultConfig, mergeDeep(dropDownConfig, props.popperOpts));
        }
      });
    });
    return {
      parent,
      computedId,
      classes,
      buttonClasses,
      buttonAttr,
      splitAttr,
      dropdownMenuClasses,
      dropdown,
      hide
    };
  }
});
const _hoisted_1$t = { class: "visually-hidden" };
const _hoisted_2$f = ["aria-labelledby", "role"];
function _sfc_render$G(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_button = resolveComponent("b-button");
  return openBlock(), createElementBlock("div", {
    ref: "parent",
    class: normalizeClass([_ctx.classes, "btn-group"])
  }, [
    createVNode(_component_b_button, mergeProps({
      id: _ctx.computedId,
      variant: _ctx.splitVariant || _ctx.variant,
      size: _ctx.size,
      class: [_ctx.buttonClasses, _ctx.split ? _ctx.splitClass : _ctx.toggleClass],
      disabled: _ctx.disabled,
      type: _ctx.splitButtonType
    }, _ctx.buttonAttr), {
      default: withCtx(() => [
        createTextVNode(toDisplayString(_ctx.text) + " ", 1),
        renderSlot(_ctx.$slots, "button-content")
      ]),
      _: 3
    }, 16, ["id", "variant", "size", "class", "disabled", "type"]),
    _ctx.split ? (openBlock(), createBlock(_component_b_button, mergeProps({
      key: 0,
      variant: _ctx.variant,
      size: _ctx.size,
      disabled: _ctx.disabled
    }, _ctx.splitAttr, {
      class: [_ctx.toggleClass, "dropdown-toggle-split dropdown-toggle"],
      "data-bs-toggle": "dropdown",
      "aria-expanded": "false"
    }), {
      default: withCtx(() => [
        createElementVNode("span", _hoisted_1$t, toDisplayString(_ctx.toggleText), 1)
      ]),
      _: 1
    }, 16, ["variant", "size", "disabled", "class"])) : createCommentVNode("", true),
    createElementVNode("ul", {
      class: normalizeClass(["dropdown-menu", [_ctx.menuClass, _ctx.dropdownMenuClasses]]),
      "aria-labelledby": _ctx.computedId,
      role: _ctx.role
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 10, _hoisted_2$f)
  ], 2);
}
var BDropdown = /* @__PURE__ */ _export_sfc(_sfc_main$Z, [["render", _sfc_render$G]]);
const _sfc_main$Y = defineComponent({
  name: "BDropdownDivider",
  props: {
    tag: { type: String, default: "hr" }
  }
});
const _hoisted_1$s = { role: "presentation" };
function _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("li", _hoisted_1$s, [
    (openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
      class: "dropdown-divider",
      role: "separator",
      "aria-orientation": "horizontal"
    }))
  ]);
}
var BDropdownDivider = /* @__PURE__ */ _export_sfc(_sfc_main$Y, [["render", _sfc_render$F]]);
const _sfc_main$X = defineComponent({
  name: "BDropdownForm"
});
const _hoisted_1$r = { role: "presentation" };
const _hoisted_2$e = { class: "px-4 py-3" };
function _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("li", _hoisted_1$r, [
    createElementVNode("form", _hoisted_2$e, [
      renderSlot(_ctx.$slots, "default")
    ])
  ]);
}
var BDropdownForm = /* @__PURE__ */ _export_sfc(_sfc_main$X, [["render", _sfc_render$E]]);
const _sfc_main$W = defineComponent({
  name: "BDropdownGroup",
  inheritAttrs: false,
  props: {
    ariaDescribedby: { type: String },
    header: { type: String },
    headerClasses: { type: [String, Array, Object], default: null },
    headerTag: { type: String, default: "header" },
    headerVariant: { type: String, default: null },
    id: { type: String }
  },
  setup(props) {
    const headerId = computed(() => props.id ? [props.id, "group_dd_header"].join("_") : null);
    const headerRole = computed(() => props.headerTag === "header" ? null : "heading");
    const classes = computed(() => ({
      [`text-${props.headerVariant}`]: props.headerVariant
    }));
    return {
      classes,
      headerId,
      headerRole
    };
  }
});
const _hoisted_1$q = { role: "presentation" };
const _hoisted_2$d = ["id", "aria-describedby"];
function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("li", _hoisted_1$q, [
    (openBlock(), createBlock(resolveDynamicComponent(_ctx.headerTag), {
      id: _ctx.headerId,
      class: normalizeClass(["dropdown-header", [_ctx.classes, _ctx.headerClasses]]),
      role: _ctx.headerRole
    }, {
      default: withCtx(() => [
        renderSlot(_ctx.$slots, "header", {}, () => [
          createTextVNode(toDisplayString(_ctx.header), 1)
        ])
      ]),
      _: 3
    }, 8, ["id", "class", "role"])),
    createElementVNode("ul", mergeProps({
      id: _ctx.id,
      role: "group",
      class: "list-unstyled"
    }, _ctx.$attrs, {
      "aria-describedby": _ctx.ariaDescribedby || _ctx.headerId
    }), [
      renderSlot(_ctx.$slots, "default")
    ], 16, _hoisted_2$d)
  ]);
}
var BDropdownGroup = /* @__PURE__ */ _export_sfc(_sfc_main$W, [["render", _sfc_render$D]]);
const _sfc_main$V = {};
const _hoisted_1$p = { class: "dropdown-header" };
function _sfc_render$C(_ctx, _cache) {
  return openBlock(), createElementBlock("li", null, [
    createElementVNode("h6", _hoisted_1$p, [
      renderSlot(_ctx.$slots, "default")
    ])
  ]);
}
var BDropdownHeader = /* @__PURE__ */ _export_sfc(_sfc_main$V, [["render", _sfc_render$C]]);
const _sfc_main$U = defineComponent({
  name: "BDropdownItem",
  inheritAttrs: false,
  props: {
    active: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    href: { type: String },
    linkClass: { type: [Array, Object, String] },
    rel: { type: String, default: null },
    target: { type: String, default: "_self" },
    variant: { type: String, default: null }
  },
  emits: ["click"],
  setup(props, { attrs }) {
    const classes = computed(() => ({
      active: props.active,
      disabled: props.disabled,
      [`text-${props.variant}`]: props.variant
    }));
    const tag = computed(() => props.href ? "a" : attrs.to ? "b-link" : "button");
    const componentAttrs = computed(() => __spreadValues({
      "aria-current": props.active ? "true" : null,
      "href": tag.value === "a" ? props.href : null,
      "rel": props.rel,
      "type": tag.value === "button" ? "button" : null,
      "target": props.target
    }, attrs.to ? __spreadValues({ activeClass: "active" }, attrs) : {}));
    return {
      classes,
      tag,
      componentAttrs
    };
  }
});
const _hoisted_1$o = { role: "presentation" };
function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("li", _hoisted_1$o, [
    (openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({
      class: ["dropdown-item", [_ctx.classes, _ctx.linkClass]]
    }, _ctx.componentAttrs, {
      onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("click", $event))
    }), {
      default: withCtx(() => [
        renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
    }, 16, ["class"]))
  ]);
}
var BDropdownItem = /* @__PURE__ */ _export_sfc(_sfc_main$U, [["render", _sfc_render$B]]);
const _sfc_main$T = defineComponent({
  name: "BDropdownItemButton",
  inheritAttrs: false,
  props: {
    active: { type: Boolean, default: false },
    activeClass: { type: String, default: "active" },
    buttonClass: { type: [String, Array, Object] },
    disabled: { type: Boolean, default: false },
    variant: { type: String, default: null }
  },
  emits: ["click"],
  setup(props) {
    const classes = computed(() => ({
      [props.activeClass]: props.active,
      disabled: props.disabled,
      [`text-${props.variant}`]: props.variant
    }));
    const attrs = computed(() => ({
      role: "menuitem",
      type: "button",
      disabled: props.disabled
    }));
    return {
      classes,
      attrs
    };
  }
});
const _hoisted_1$n = { role: "presentation" };
function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("li", _hoisted_1$n, [
    createElementVNode("button", mergeProps({
      class: ["dropdown-item", [_ctx.classes, _ctx.buttonClass]]
    }, _ctx.attrs, {
      onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("click", $event))
    }), [
      renderSlot(_ctx.$slots, "default")
    ], 16)
  ]);
}
var BDropdownItemButton = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["render", _sfc_render$A]]);
const _sfc_main$S = defineComponent({
  name: "BDropdownText"
});
const _hoisted_1$m = { role: "presentation" };
const _hoisted_2$c = { class: "px-4 py-1 mb-0 text-muted" };
function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("li", _hoisted_1$m, [
    createElementVNode("p", _hoisted_2$c, [
      renderSlot(_ctx.$slots, "default")
    ])
  ]);
}
var BDropdownText = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["render", _sfc_render$z]]);
const _sfc_main$R = defineComponent({
  name: "BForm",
  props: {
    id: { type: String, required: false },
    floating: { type: Boolean, default: false },
    novalidate: { type: Boolean, default: false },
    validated: { type: Boolean, default: false }
  },
  emits: ["submit"],
  setup(props) {
    const classes = computed(() => ({
      "form-floating": props.floating,
      "was-validated": props.validated
    }));
    return {
      classes
    };
  }
});
const _hoisted_1$l = ["id", "novalidate"];
function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("form", {
    id: _ctx.id,
    novalidate: _ctx.novalidate,
    class: normalizeClass(_ctx.classes),
    onSubmit: _cache[0] || (_cache[0] = withModifiers(($event) => _ctx.$emit("submit", $event), ["prevent"]))
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 42, _hoisted_1$l);
}
var BForm = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["render", _sfc_render$y]]);
const _getComputedAriaInvalid = (props) => computed(() => {
  if (props.ariaInvalid === true || props.ariaInvalid === "true" || props.ariaInvalid === "") {
    return "true";
  }
  const computedState = typeof props.state === "boolean" ? props.state : null;
  return computedState === false ? "true" : props.ariaInvalid;
});
const getClasses = (props) => computed(() => ({
  "form-check": !props.plain && !props.button,
  "form-check-inline": props.inline,
  "form-switch": props.switch,
  [`form-control-${props.size}`]: props.size && props.size !== "md"
}));
const getInputClasses = (props) => computed(() => ({
  "form-check-input": !props.plain && !props.button,
  "is-valid": props.state === true,
  "is-invalid": props.state === false,
  "btn-check": props.button
}));
const getLabelClasses = (props) => computed(() => ({
  "form-check-label": !props.plain && !props.button,
  "btn": props.button,
  [`btn-${props.buttonVariant}`]: props.button,
  [`btn-${props.size}`]: props.button && props.size && props.size !== "md"
}));
const getGroupAttr = (props) => computed(() => ({
  "aria-invalid": _getComputedAriaInvalid(props).value,
  "aria-required": props.required.toString() === "true" ? "true" : null
}));
const getGroupClasses = (props) => computed(() => ({
  "was-validated": props.validated,
  "btn-group": props.buttons && !props.stacked,
  "btn-group-vertical": props.stacked,
  [`btn-group-${props.size}`]: props.size
}));
const slotsToElements = (slots, nodeType, disabled) => slots.filter((e) => e.type.name === nodeType).map((e) => {
  const txtChild = (e.children.default ? e.children.default() : []).find((e2) => e2.type.toString() === "Symbol(Text)");
  return {
    props: __spreadValues({
      disabled
    }, e.props),
    text: txtChild ? txtChild.children : ""
  };
});
const optionToElement = (option, props) => {
  if (typeof option === "string") {
    return {
      props: {
        value: option,
        disabled: props.disabled
      },
      text: option
    };
  }
  return {
    props: __spreadValues({
      value: option[props.valueField],
      disabled: props.disabled || option[props.disabledField]
    }, option.props),
    text: option[props.textField],
    html: option[props.htmlField]
  };
};
const bindGroupProps = (el, idx, props, computedName, computedId) => __spreadProps(__spreadValues({}, el), {
  props: __spreadValues({
    "button-variant": props.buttonVariant,
    "form": props.form,
    "name": computedName.value,
    "id": `${computedId.value}_option_${idx}`,
    "button": props.buttons,
    "state": props.state,
    "plain": props.plain,
    "size": props.size,
    "inline": !props.stacked,
    "required": props.required
  }, el.props)
});
const _sfc_main$Q = defineComponent({
  name: "BFormCheckbox",
  inheritAttrs: false,
  props: {
    id: { type: String, default: void 0 },
    ariaLabel: { type: String },
    ariaLabelledBy: { type: String },
    autofocus: { type: Boolean, default: false },
    plain: { type: Boolean, default: false },
    button: { type: Boolean, default: false },
    switch: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    buttonVariant: { type: String, default: "secondary" },
    form: { type: String },
    indeterminate: { type: Boolean },
    inline: { type: Boolean, default: false },
    name: { type: String },
    required: { type: Boolean, default: void 0 },
    size: { type: String, default: "md" },
    state: { type: Boolean, default: null },
    uncheckedValue: { type: [Boolean, String, Array, Object, Number], default: false },
    value: { type: [Boolean, String, Array, Object, Number], default: true },
    modelValue: { type: [Boolean, String, Array, Object, Number], default: null }
  },
  emits: ["update:modelValue", "input", "change"],
  setup(props, { emit }) {
    const computedId = useId(props.id, "form-check");
    const input = ref(null);
    const isFocused = ref(false);
    const localValue = computed({
      get: () => {
        if (props.uncheckedValue) {
          if (!Array.isArray(props.modelValue)) {
            return props.modelValue === props.value;
          }
          return props.modelValue.indexOf(props.value) > -1;
        }
        return props.modelValue;
      },
      set: (newValue) => {
        let emitValue = newValue;
        if (!Array.isArray(props.modelValue)) {
          emitValue = newValue ? props.value : props.uncheckedValue;
        } else {
          if (props.uncheckedValue) {
            emitValue = props.modelValue;
            if (newValue) {
              if (emitValue.indexOf(props.uncheckedValue) > -1)
                emitValue.splice(emitValue.indexOf(props.uncheckedValue), 1);
              emitValue.push(props.value);
            } else {
              if (emitValue.indexOf(props.value) > -1)
                emitValue.splice(emitValue.indexOf(props.value), 1);
              emitValue.push(props.uncheckedValue);
            }
          }
        }
        emit("input", emitValue);
        emit("update:modelValue", emitValue);
        emit("change", emitValue);
      }
    });
    const isChecked = computed(() => {
      if (Array.isArray(props.modelValue)) {
        return props.modelValue.indexOf(props.value) > -1;
      }
      return JSON.stringify(props.modelValue) === JSON.stringify(props.value);
    });
    const classes = getClasses(props);
    const inputClasses = getInputClasses(props);
    const labelClasses = getLabelClasses(props);
    if (props.autofocus) {
      onMounted(() => {
        input.value.focus();
      });
    }
    return {
      input,
      computedId,
      classes,
      inputClasses,
      labelClasses,
      localValue,
      isChecked,
      isFocused
    };
  }
});
const _hoisted_1$k = ["id", "disabled", "required", "name", "form", "aria-label", "aria-labelledby", "aria-required", "value", "indeterminate"];
const _hoisted_2$b = ["for"];
function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.classes)
  }, [
    withDirectives(createElementVNode("input", mergeProps({ id: _ctx.computedId }, _ctx.$attrs, {
      ref: "input",
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.localValue = $event),
      class: _ctx.inputClasses,
      type: "checkbox",
      disabled: _ctx.disabled,
      required: _ctx.name && _ctx.required,
      name: _ctx.name,
      form: _ctx.form,
      "aria-label": _ctx.ariaLabel,
      "aria-labelledby": _ctx.ariaLabelledBy,
      "aria-required": _ctx.name && _ctx.required ? "true" : null,
      value: _ctx.value,
      indeterminate: _ctx.indeterminate,
      onFocus: _cache[1] || (_cache[1] = ($event) => _ctx.isFocused = true),
      onBlur: _cache[2] || (_cache[2] = ($event) => _ctx.isFocused = false)
    }), null, 16, _hoisted_1$k), [
      [vModelCheckbox, _ctx.localValue]
    ]),
    _ctx.$slots.default || !_ctx.plain ? (openBlock(), createElementBlock("label", {
      key: 0,
      for: _ctx.computedId,
      class: normalizeClass([_ctx.labelClasses, { active: _ctx.isChecked, focus: _ctx.isFocused }])
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 10, _hoisted_2$b)) : createCommentVNode("", true)
  ], 2);
}
var BFormCheckbox = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["render", _sfc_render$x]]);
const _sfc_main$P = defineComponent({
  name: "BFormCheckboxGroup",
  props: {
    modelValue: { type: Array, default: () => [] },
    ariaInvalid: { type: [Boolean, String], default: null },
    autofocus: { type: Boolean, default: false },
    buttonVariant: { type: String, default: "secondary" },
    buttons: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    disabledField: { type: String, default: "disabled" },
    form: { type: String },
    htmlField: { type: String, default: "html" },
    id: { type: String },
    name: { type: String },
    options: { type: Array, default: () => [] },
    plain: { type: Boolean, default: false },
    required: { type: Boolean, default: false },
    size: { type: String },
    stacked: { type: Boolean, default: false },
    state: { type: Boolean, default: null },
    switches: { type: Boolean, default: false },
    textField: { type: String, default: "text" },
    validated: { type: Boolean, default: false },
    valueField: { type: String, default: "value" }
  },
  emits: ["update:modelValue", "change", "input"],
  setup(props, { emit, slots }) {
    const slotsName = "BFormCheckbox";
    const computedId = useId(props.id, "checkbox");
    const computedName = useId(props.name, "checkbox");
    const localValue = computed({
      get: () => props.modelValue,
      set: (newValue) => {
        if (JSON.stringify(newValue) === JSON.stringify(props.modelValue))
          return;
        emit("input", newValue);
        emit("update:modelValue", newValue);
        emit("change", newValue);
      }
    });
    const checkboxList = computed(() => (slots.first ? slotsToElements(slots.first(), slotsName, props.disabled) : []).concat(props.options.map((e) => optionToElement(e, props))).concat(slots.default ? slotsToElements(slots.default(), slotsName, props.disabled) : []).map((e, idx) => bindGroupProps(e, idx, props, computedName, computedId)).map((e) => __spreadProps(__spreadValues({}, e), {
      props: __spreadValues({
        switch: props.switches
      }, e.props)
    })));
    const attrs = getGroupAttr(props);
    const classes = getGroupClasses(props);
    return {
      attrs,
      classes,
      checkboxList,
      computedId,
      localValue
    };
  }
});
const _hoisted_1$j = ["id"];
const _hoisted_2$a = ["innerHTML"];
const _hoisted_3$5 = ["textContent"];
function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_form_checkbox = resolveComponent("b-form-checkbox");
  return openBlock(), createElementBlock("div", mergeProps(_ctx.attrs, {
    id: _ctx.computedId,
    role: "group",
    class: [_ctx.classes, "bv-no-focus-ring"],
    tabindex: "-1"
  }), [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.checkboxList, (item, key) => {
      return openBlock(), createBlock(_component_b_form_checkbox, mergeProps({
        key,
        modelValue: _ctx.localValue,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.localValue = $event)
      }, item.props), {
        default: withCtx(() => [
          item.html ? (openBlock(), createElementBlock("span", {
            key: 0,
            innerHTML: item.html
          }, null, 8, _hoisted_2$a)) : (openBlock(), createElementBlock("span", {
            key: 1,
            textContent: toDisplayString(item.text)
          }, null, 8, _hoisted_3$5))
        ]),
        _: 2
      }, 1040, ["modelValue"]);
    }), 128))
  ], 16, _hoisted_1$j);
}
var BFormCheckboxGroup = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["render", _sfc_render$w]]);
const _sfc_main$O = defineComponent({
  name: "BFormFloatingLabel",
  props: {
    labelFor: { type: String },
    label: { type: String }
  }
});
const _hoisted_1$i = { class: "form-floating" };
const _hoisted_2$9 = ["for"];
function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1$i, [
    renderSlot(_ctx.$slots, "default"),
    createElementVNode("label", { for: _ctx.labelFor }, toDisplayString(_ctx.label), 9, _hoisted_2$9)
  ]);
}
var BFormFloatingLabel = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["render", _sfc_render$v]]);
const escapeChar = (value) => "\\" + value;
const cssEscape = (value) => {
  value = toString(value);
  const length = value.length;
  const firstCharCode = value.charCodeAt(0);
  return value.split("").reduce((result, char, index) => {
    const charCode = value.charCodeAt(index);
    if (charCode === 0) {
      return result + "\uFFFD";
    }
    if (charCode === 127 || charCode >= 1 && charCode <= 31 || index === 0 && charCode >= 48 && charCode <= 57 || index === 1 && charCode >= 48 && charCode <= 57 && firstCharCode === 45) {
      return result + escapeChar(`${charCode.toString(16)} `);
    }
    if (index === 0 && charCode === 45 && length === 1) {
      return result + escapeChar(char);
    }
    if (charCode >= 128 || charCode === 45 || charCode === 95 || charCode >= 48 && charCode <= 57 || charCode >= 65 && charCode <= 90 || charCode >= 97 && charCode <= 122) {
      return result + char;
    }
    return result + escapeChar(char);
  }, "");
};
const normalizeSlot = (name, scope = {}, $slots = {}) => {
  const names = [name];
  let slot;
  for (let i = 0; i < names.length && !slot; i++) {
    const name2 = names[i];
    slot = $slots[name2];
  }
  return slot && isFunction(slot) ? slot(scope) : slot;
};
const _sfc_main$N = defineComponent({
  name: "BFormValidFeedback",
  props: {
    ariaLive: { type: String, required: false },
    forceShow: { type: Boolean, default: false },
    id: { type: String, required: false },
    role: { type: String, required: false },
    state: { type: Boolean, default: void 0 },
    tag: { type: String, default: "div" },
    tooltip: { type: Boolean, default: false }
  },
  setup(props) {
    const computedShow = computed(() => props.forceShow === true || props.state === true);
    const classes = computed(() => ({
      "d-block": computedShow.value,
      "valid-feedback": !props.tooltip,
      "valid-tooltip": props.tooltip
    }));
    const attrs = computed(() => ({
      "id": props.id || null,
      "role": props.role || null,
      "aria-live": props.ariaLive || null,
      "aria-atomic": props.ariaLive ? "true" : null
    }));
    return {
      attrs,
      classes,
      computedShow
    };
  }
});
function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({ class: _ctx.classes }, _ctx.attrs), {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16, ["class"]);
}
var BFormValidFeedback = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["render", _sfc_render$u]]);
const _sfc_main$M = defineComponent({
  name: "BFormInvalidFeedback",
  props: {
    ariaLive: { type: String, required: false },
    forceShow: { type: Boolean, default: false },
    id: { type: String, required: false },
    role: { type: String, required: false },
    state: { type: Boolean, default: void 0 },
    tag: { type: String, default: "div" },
    tooltip: { type: Boolean, default: false }
  },
  setup(props) {
    const computedShow = computed(() => props.forceShow === true || props.state === false);
    const classes = computed(() => ({
      "d-block": computedShow.value,
      "invalid-feedback": !props.tooltip,
      "invalid-tooltip": props.tooltip
    }));
    const attrs = computed(() => ({
      "id": props.id || null,
      "role": props.role || null,
      "aria-live": props.ariaLive || null,
      "aria-atomic": props.ariaLive ? "true" : null
    }));
    return {
      attrs,
      classes,
      computedShow
    };
  }
});
function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({ class: _ctx.classes }, _ctx.attrs), {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16, ["class"]);
}
var BFormInvalidFeedback = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["render", _sfc_render$t]]);
const _sfc_main$L = defineComponent({
  name: "BFormRow",
  props: {
    tag: { type: String, default: "div" }
  }
});
function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), { class: "row d-flex flex-wrap" }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  });
}
var BFormRow = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["render", _sfc_render$s]]);
const _sfc_main$K = defineComponent({
  name: "BFormText",
  props: {
    id: { type: String, required: false },
    inline: { type: Boolean, default: false },
    tag: { type: String, default: "small" },
    textVariant: { type: String, default: "muted" }
  },
  setup(props) {
    const classes = computed(() => ({
      "form-text": !props.inline,
      [`text-${props.textVariant}`]: props.textVariant
    }));
    const attrs = computed(() => ({
      id: props.id || null
    }));
    return {
      attrs,
      classes
    };
  }
});
function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({ class: _ctx.classes }, _ctx.attrs), {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16, ["class"]);
}
var BFormText = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["render", _sfc_render$r]]);
const INPUTS = ["input", "select", "textarea"];
const INPUT_SELECTOR = INPUTS.map((v) => `${v}:not([disabled])`).join();
const LEGEND_INTERACTIVE_ELEMENTS = [...INPUTS, "a", "button", "label"];
const SLOT_NAME_LABEL = "label";
const SLOT_NAME_INVALID_FEEDBACK = "invalid-feedback";
const SLOT_NAME_VALID_FEEDBACK = "valid-feedback";
const SLOT_NAME_DESCRIPTION = "description";
const SLOT_NAME_DEFAULT$1 = "default";
const _sfc_main$J = defineComponent({
  name: "BFormGroup",
  components: { BCol, BFormInvalidFeedback, BFormRow, BFormText, BFormValidFeedback },
  props: {
    contentCols: { type: [Boolean, String, Number], required: false },
    contentColsLg: { type: [Boolean, String, Number], required: false },
    contentColsMd: { type: [Boolean, String, Number], required: false },
    contentColsSm: { type: [Boolean, String, Number], required: false },
    contentColsXl: { type: [Boolean, String, Number], required: false },
    description: { type: [String], required: false },
    disabled: { type: Boolean, default: false },
    feedbackAriaLive: { type: String, default: "assertive" },
    id: { type: String, required: false },
    invalidFeedback: { type: String, required: false },
    label: { type: String, required: false },
    labelAlign: { type: [Boolean, String, Number], required: false },
    labelAlignLg: { type: [Boolean, String, Number], required: false },
    labelAlignMd: { type: [Boolean, String, Number], required: false },
    labelAlignSm: { type: [Boolean, String, Number], required: false },
    labelAlignXl: { type: [Boolean, String, Number], required: false },
    labelClass: { type: [Array, Object, String], required: false },
    labelCols: { type: [Boolean, String, Number], required: false },
    labelColsLg: { type: [Boolean, String, Number], required: false },
    labelColsMd: { type: [Boolean, String, Number], required: false },
    labelColsSm: { type: [Boolean, String, Number], required: false },
    labelColsXl: { type: [Boolean, String, Number], required: false },
    labelFor: { type: String, required: false },
    labelSize: { type: String, required: false },
    labelSrOnly: { type: Boolean, default: false },
    state: { type: Boolean, default: null },
    tooltip: { type: Boolean, default: false },
    validFeedback: { type: String, required: false },
    validated: { type: Boolean, default: false },
    floating: { type: Boolean, default: false }
  },
  setup(props, { attrs }) {
    const ariaDescribedby = null;
    const breakPoints = ["xs", "sm", "md", "lg", "xl"];
    const getAlignClasses = (props2, prefix) => {
      const alignClasses = breakPoints.reduce((result, breakpoint) => {
        const propValue = props2[suffixPropName(breakpoint, `${prefix}Align`)] || null;
        if (propValue) {
          result.push(["text", breakpoint, propValue].filter((p) => p).join("-"));
        }
        return result;
      }, []);
      return alignClasses;
    };
    const getColProps = (props2, prefix) => {
      const colProps = breakPoints.reduce((result, breakpoint) => {
        let propValue = props2[suffixPropName(breakpoint, `${prefix}Cols`)];
        propValue = propValue === "" ? true : propValue || false;
        if (!isBoolean(propValue) && propValue !== "auto") {
          propValue = stringToInteger(propValue, 0);
          propValue = propValue > 0 ? propValue : false;
        }
        if (propValue) {
          result[breakpoint || (isBoolean(propValue) ? "col" : "cols")] = propValue;
        }
        return result;
      }, {});
      return colProps;
    };
    const content = ref();
    const updateAriaDescribedby = (newValue, oldValue = null) => {
      if (IS_BROWSER && props.labelFor) {
        const $input = select(`#${cssEscape(props.labelFor)}`, content);
        if ($input) {
          const attr = "aria-describedby";
          const newIds = (newValue || "").split(RX_SPACE_SPLIT);
          const oldIds = (oldValue || "").split(RX_SPACE_SPLIT);
          const ids = (getAttr($input, attr) || "").split(RX_SPACE_SPLIT).filter((id) => !arrayIncludes(oldIds, id)).concat(newIds).filter((id, index, ids2) => ids2.indexOf(id) === index).filter((x) => x).join(" ").trim();
          if (ids) {
            setAttr($input, attr, ids);
          } else {
            removeAttr($input, attr);
          }
        }
      }
    };
    const contentColProps = computed(() => getColProps(props, "content"));
    const labelAlignClasses = computed(() => getAlignClasses(props, "label"));
    const labelColProps = computed(() => getColProps(props, "label"));
    const isHorizontal = computed(() => Object.keys(contentColProps.value).length > 0 || Object.keys(labelColProps.value).length > 0);
    const computedState = computed(() => isBoolean(props.state) ? props.state : null);
    const stateClass = computed(() => {
      const state = computedState.value;
      return state === true ? "is-valid" : state === false ? "is-invalid" : null;
    });
    const computedAriaInvalid = computed(() => {
      if (attrs.ariaInvalid === true || attrs.ariaInvalid === "true" || attrs.ariaInvalid === "") {
        return "true";
      }
      return computedState.value === false ? "true" : attrs.ariaInvalid;
    });
    watch(() => ariaDescribedby, (newValue, oldValue) => {
      if (newValue !== oldValue) {
        updateAriaDescribedby(newValue, oldValue);
      }
    });
    onMounted(() => {
      nextTick(() => {
        updateAriaDescribedby(ariaDescribedby);
      });
    });
    const onLegendClick = (event) => {
      if (props.labelFor) {
        return;
      }
      const { target } = event;
      const tagName = target ? target.tagName : "";
      if (LEGEND_INTERACTIVE_ELEMENTS.indexOf(tagName) !== -1) {
        return;
      }
      const inputs = selectAll(INPUT_SELECTOR, content).filter(isVisible);
      if (inputs.length === 1) {
        attemptFocus(inputs[0]);
      }
    };
    return {
      ariaDescribedby,
      computedAriaInvalid,
      contentColProps,
      isHorizontal,
      labelAlignClasses,
      labelColProps,
      onLegendClick,
      stateClass
    };
  },
  render() {
    const props = this.$props;
    const slots = this.$slots;
    const id = useId();
    const isFieldset = !props.labelFor;
    let $label = null;
    const labelContent = normalizeSlot(SLOT_NAME_LABEL, {}, slots) || props.label;
    const labelId = labelContent ? getID("_BV_label_") : null;
    if (labelContent || this.isHorizontal) {
      const labelTag = isFieldset ? "legend" : "label";
      if (props.labelSrOnly) {
        if (labelContent) {
          $label = h(labelTag, {
            class: "visually-hidden",
            id: labelId,
            for: props.labelFor || null
          }, labelContent);
        }
        if (this.isHorizontal) {
          $label = h(BCol, this.labelColProps, { default: () => $label });
        } else {
          $label = h("div", {}, [$label]);
        }
      } else {
        const renderProps = __spreadProps(__spreadValues({
          onClick: isFieldset ? this.onLegendClick : null
        }, this.isHorizontal ? this.labelColProps : {}), {
          tag: this.isHorizontal ? labelTag : null,
          id: labelId,
          for: props.labelFor || null,
          tabIndex: isFieldset ? "-1" : null,
          class: [
            this.isHorizontal ? "col-form-label" : "form-label",
            {
              "bv-no-focus-ring": isFieldset,
              "col-form-label": this.isHorizontal || isFieldset,
              "pt-0": !this.isHorizontal && isFieldset,
              "d-block": !this.isHorizontal && !isFieldset,
              [`col-form-label-${props.labelSize}`]: !!props.labelSize
            },
            this.labelAlignClasses,
            props.labelClass
          ]
        });
        if (this.isHorizontal) {
          $label = h(BCol, renderProps, { default: () => labelContent });
        } else {
          $label = h(labelTag, renderProps, labelContent);
        }
      }
    }
    let $invalidFeedback = null;
    const invalidFeedbackContent = normalizeSlot(SLOT_NAME_INVALID_FEEDBACK, {}, slots) || this.invalidFeedback;
    const invalidFeedbackId = invalidFeedbackContent ? getID("_BV_feedback_invalid_") : null;
    if (invalidFeedbackContent) {
      $invalidFeedback = h(BFormInvalidFeedback, {
        ariaLive: props.feedbackAriaLive,
        id: invalidFeedbackId,
        state: props.state,
        tooltip: props.tooltip,
        tabindex: invalidFeedbackContent ? "-1" : null
      }, { default: () => invalidFeedbackContent });
    }
    let $validFeedback = null;
    const validFeedbackContent = normalizeSlot(SLOT_NAME_VALID_FEEDBACK, {}, slots) || this.validFeedback;
    const validFeedbackId = validFeedbackContent ? getID("_BV_feedback_valid_") : null;
    if (validFeedbackContent) {
      $validFeedback = h(BFormValidFeedback, {
        ariaLive: props.feedbackAriaLive,
        id: validFeedbackId,
        state: props.state,
        tooltip: props.tooltip,
        tabindex: validFeedbackContent ? "-1" : null
      }, { default: () => validFeedbackContent });
    }
    let $description = null;
    const descriptionContent = normalizeSlot(SLOT_NAME_DESCRIPTION, {}, slots) || this.description;
    const descriptionId = descriptionContent ? getID("_BV_description_") : null;
    if (descriptionContent) {
      $description = h(BFormText, {
        id: descriptionId,
        tabindex: "-1"
      }, { default: () => descriptionContent });
    }
    const ariaDescribedby = this.ariaDescribedby = [
      descriptionId,
      props.state === false ? invalidFeedbackId : null,
      props.state === true ? validFeedbackId : null
    ].filter((x) => x).join(" ") || null;
    const contentBlocks = [
      normalizeSlot(SLOT_NAME_DEFAULT$1, { ariaDescribedby, descriptionId, id, labelId }, slots) || "",
      $invalidFeedback,
      $validFeedback,
      $description
    ];
    if (!this.isHorizontal && props.floating)
      contentBlocks.push($label);
    let $content = h("div", {
      ref: "content",
      class: [
        {
          "form-floating": !this.isHorizontal && props.floating
        }
      ]
    }, contentBlocks);
    if (this.isHorizontal) {
      $content = h(BCol, __spreadValues({ ref: "content" }, this.contentColProps), { default: () => contentBlocks });
    }
    const rowProps = {
      "class": [
        "mb-3",
        this.stateClass,
        {
          "was-validated": props.validated
        }
      ],
      "id": useId(props.id).value,
      "disabled": isFieldset ? props.disabled : null,
      "role": isFieldset ? null : "group",
      "aria-invalid": this.computedAriaInvalid,
      "aria-labelledby": isFieldset && this.isHorizontal ? labelId : null
    };
    if (this.isHorizontal && !isFieldset) {
      return h(BFormRow, rowProps, { default: () => [$label, $content] });
    }
    return h(isFieldset ? "fieldset" : "div", rowProps, this.isHorizontal && isFieldset ? [h(BFormRow, {}, { default: () => [$label, $content] })] : this.isHorizontal || !props.floating ? [$label, $content] : [$content]);
  }
});
const COMMON_INPUT_PROPS = {
  ariaInvalid: {
    type: [Boolean, String],
    default: false
  },
  autocomplete: { type: String, required: false },
  autofocus: { type: Boolean, default: false },
  disabled: { type: Boolean, default: false },
  form: { type: String, required: false },
  formatter: { type: Function, required: false },
  id: { type: String, required: false },
  lazy: { type: Boolean, default: false },
  lazyFormatter: { type: Boolean, default: false },
  list: { type: String, required: false },
  modelValue: { type: [String, Number], default: "" },
  name: { type: String, required: false },
  number: { type: Boolean, default: false },
  placeholder: { type: String, required: false },
  plaintext: { type: Boolean, default: false },
  readonly: { type: Boolean, default: false },
  required: { type: Boolean, default: false },
  size: { type: String, required: false },
  state: { type: Boolean, default: null },
  trim: { type: Boolean, default: false }
};
function useFormInput(props, emit) {
  const input = ref();
  let inputValue = null;
  let neverFormatted = true;
  const computedId = useId(props.id, "input");
  const _formatValue = (value, evt, force = false) => {
    value = String(value);
    if (typeof props.formatter === "function" && (!props.lazyFormatter || force)) {
      neverFormatted = false;
      return props.formatter(value, evt);
    }
    return value;
  };
  const _getModelValue = (value) => {
    if (props.trim)
      return value.trim();
    if (props.number)
      return parseFloat(value);
    return value;
  };
  const handleAutofocus = () => {
    nextTick(() => {
      var _a;
      if (props.autofocus)
        (_a = input.value) == null ? void 0 : _a.focus();
    });
  };
  onMounted(handleAutofocus);
  onMounted(() => {
    if (input.value) {
      input.value.value = props.modelValue;
    }
  });
  onActivated(handleAutofocus);
  const computedAriaInvalid = computed(() => {
    if (props.ariaInvalid) {
      return props.ariaInvalid.toString();
    }
    return props.state === false ? "true" : void 0;
  });
  const onInput = (evt) => {
    const { value } = evt.target;
    const formattedValue = _formatValue(value, evt);
    if (formattedValue === false || evt.defaultPrevented) {
      evt.preventDefault();
      return;
    }
    if (props.lazy)
      return;
    emit("input", formattedValue);
    const nextModel = _getModelValue(formattedValue);
    if (props.modelValue !== nextModel) {
      inputValue = value;
      emit("update:modelValue", nextModel);
    }
  };
  const onChange = (evt) => {
    const { value } = evt.target;
    const formattedValue = _formatValue(value, evt);
    if (formattedValue === false || evt.defaultPrevented) {
      evt.preventDefault();
      return;
    }
    if (!props.lazy)
      return;
    inputValue = value;
    emit("update:modelValue", formattedValue);
    const nextModel = _getModelValue(formattedValue);
    if (props.modelValue !== nextModel) {
      emit("change", formattedValue);
    }
  };
  const onBlur = (evt) => {
    emit("blur", evt);
    if (!props.lazy && !props.lazyFormatter)
      return;
    const { value } = evt.target;
    const formattedValue = _formatValue(value, evt, true);
    inputValue = value;
    emit("update:modelValue", formattedValue);
  };
  const focus2 = () => {
    var _a;
    if (!props.disabled)
      (_a = input.value) == null ? void 0 : _a.focus();
  };
  const blur = () => {
    var _a;
    if (!props.disabled) {
      (_a = input.value) == null ? void 0 : _a.blur();
    }
  };
  watch(() => props.modelValue, (newValue) => {
    if (!input.value)
      return;
    input.value.value = inputValue && neverFormatted ? inputValue : newValue;
    inputValue = null;
    neverFormatted = true;
  });
  return {
    input,
    computedId,
    computedAriaInvalid,
    onInput,
    onChange,
    onBlur,
    focus: focus2,
    blur
  };
}
const allowedTypes = [
  "text",
  "number",
  "email",
  "password",
  "search",
  "url",
  "tel",
  "date",
  "time",
  "range",
  "color"
];
const _sfc_main$I = defineComponent({
  name: "BFormInput",
  props: __spreadProps(__spreadValues({}, COMMON_INPUT_PROPS), {
    max: { type: [String, Number], required: false },
    min: { type: [String, Number], required: false },
    step: { type: [String, Number], required: false },
    type: {
      type: String,
      default: "text",
      validator: (value) => allowedTypes.includes(value)
    }
  }),
  emits: ["update:modelValue", "change", "blur", "input"],
  setup(props, { emit }) {
    const classes = computed(() => {
      const isRange = props.type === "range";
      const isColor = props.type === "color";
      return {
        "form-range": isRange,
        "form-control": isColor || !props.plaintext && !isRange,
        "form-control-color": isColor,
        "form-control-plaintext": props.plaintext && !isRange && !isColor,
        [`form-control-${props.size}`]: props.size,
        "is-valid": props.state === true,
        "is-invalid": props.state === false
      };
    });
    const localType = computed(() => allowedTypes.includes(props.type) ? props.type : "text");
    const { input, computedId, computedAriaInvalid, onInput, onChange, onBlur, focus: focus2, blur } = useFormInput(props, emit);
    return {
      classes,
      localType,
      input,
      computedId,
      computedAriaInvalid,
      onInput,
      onChange,
      onBlur,
      focus: focus2,
      blur
    };
  }
});
const _hoisted_1$h = ["id", "name", "form", "type", "disabled", "placeholder", "required", "autocomplete", "readonly", "min", "max", "step", "list", "aria-required", "aria-invalid"];
function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("input", mergeProps({
    id: _ctx.computedId,
    ref: "input",
    class: _ctx.classes,
    name: _ctx.name || void 0,
    form: _ctx.form || void 0,
    type: _ctx.localType,
    disabled: _ctx.disabled,
    placeholder: _ctx.placeholder,
    required: _ctx.required,
    autocomplete: _ctx.autocomplete || void 0,
    readonly: _ctx.readonly || _ctx.plaintext,
    min: _ctx.min,
    max: _ctx.max,
    step: _ctx.step,
    list: _ctx.type !== "password" ? _ctx.list : void 0,
    "aria-required": _ctx.required ? "true" : void 0,
    "aria-invalid": _ctx.computedAriaInvalid
  }, _ctx.$attrs, {
    onInput: _cache[0] || (_cache[0] = ($event) => _ctx.onInput($event)),
    onChange: _cache[1] || (_cache[1] = ($event) => _ctx.onChange($event)),
    onBlur: _cache[2] || (_cache[2] = ($event) => _ctx.onBlur($event))
  }), null, 16, _hoisted_1$h);
}
var BFormInput = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["render", _sfc_render$q]]);
const _sfc_main$H = defineComponent({
  name: "BFormRadio",
  props: {
    ariaLabel: { type: String },
    ariaLabelledBy: { type: String },
    autofocus: { type: Boolean, default: false },
    modelValue: { type: [Boolean, String, Array, Object, Number], default: null },
    plain: { type: Boolean, default: false },
    button: { type: Boolean, default: false },
    switch: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    buttonVariant: { type: String, default: "secondary" },
    form: { type: String },
    id: { type: String },
    inline: { type: Boolean, default: false },
    name: { type: String },
    required: { type: Boolean, default: false },
    size: { type: String },
    state: { type: Boolean, default: null },
    value: { type: [String, Boolean, Object, Number], default: true }
  },
  emits: ["update:modelValue", "change", "input"],
  setup(props, { emit }) {
    const computedId = useId(props.id, "form-check");
    const input = ref(null);
    const isFocused = ref(false);
    const localValue = computed({
      get: () => Array.isArray(props.modelValue) ? props.modelValue[0] : props.modelValue,
      set: (newValue) => {
        const value = newValue ? props.value : false;
        const emitValue = Array.isArray(props.modelValue) ? [value] : value;
        emit("input", emitValue);
        emit("change", emitValue);
        emit("update:modelValue", emitValue);
      }
    });
    const isChecked = computed(() => {
      if (Array.isArray(props.modelValue)) {
        return (props.modelValue || []).find((e) => e === props.value);
      }
      return JSON.stringify(props.modelValue) === JSON.stringify(props.value);
    });
    const classes = getClasses(props);
    const inputClasses = getInputClasses(props);
    const labelClasses = getLabelClasses(props);
    if (props.autofocus) {
      onMounted(() => {
        input.value.focus();
      });
    }
    return {
      localValue,
      computedId,
      classes,
      inputClasses,
      labelClasses,
      isChecked,
      isFocused,
      input
    };
  }
});
const _hoisted_1$g = ["id", "disabled", "required", "name", "form", "aria-label", "aria-labelledby", "value", "aria-required"];
const _hoisted_2$8 = ["for"];
function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.classes)
  }, [
    withDirectives(createElementVNode("input", mergeProps({ id: _ctx.computedId }, _ctx.$attrs, {
      ref: "input",
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.localValue = $event),
      class: _ctx.inputClasses,
      type: "radio",
      disabled: _ctx.disabled,
      required: _ctx.name && _ctx.required,
      name: _ctx.name,
      form: _ctx.form,
      "aria-label": _ctx.ariaLabel,
      "aria-labelledby": _ctx.ariaLabelledBy,
      value: _ctx.value,
      "aria-required": _ctx.name && _ctx.required ? "true" : null,
      onFocus: _cache[1] || (_cache[1] = ($event) => _ctx.isFocused = true),
      onBlur: _cache[2] || (_cache[2] = ($event) => _ctx.isFocused = false)
    }), null, 16, _hoisted_1$g), [
      [vModelRadio, _ctx.localValue]
    ]),
    _ctx.$slots.default || !_ctx.plain ? (openBlock(), createElementBlock("label", {
      key: 0,
      for: _ctx.computedId,
      class: normalizeClass([_ctx.labelClasses, { active: _ctx.isChecked, focus: _ctx.isFocused }])
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 10, _hoisted_2$8)) : createCommentVNode("", true)
  ], 2);
}
var BFormRadio = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["render", _sfc_render$p]]);
const _sfc_main$G = defineComponent({
  name: "BFormRadioGroup",
  props: {
    modelValue: { type: [String, Boolean, Array, Object, Number], default: "" },
    ariaInvalid: { type: [Boolean, String], default: null },
    autofocus: { type: Boolean, default: false },
    buttonVariant: { type: String, default: "secondary" },
    buttons: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    disabledField: { type: String, default: "disabled" },
    form: { type: String },
    htmlField: { type: String, default: "html" },
    id: { type: String },
    name: { type: String },
    options: { type: Array, default: () => [] },
    plain: { type: Boolean, default: false },
    required: { type: Boolean, default: false },
    size: { type: String },
    stacked: { type: Boolean, default: false },
    state: { type: Boolean, default: null },
    textField: { type: String, default: "text" },
    validated: { type: Boolean, default: false },
    valueField: { type: String, default: "value" }
  },
  emits: ["update:modelValue", "input", "change"],
  setup(props, { emit, slots }) {
    const slotsName = "BFormRadio";
    const computedId = useId(props.id, "radio");
    const computedName = useId(props.name, "checkbox");
    const localValue = computed({
      get: () => props.modelValue,
      set: (newValue) => {
        emit("input", newValue);
        emit("update:modelValue", newValue);
        emit("change", newValue);
      }
    });
    const checkboxList = computed(() => (slots.first ? slotsToElements(slots.first(), slotsName, props.disabled) : []).concat(props.options.map((e) => optionToElement(e, props))).concat(slots.default ? slotsToElements(slots.default(), slotsName, props.disabled) : []).map((e, idx) => bindGroupProps(e, idx, props, computedName, computedId)).map((e) => __spreadValues({}, e)));
    const attrs = getGroupAttr(props);
    const classes = getGroupClasses(props);
    return {
      attrs,
      classes,
      checkboxList,
      computedId,
      localValue
    };
  }
});
const _hoisted_1$f = ["id"];
const _hoisted_2$7 = ["innerHTML"];
const _hoisted_3$4 = ["textContent"];
function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_form_radio = resolveComponent("b-form-radio");
  return openBlock(), createElementBlock("div", mergeProps(_ctx.attrs, {
    id: _ctx.computedId,
    role: "radiogroup",
    class: [_ctx.classes, "bv-no-focus-ring"],
    tabindex: "-1"
  }), [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.checkboxList, (item, key) => {
      return openBlock(), createBlock(_component_b_form_radio, mergeProps({
        key,
        modelValue: _ctx.localValue,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.localValue = $event)
      }, item.props), {
        default: withCtx(() => [
          item.html ? (openBlock(), createElementBlock("span", {
            key: 0,
            innerHTML: item.html
          }, null, 8, _hoisted_2$7)) : (openBlock(), createElementBlock("span", {
            key: 1,
            textContent: toDisplayString(item.text)
          }, null, 8, _hoisted_3$4))
        ]),
        _: 2
      }, 1040, ["modelValue"]);
    }), 128))
  ], 16, _hoisted_1$f);
}
var BFormRadioGroup = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["render", _sfc_render$o]]);
const _sfc_main$F = defineComponent({
  name: "BFormSelectOption",
  props: {
    value: { required: true },
    disabled: { type: Boolean, default: false }
  }
});
const _hoisted_1$e = ["value", "disabled"];
function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
  var _a;
  return openBlock(), createElementBlock("option", {
    value: (_a = _ctx.value) != null ? _a : "",
    disabled: _ctx.disabled
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 8, _hoisted_1$e);
}
var BFormSelectOption = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["render", _sfc_render$n]]);
const _getNested = (obj, path) => {
  if (!obj)
    return obj;
  if (path in obj)
    return obj[path];
  const paths = path.split(".");
  return _getNested(obj[paths[0]], paths.splice(1).join("."));
};
const _normalizeOption = (option, key = null, componentName, props) => {
  if (Object.prototype.toString.call(option) === "[object Object]") {
    const value = _getNested(option, props.valueField);
    const text = _getNested(option, props.textField);
    const html = _getNested(option, props.htmlField);
    const disabled = _getNested(option, props.disabledField);
    const options = option[props.optionsField] || null;
    if (options !== null) {
      return {
        label: String(_getNested(option, props.labelField) || text),
        options: normalizeOptions(options, componentName, props)
      };
    }
    return {
      value: typeof value === "undefined" ? key || text : value,
      text: String(typeof text === "undefined" ? key : text),
      html,
      disabled: Boolean(disabled)
    };
  }
  return {
    value: key || option,
    text: String(option),
    disabled: false
  };
};
const normalizeOptions = (options, componentName, props) => {
  if (Array.isArray(options)) {
    return options.map((option) => _normalizeOption(option, null, componentName, props));
  } else if (Object.prototype.toString.call(options) === "[object Object]") {
    console.warn(`[BootstrapVue warn]: ${componentName} - Setting prop "options" to an object is deprecated. Use the array format instead.`);
    return Object.keys(options).map((key) => {
      const el = options[key];
      switch (typeof el) {
        case "object":
          return _normalizeOption(el.text, String(el.value), componentName, props);
        default:
          return _normalizeOption(el, String(key), componentName, props);
      }
    });
  }
  return [];
};
const _sfc_main$E = defineComponent({
  name: "BFormSelectOptionGroup",
  components: { BFormSelectOption },
  props: {
    label: { type: String, required: true },
    disabledField: { type: String, default: "disabled" },
    htmlField: { type: String, default: "html" },
    options: { type: [Array, Object], default: () => [] },
    textField: { type: String, default: "text" },
    valueField: { type: String, default: "value" }
  },
  setup(props) {
    const formOptions = computed(() => normalizeOptions(props.options, "BFormSelectOptionGroup", props));
    return {
      formOptions
    };
  }
});
const _hoisted_1$d = ["label"];
function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_form_select_option = resolveComponent("b-form-select-option");
  return openBlock(), createElementBlock("optgroup", { label: _ctx.label }, [
    renderSlot(_ctx.$slots, "first"),
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.formOptions, (option, index) => {
      return openBlock(), createBlock(_component_b_form_select_option, mergeProps({
        key: `option_${index}`,
        value: option.value,
        disabled: option.disabled
      }, _ctx.$attrs, {
        innerHTML: option.html || option.text
      }), null, 16, ["value", "disabled", "innerHTML"]);
    }), 128)),
    renderSlot(_ctx.$slots, "default")
  ], 8, _hoisted_1$d);
}
var BFormSelectOptionGroup = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["render", _sfc_render$m]]);
const _sfc_main$D = defineComponent({
  name: "BFormSelect",
  components: { BFormSelectOption, BFormSelectOptionGroup },
  props: {
    ariaInvalid: {
      type: [Boolean, String],
      default: false
    },
    autofocus: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    disabledField: { type: String, default: "disabled" },
    form: { type: String, required: false },
    htmlField: { type: String, default: "html" },
    id: { type: String, required: false },
    labelField: { type: String, default: "label" },
    multiple: { type: Boolean, default: false },
    name: { type: String, required: false },
    options: { type: [Array, Object], default: () => [] },
    optionsField: { type: String, default: "options" },
    plain: { type: Boolean, default: false },
    required: { type: Boolean, default: false },
    selectSize: { type: Number, default: 0 },
    size: { type: String, required: false },
    state: {
      type: Boolean,
      default: null
    },
    textField: { type: String, default: "text" },
    valueField: { type: String, default: "value" },
    modelValue: { type: [String, Array, Object, Number], default: "" }
  },
  emits: ["update:modelValue", "change", "input"],
  setup(props, { emit }) {
    const input = ref();
    const computedId = useId(props.id, "input");
    const handleAutofocus = () => {
      nextTick(() => {
        var _a;
        if (props.autofocus)
          (_a = input.value) == null ? void 0 : _a.focus();
      });
    };
    onMounted(handleAutofocus);
    onActivated(handleAutofocus);
    const classes = computed(() => ({
      "form-control": props.plain,
      [`form-control-${props.size}`]: props.size && props.plain,
      "form-select": !props.plain,
      [`form-select-${props.size}`]: props.size && !props.plain,
      "is-valid": props.state === true,
      "is-invalid": props.state === false
    }));
    const computedSelectSize = computed(() => {
      if (props.selectSize || props.plain) {
        return props.selectSize;
      }
      return null;
    });
    const computedAriaInvalid = computed(() => {
      if (props.ariaInvalid) {
        return props.ariaInvalid.toString();
      }
      return props.state === false ? "true" : null;
    });
    const formOptions = computed(() => normalizeOptions(props.options, "BFormSelect", props));
    const localValue = computed({
      get() {
        return props.modelValue;
      },
      set(newValue) {
        emit("change", newValue);
        emit("update:modelValue", newValue);
        emit("input", newValue);
      }
    });
    const focus2 = () => {
      var _a;
      if (!props.disabled)
        (_a = input.value) == null ? void 0 : _a.focus();
    };
    const blur = () => {
      var _a;
      if (!props.disabled) {
        (_a = input.value) == null ? void 0 : _a.blur();
      }
    };
    return {
      input,
      computedId,
      computedSelectSize,
      computedAriaInvalid,
      classes,
      formOptions,
      localValue,
      focus: focus2,
      blur
    };
  }
});
const _hoisted_1$c = ["id", "name", "form", "multiple", "size", "disabled", "required", "aria-required", "aria-invalid"];
function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_form_select_option_group = resolveComponent("b-form-select-option-group");
  const _component_b_form_select_option = resolveComponent("b-form-select-option");
  return withDirectives((openBlock(), createElementBlock("select", mergeProps({
    id: _ctx.computedId,
    ref: "input"
  }, _ctx.$attrs, {
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.localValue = $event),
    class: _ctx.classes,
    name: _ctx.name,
    form: _ctx.form || null,
    multiple: _ctx.multiple || null,
    size: _ctx.computedSelectSize,
    disabled: _ctx.disabled,
    required: _ctx.required,
    "aria-required": _ctx.required ? "true" : null,
    "aria-invalid": _ctx.computedAriaInvalid
  }), [
    renderSlot(_ctx.$slots, "first"),
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.formOptions, (option, index) => {
      return openBlock(), createElementBlock(Fragment, null, [
        Array.isArray(option.options) ? (openBlock(), createBlock(_component_b_form_select_option_group, {
          key: `option_${index}`,
          label: option.label,
          options: option.options
        }, null, 8, ["label", "options"])) : (openBlock(), createBlock(_component_b_form_select_option, {
          key: `option2_${index}`,
          value: option.value,
          disabled: option.disabled,
          innerHTML: option.html || option.text
        }, null, 8, ["value", "disabled", "innerHTML"]))
      ], 64);
    }), 256)),
    renderSlot(_ctx.$slots, "default")
  ], 16, _hoisted_1$c)), [
    [vModelSelect, _ctx.localValue]
  ]);
}
var BFormSelect = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["render", _sfc_render$l]]);
const _hoisted_1$b = ["id"];
const _hoisted_2$6 = ["aria-label", "aria-controls", "aria-describedby"];
const _sfc_main$C = /* @__PURE__ */ defineComponent({
  props: {
    disabled: { type: Boolean, default: false },
    id: { type: String },
    noRemove: { type: Boolean, default: false },
    pill: { type: Boolean, default: false },
    removeLabel: { type: String, default: "Remove tag" },
    tag: { type: String, default: "span" },
    title: { type: String },
    variant: { type: String, default: "secondary" }
  },
  emits: ["remove"],
  setup(__props) {
    const props = __props;
    const slots = useSlots();
    const tagText = computed(() => {
      var _a;
      return ((_a = slots.default) == null ? void 0 : _a.call(slots)[0].children) || props.title;
    });
    const computedId = useId(props.id);
    const taglabelId = computed(() => `${computedId.value}taglabel__`);
    const classes = computed(() => [
      `bg-${props.variant}`,
      {
        "text-dark": ["warning", "info", "light"].includes(props.variant),
        "rounded-pill": props.pill,
        "disabled": props.disabled
      }
    ]);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(__props.tag), {
        id: unref(computedId),
        title: unref(tagText),
        class: normalizeClass(["badge b-form-tag d-inline-flex align-items-center mw-100", unref(classes)]),
        "aria-labelledby": unref(taglabelId)
      }, {
        default: withCtx(() => [
          createElementVNode("span", {
            id: unref(taglabelId),
            class: "b-form-tag-content flex-grow-1 text-truncate"
          }, [
            renderSlot(_ctx.$slots, "default", {}, () => [
              createTextVNode(toDisplayString(unref(tagText)), 1)
            ])
          ], 8, _hoisted_1$b),
          !__props.disabled && !__props.noRemove ? (openBlock(), createElementBlock("button", {
            key: 0,
            "aria-keyshortcuts": "Delete",
            type: "button",
            "aria-label": __props.removeLabel,
            class: normalizeClass(["btn-close b-form-tag-remove", {
              "btn-close-white": !["warning", "info", "light"].includes(__props.variant)
            }]),
            "aria-controls": __props.id,
            "aria-describedby": unref(taglabelId),
            onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("remove", unref(tagText)))
          }, null, 10, _hoisted_2$6)) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["id", "title", "class", "aria-labelledby"]);
    };
  }
});
const _hoisted_1$a = ["id"];
const _hoisted_2$5 = ["id", "for", "aria-live"];
const _hoisted_3$3 = ["id", "aria-live"];
const _hoisted_4$2 = ["id"];
const _hoisted_5$2 = ["aria-controls"];
const _hoisted_6$1 = {
  role: "group",
  class: "d-flex"
};
const _hoisted_7 = ["id", "disabled", "value", "type", "placeholder", "form", "required"];
const _hoisted_8 = ["disabled"];
const _hoisted_9 = {
  "aria-live": "polite",
  "aria-atomic": "true"
};
const _hoisted_10 = {
  key: 0,
  class: "d-block invalid-feedback"
};
const _hoisted_11 = {
  key: 1,
  class: "form-text text-muted"
};
const _hoisted_12 = {
  key: 2,
  class: "form-text text-muted"
};
const _hoisted_13 = ["name", "value"];
const _sfc_main$B = /* @__PURE__ */ defineComponent({
  props: {
    addButtonText: { type: String, default: "Add" },
    addButtonVariant: { type: String, default: "outline-secondary" },
    addOnChange: { type: Boolean, default: false },
    autofocus: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    duplicateTagText: { type: String, default: "Duplicate tag(s)" },
    inputAttrs: { type: Object },
    inputClass: { type: [Array, Object, String] },
    inputId: { type: String },
    inputType: { type: String, default: "text" },
    invalidTagText: { type: String, default: "Invalid tag(s)" },
    form: { type: String },
    limit: { type: Number },
    limitTagsText: { type: String, default: "Tag limit reached" },
    modelValue: { type: Array, default: () => [] },
    name: { type: String },
    noAddOnEnter: { type: Boolean, default: false },
    noOuterFocus: { type: Boolean, default: false },
    noTagRemove: { type: Boolean, default: false },
    placeholder: { type: String, default: "Add tag..." },
    removeOnDelete: { type: Boolean, default: false },
    required: { type: Boolean, default: false },
    separator: { type: [String, Array] },
    state: { type: Boolean, default: null },
    size: { type: String },
    tagClass: { type: [String, Array, Object] },
    tagPills: { type: Boolean, default: false },
    tagRemoveLabel: { type: String },
    tagRemovedLabel: { type: String, default: "Tag removed" },
    tagValidator: { type: Function, default: () => true },
    tagVariant: { type: String, default: "secondary" }
  },
  emits: [
    "update:modelValue",
    "input",
    "tag-state",
    "focus",
    "focusin",
    "focusout",
    "blur"
  ],
  setup(__props, { emit }) {
    const props = __props;
    const input = ref(null);
    const computedId = useId();
    const _inputId = computed(() => props.inputId || `${computedId.value}input__`);
    onMounted(() => {
      checkAutofocus();
      if (props.modelValue.length > 0) {
        shouldRemoveOnDelete.value = true;
      }
    });
    onActivated(() => checkAutofocus());
    watch(() => props.modelValue, (newVal) => {
      tags.value = newVal;
    });
    const tags = ref(props.modelValue);
    const inputValue = ref("");
    const shouldRemoveOnDelete = ref(false);
    const focus2 = ref(false);
    const lastRemovedTag = ref("");
    const validTags = ref([]);
    const invalidTags = ref([]);
    const duplicateTags = ref([]);
    const classes = computed(() => ({
      [`form-control-${props.size}`]: props.size,
      "disabled": props.disabled,
      "focus": focus2.value,
      "is-invalid": props.state === false,
      "is-valid": props.state === true
    }));
    const isDuplicate = computed(() => tags.value.includes(inputValue.value));
    const isInvalid = computed(() => inputValue.value === "" ? false : !props.tagValidator(inputValue.value));
    const isLimitReached = computed(() => tags.value.length === props.limit);
    const disableAddButton = computed(() => !isInvalid.value && !isDuplicate.value);
    function checkAutofocus() {
      var _a;
      if (props.autofocus) {
        (_a = input.value) == null ? void 0 : _a.focus();
      }
    }
    function onFocusin(e) {
      if (props.disabled) {
        const target = e.target;
        target.blur();
        return;
      }
      emit("focusin", e);
    }
    function onFocus(e) {
      if (props.disabled || props.noOuterFocus) {
        return;
      }
      focus2.value = true;
      emit("focus", e);
    }
    function onBlur(e) {
      focus2.value = false;
      emit("blur", e);
    }
    function onInput(e) {
      var _a, _b;
      const value = typeof e === "string" ? e : e.target.value;
      shouldRemoveOnDelete.value = false;
      if (((_a = props.separator) == null ? void 0 : _a.includes(value.charAt(0))) && value.length > 0) {
        if (input.value) {
          input.value.value = "";
        }
        return;
      }
      inputValue.value = value;
      if ((_b = props.separator) == null ? void 0 : _b.includes(value.charAt(value.length - 1))) {
        addTag(value.slice(0, value.length - 1));
        return;
      }
      validTags.value = props.tagValidator(value) && !isDuplicate.value ? [value] : [];
      invalidTags.value = props.tagValidator(value) ? [] : [value];
      duplicateTags.value = isDuplicate.value ? [value] : [];
      emit("tag-state", validTags, invalidTags, duplicateTags);
    }
    function onChange(e) {
      if (props.addOnChange) {
        onInput(e);
        if (!isDuplicate.value) {
          addTag(inputValue.value);
        }
      }
    }
    function onKeydown(e) {
      if (e.key === "Enter" && !props.noAddOnEnter) {
        addTag(inputValue.value);
        return;
      }
      if ((e.key === "Backspace" || e.key === "Delete") && props.removeOnDelete && inputValue.value === "" && shouldRemoveOnDelete.value && tags.value.length > 0) {
        removeTag(tags.value[tags.value.length - 1]);
      } else {
        shouldRemoveOnDelete.value = true;
      }
    }
    function addTag(tag) {
      var _a;
      tag = (tag || inputValue.value).trim();
      if (tag === "" || isDuplicate.value || !props.tagValidator(tag) || props.limit && isLimitReached.value) {
        return;
      }
      const newValue = [...props.modelValue, tag];
      inputValue.value = "";
      shouldRemoveOnDelete.value = true;
      emit("update:modelValue", newValue);
      emit("input", newValue);
      (_a = input.value) == null ? void 0 : _a.focus();
    }
    function removeTag(tag) {
      const tagIndex = tags.value.indexOf(tag);
      lastRemovedTag.value = tags.value.splice(tagIndex, 1).toString();
      emit("update:modelValue", tags.value);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        id: unref(computedId),
        class: normalizeClass(["b-form-tags form-control h-auto", unref(classes)]),
        role: "group",
        tabindex: "-1",
        onFocusin,
        onFocusout: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("focusout", $event))
      }, [
        createElementVNode("output", {
          id: `${unref(computedId)}selected_tags__`,
          class: "visually-hidden",
          role: "status",
          for: unref(_inputId),
          "aria-live": focus2.value ? "polite" : "off",
          "aria-atomic": "true",
          "aria-relevant": "additions text"
        }, toDisplayString(tags.value.join(", ")), 9, _hoisted_2$5),
        createElementVNode("div", {
          id: `${unref(computedId)}removed_tags__`,
          role: "status",
          "aria-live": focus2.value ? "assertive" : "off",
          "aria-atomic": "true",
          class: "visually-hidden"
        }, " (" + toDisplayString(__props.tagRemovedLabel) + ") " + toDisplayString(lastRemovedTag.value), 9, _hoisted_3$3),
        renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({
          addButtonText: __props.addButtonText,
          addButtonVariant: __props.addButtonVariant,
          addTag,
          disableAddButton: unref(disableAddButton),
          disabled: __props.disabled,
          duplicateTagText: __props.duplicateTagText,
          duplicateTags: duplicateTags.value,
          form: __props.form,
          inputAttrs: __spreadProps(__spreadValues({}, __props.inputAttrs), {
            disabled: __props.disabled,
            form: __props.form,
            id: unref(_inputId),
            value: inputValue.value
          }),
          inputHandlers: {
            input: onInput,
            keydown: onKeydown,
            change: onChange
          },
          inputId: unref(_inputId),
          inputType: __props.inputType,
          invalidTagText: __props.invalidTagText,
          invalidTags: invalidTags.value,
          isDuplicate: unref(isDuplicate),
          isInvalid: unref(isInvalid),
          isLimitReached: unref(isLimitReached),
          limitTagsText: __props.limitTagsText,
          limit: __props.limit,
          noTagRemove: __props.noTagRemove,
          placeholder: __props.placeholder,
          removeTag,
          required: __props.required,
          separator: __props.separator,
          size: __props.size,
          state: __props.state,
          tagClass: __props.tagClass,
          tagPills: __props.tagPills,
          tagRemoveLabel: __props.tagRemoveLabel,
          tagVariant: __props.tagVariant,
          tags: tags.value
        })), () => [
          createElementVNode("ul", {
            id: `${unref(computedId)}tag_list__`,
            class: "b-form-tags-list list-unstyled mb-0 d-flex flex-wrap align-items-center"
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(tags.value, (tag) => {
              return openBlock(), createBlock(_sfc_main$C, {
                key: tag,
                class: normalizeClass(__props.tagClass),
                tag: "li",
                variant: __props.tagVariant,
                pill: __props.tagPills,
                onRemove: removeTag
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(tag), 1)
                ]),
                _: 2
              }, 1032, ["class", "variant", "pill"]);
            }), 128)),
            createElementVNode("li", {
              role: "none",
              "aria-live": "off",
              class: "b-from-tags-field flex-grow-1",
              "aria-controls": `${unref(computedId)}tag_list__`
            }, [
              createElementVNode("div", _hoisted_6$1, [
                createElementVNode("input", mergeProps({
                  id: unref(_inputId),
                  ref_key: "input",
                  ref: input,
                  disabled: __props.disabled,
                  value: inputValue.value,
                  type: __props.inputType,
                  placeholder: __props.placeholder,
                  class: "b-form-tags-input w-100 flex-grow-1 p-0 m-0 bg-transparent border-0",
                  style: { "outline": "currentcolor none 0px", "min-width": "5rem" }
                }, __props.inputAttrs, {
                  form: __props.form,
                  required: __props.required,
                  onInput,
                  onChange,
                  onKeydown,
                  onFocus,
                  onBlur
                }), null, 16, _hoisted_7),
                unref(disableAddButton) ? (openBlock(), createElementBlock("button", {
                  key: 0,
                  type: "button",
                  class: normalizeClass(["btn b-form-tags-button py-0", [
                    `btn-${__props.addButtonVariant}`,
                    {
                      "disabled invisible": inputValue.value.length === 0
                    },
                    __props.inputClass
                  ]]),
                  style: { "font-size": "90%" },
                  disabled: __props.disabled || inputValue.value.length === 0 || unref(isLimitReached),
                  onClick: _cache[0] || (_cache[0] = ($event) => addTag(inputValue.value))
                }, [
                  renderSlot(_ctx.$slots, "add-button-text", {}, () => [
                    createTextVNode(toDisplayString(__props.addButtonText), 1)
                  ])
                ], 10, _hoisted_8)) : createCommentVNode("", true)
              ])
            ], 8, _hoisted_5$2)
          ], 8, _hoisted_4$2),
          createElementVNode("div", _hoisted_9, [
            unref(isInvalid) ? (openBlock(), createElementBlock("div", _hoisted_10, toDisplayString(__props.invalidTagText) + ": " + toDisplayString(inputValue.value), 1)) : createCommentVNode("", true),
            unref(isDuplicate) ? (openBlock(), createElementBlock("small", _hoisted_11, toDisplayString(__props.duplicateTagText) + ": " + toDisplayString(inputValue.value), 1)) : createCommentVNode("", true),
            tags.value.length === __props.limit ? (openBlock(), createElementBlock("small", _hoisted_12, "Tag limit reached")) : createCommentVNode("", true)
          ])
        ]),
        __props.name ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(tags.value, (tag) => {
          return openBlock(), createElementBlock("input", {
            key: tag,
            type: "hidden",
            name: __props.name,
            value: tag
          }, null, 8, _hoisted_13);
        }), 128)) : createCommentVNode("", true)
      ], 42, _hoisted_1$a);
    };
  }
});
const _sfc_main$A = defineComponent({
  name: "BFormTextarea",
  props: __spreadProps(__spreadValues({}, COMMON_INPUT_PROPS), {
    noResize: { type: Boolean, default: false },
    rows: { type: [String, Number], required: false, default: 2 },
    wrap: { type: String, default: "soft" }
  }),
  emits: ["update:modelValue", "change", "blur", "input"],
  setup(props, { emit }) {
    const classes = computed(() => ({
      "form-control": !props.plaintext,
      "form-control-plaintext": props.plaintext,
      [`form-control-${props.size}`]: props.size,
      "is-valid": props.state === true,
      "is-invalid": props.state === false
    }));
    const computedStyles = computed(() => props.noResize ? { resize: "none" } : void 0);
    const { input, computedId, computedAriaInvalid, onInput, onChange, onBlur, focus: focus2, blur } = useFormInput(props, emit);
    return {
      input,
      computedId,
      computedAriaInvalid,
      onInput,
      onChange,
      onBlur,
      focus: focus2,
      blur,
      classes,
      computedStyles
    };
  }
});
const _hoisted_1$9 = ["id", "name", "form", "disabled", "placeholder", "required", "autocomplete", "readonly", "aria-required", "aria-invalid", "rows", "wrap"];
function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("textarea", mergeProps({
    id: _ctx.computedId,
    ref: "input",
    class: _ctx.classes,
    name: _ctx.name || void 0,
    form: _ctx.form || void 0,
    disabled: _ctx.disabled,
    placeholder: _ctx.placeholder,
    required: _ctx.required,
    autocomplete: _ctx.autocomplete || void 0,
    readonly: _ctx.readonly || _ctx.plaintext,
    "aria-required": _ctx.required ? "true" : void 0,
    "aria-invalid": _ctx.computedAriaInvalid,
    rows: _ctx.rows,
    style: _ctx.computedStyles,
    wrap: _ctx.wrap || void 0
  }, _ctx.$attrs, {
    onInput: _cache[0] || (_cache[0] = ($event) => _ctx.onInput($event)),
    onChange: _cache[1] || (_cache[1] = ($event) => _ctx.onChange($event)),
    onBlur: _cache[2] || (_cache[2] = ($event) => _ctx.onBlur($event))
  }), null, 16, _hoisted_1$9);
}
var BFormTextarea = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$k]]);
const BLANK_TEMPLATE = '<svg width="%{w}" height="%{h}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 %{w} %{h}" preserveAspectRatio="none"><rect width="100%" height="100%" style="fill:%{f};"></rect></svg>';
const makeBlankImgSrc = (width, height, color) => {
  const src = encodeURIComponent(BLANK_TEMPLATE.replace("%{w}", String(width)).replace("%{h}", String(height)).replace("%{f}", color));
  return `data:image/svg+xml;charset=UTF-8,${src}`;
};
const _sfc_main$z = defineComponent({
  name: "BImg",
  props: {
    alt: { type: String, default: void 0 },
    blank: { type: Boolean, default: false },
    blankColor: { type: String, default: "transparent" },
    block: { type: Boolean, default: false },
    center: { type: Boolean, default: false },
    fluid: { type: Boolean, default: false },
    fluidGrow: { type: Boolean, default: false },
    height: { type: [Number, String], required: false },
    left: { type: Boolean, default: false },
    right: { type: Boolean, default: false },
    rounded: { type: [Boolean, String], default: false },
    sizes: { type: [String, Array], required: false },
    src: { type: String, required: false },
    srcset: { type: [String, Array], required: false },
    thumbnail: { type: Boolean, default: false },
    width: { type: [Number, String], required: false }
  },
  setup(props) {
    const attrs = computed(() => {
      let src = props.src;
      let width = (typeof props.width === "number" ? props.width : parseInt(props.width, 10)) || null;
      let height = (typeof props.height === "number" ? props.height : parseInt(props.height, 10)) || null;
      let srcset = "";
      if (typeof props.srcset === "string")
        srcset = props.srcset.split(",").filter((x) => x).join(",");
      else if (Array.isArray(props.srcset))
        srcset = props.srcset.filter((x) => x).join(",");
      let sizes = "";
      if (typeof props.sizes === "string")
        sizes = props.sizes.split(",").filter((x) => x).join(",");
      else if (Array.isArray(props.sizes))
        sizes = props.sizes.filter((x) => x).join(",");
      if (props.blank) {
        if (!height && width) {
          height = width;
        } else if (!width && height) {
          width = height;
        }
        if (!width && !height) {
          width = 1;
          height = 1;
        }
        src = makeBlankImgSrc(width, height, props.blankColor || "transparent");
        srcset = "";
        sizes = "";
      }
      return {
        src,
        alt: props.alt,
        width: width || null,
        height: height || null,
        srcset: srcset || null,
        sizes: sizes || null
      };
    });
    const classes = computed(() => {
      let align = "";
      let block = props.block;
      if (props.left) {
        align = "float-start";
      } else if (props.right) {
        align = "float-end";
      } else if (props.center) {
        align = "mx-auto";
        block = true;
      }
      return {
        "img-thumbnail": props.thumbnail,
        "img-fluid": props.fluid || props.fluidGrow,
        "w-100": props.fluidGrow,
        "rounded": props.rounded === "" || props.rounded === true,
        [`rounded-${props.rounded}`]: typeof props.rounded === "string" && props.rounded !== "",
        [align]: !!align,
        "d-block": block
      };
    });
    return {
      attrs,
      classes
    };
  }
});
function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("img", mergeProps({ class: _ctx.classes }, _ctx.attrs), null, 16);
}
var BImg = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$j]]);
const _sfc_main$y = defineComponent({
  name: "BInputGroup",
  props: {
    append: { type: String, required: false },
    appendHtml: { type: String, required: false },
    id: { type: String, required: false },
    prepend: { type: String, required: false },
    prependHtml: { type: String, required: false },
    size: { type: String, required: false },
    tag: { type: String, default: "div" }
  },
  setup(props) {
    const classes = computed(() => ({
      "input-group-sm": props.size === "sm",
      "input-group-lg": props.size === "lg"
    }));
    const hasAppend = computed(() => props.append || props.appendHtml);
    const hasPrepend = computed(() => props.prepend || props.prependHtml);
    const showAppendHtml = computed(() => !!props.appendHtml);
    const showPrependHtml = computed(() => !!props.prependHtml);
    return {
      classes,
      hasAppend,
      hasPrepend,
      showAppendHtml,
      showPrependHtml
    };
  }
});
const _hoisted_1$8 = {
  key: 0,
  class: "input-group-text"
};
const _hoisted_2$4 = { key: 0 };
const _hoisted_3$2 = ["innerHTML"];
const _hoisted_4$1 = {
  key: 0,
  class: "input-group-text"
};
const _hoisted_5$1 = { key: 0 };
const _hoisted_6 = ["innerHTML"];
function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    id: _ctx.id,
    class: normalizeClass(["input-group", _ctx.classes]),
    role: "group"
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "prepend", {}, () => [
        _ctx.hasPrepend ? (openBlock(), createElementBlock("span", _hoisted_1$8, [
          !_ctx.showPrependHtml ? (openBlock(), createElementBlock("span", _hoisted_2$4, toDisplayString(_ctx.prepend), 1)) : createCommentVNode("", true),
          _ctx.showPrependHtml ? (openBlock(), createElementBlock("span", {
            key: 1,
            innerHTML: _ctx.prependHtml
          }, null, 8, _hoisted_3$2)) : createCommentVNode("", true)
        ])) : createCommentVNode("", true)
      ]),
      renderSlot(_ctx.$slots, "default"),
      renderSlot(_ctx.$slots, "append", {}, () => [
        _ctx.hasAppend ? (openBlock(), createElementBlock("span", _hoisted_4$1, [
          !_ctx.showAppendHtml ? (openBlock(), createElementBlock("span", _hoisted_5$1, toDisplayString(_ctx.append), 1)) : createCommentVNode("", true),
          _ctx.showAppendHtml ? (openBlock(), createElementBlock("span", {
            key: 1,
            innerHTML: _ctx.appendHtml
          }, null, 8, _hoisted_6)) : createCommentVNode("", true)
        ])) : createCommentVNode("", true)
      ])
    ]),
    _: 3
  }, 8, ["id", "class"]);
}
var BInputGroup = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$i]]);
const _sfc_main$x = defineComponent({
  name: "BInputGroupText",
  props: {
    tag: { type: String, default: "div" }
  }
});
function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), { class: "input-group-text" }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  });
}
var BInputGroupText = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$h]]);
const _sfc_main$w = defineComponent({
  name: "BInputGroupAddon",
  components: { BInputGroupText },
  props: {
    append: { type: Boolean, default: false },
    id: { type: String, required: false },
    isText: { type: Boolean, default: false },
    tag: { type: String, default: "div" }
  },
  setup(props) {
    const computedClasses = computed(() => ({
      "input-group-append": props.append,
      "input-group-prepend": !props.append
    }));
    return {
      computedClasses
    };
  }
});
function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_input_group_text = resolveComponent("b-input-group-text");
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    id: _ctx.id,
    class: normalizeClass(["d-flex", _ctx.computedClasses])
  }, {
    default: withCtx(() => [
      _ctx.isText ? (openBlock(), createBlock(_component_b_input_group_text, { key: 0 }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      })) : createCommentVNode("", true),
      !_ctx.isText ? renderSlot(_ctx.$slots, "default", { key: 1 }) : createCommentVNode("", true)
    ]),
    _: 3
  }, 8, ["id", "class"]);
}
var BInputGroupAddon = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$g]]);
const _sfc_main$v = defineComponent({
  name: "BInputGroupAppend",
  components: { BInputGroupAddon },
  props: {
    id: { type: String, required: false },
    isText: { type: Boolean, default: false },
    tag: { type: String, default: "div" }
  }
});
function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_input_group_addon = resolveComponent("b-input-group-addon");
  return openBlock(), createBlock(_component_b_input_group_addon, {
    id: _ctx.id,
    "is-text": _ctx.isText,
    tag: _ctx.tag,
    append: ""
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["id", "is-text", "tag"]);
}
var BInputGroupAppend = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$f]]);
const _sfc_main$u = defineComponent({
  name: "BInputGroupPrepend",
  components: { BInputGroupAddon },
  props: {
    id: { type: String, required: false },
    isText: { type: Boolean, default: false },
    tag: { type: String, default: "div" }
  }
});
function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_input_group_addon = resolveComponent("b-input-group-addon");
  return openBlock(), createBlock(_component_b_input_group_addon, {
    id: _ctx.id,
    "is-text": _ctx.isText,
    tag: _ctx.tag,
    append: false
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["id", "is-text", "tag"]);
}
var BInputGroupPrepend = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$e]]);
const injectionKey$2 = Symbol();
const _sfc_main$t = defineComponent({
  name: "BListGroup",
  props: {
    flush: { type: Boolean, default: false },
    horizontal: { type: [Boolean, String], default: false },
    numbered: { type: Boolean, default: false },
    tag: { type: String, default: "div" }
  },
  setup(props) {
    const classes = computed(() => {
      const horizontal = props.flush ? false : props.horizontal;
      return {
        "list-group-flush": props.flush,
        "list-group-horizontal": horizontal === true,
        [`list-group-horizontal-${horizontal}`]: typeof horizontal === "string",
        "list-group-numbered": props.numbered
      };
    });
    const calculateTag = () => props.numbered === true ? "ol" : props.tag;
    const computedTag = ref(calculateTag());
    watch(() => props.tag, () => computedTag.value = calculateTag());
    watch(() => props.numbered, () => computedTag.value = calculateTag());
    provide(injectionKey$2, {
      numbered: props.numbered
    });
    return {
      classes,
      computedTag
    };
  }
});
function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.computedTag), {
    class: normalizeClass(["list-group", _ctx.classes])
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["class"]);
}
var BListGroup = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$d]]);
const ACTION_TAGS = ["a", "router-link", "button", "b-link"];
const _sfc_main$s = defineComponent({
  name: "BListGroupItem",
  props: {
    action: { type: Boolean, default: false },
    active: { type: Boolean, default: false },
    button: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    href: { type: String },
    tag: { type: String, default: "div" },
    target: { type: String, default: "_self" },
    variant: { type: String }
  },
  setup(props, context) {
    const parentData = inject(injectionKey$2, null);
    const link = computed(() => !props.button && props.href);
    const tagComputed = computed(() => (parentData == null ? void 0 : parentData.numbered) ? "li" : props.button ? "button" : !link.value ? props.tag : "a");
    const classes = computed(() => {
      const action = props.action || link.value || props.button || ACTION_TAGS.includes(props.tag);
      return {
        [`list-group-item-${props.variant}`]: props.variant,
        "list-group-item-action": action,
        "active": props.active,
        "disabled": props.disabled
      };
    });
    const attrs = computed(() => {
      const attrs2 = {};
      if (props.button) {
        if (!context.attrs || !context.attrs.type) {
          attrs2.type = "button";
        }
        if (props.disabled) {
          attrs2.disabled = true;
        }
      }
      return attrs2;
    });
    return {
      tagComputed,
      classes,
      attrs,
      link
    };
  }
});
function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tagComputed), mergeProps({
    class: ["list-group-item", _ctx.classes],
    "aria-current": _ctx.active ? true : null,
    "aria-disabled": _ctx.disabled ? true : null,
    target: _ctx.link ? _ctx.target : null,
    href: !_ctx.button ? _ctx.href : null
  }, _ctx.attrs), {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16, ["class", "aria-current", "aria-disabled", "target", "href"]);
}
var BListGroupItem = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$c]]);
const _sfc_main$r = defineComponent({
  name: "BModal",
  components: { BButton },
  inheritAttrs: false,
  props: {
    bodyBgVariant: { type: String, required: false },
    bodyClass: { type: String, required: false },
    bodyTextVariant: { type: String, required: false },
    busy: { type: Boolean, default: false },
    buttonSize: { type: String, default: "md" },
    cancelDisabled: { type: Boolean, default: false },
    cancelTitle: { type: String, default: "Cancel" },
    cancelVariant: { type: String, default: "secondary" },
    centered: { type: Boolean, default: false },
    contentClass: { type: String, required: false },
    dialogClass: { type: String, required: false },
    footerBgVariant: { type: String, required: false },
    footerBorderVariant: { type: String, required: false },
    footerClass: { type: String, required: false },
    footerTextVariant: { type: String, required: false },
    fullscreen: { type: [Boolean, String], default: false },
    headerBgVariant: { type: String, required: false },
    headerBorderVariant: { type: String, required: false },
    headerClass: { type: String, required: false },
    headerCloseLabel: { type: String, default: "Close" },
    headerCloseWhite: { type: Boolean, default: false },
    headerTextVariant: { type: String, required: false },
    hideBackdrop: { type: Boolean, default: false },
    hideFooter: { type: Boolean, default: false },
    hideHeader: { type: Boolean, default: false },
    hideHeaderClose: { type: Boolean, default: false },
    id: { type: String, required: false },
    modalClass: { type: String, required: false },
    modelValue: { type: Boolean, default: false },
    noCloseOnBackdrop: { type: Boolean, default: false },
    noCloseOnEsc: { type: Boolean, default: false },
    noFade: { type: Boolean, default: false },
    noFocus: { type: Boolean, default: false },
    okDisabled: { type: Boolean, default: false },
    okOnly: { type: Boolean, default: false },
    okTitle: { type: String, default: "Ok" },
    okVariant: { type: String, default: "primary" },
    scrollable: { type: Boolean, default: false },
    show: { type: Boolean, default: false },
    size: { type: String, required: false },
    title: { type: String, required: false },
    titleClass: { type: String, required: false },
    titleSrOnly: { type: Boolean, default: false },
    titleTag: { type: String, default: "h5" }
  },
  emits: ["update:modelValue", "show", "shown", "hide", "hidden", "hide-prevented", "ok", "cancel"],
  setup(props, { emit, slots }) {
    const element = ref();
    const instance = ref();
    const modalClasses = computed(() => [
      {
        fade: !props.noFade,
        show: props.show
      },
      props.modalClass
    ]);
    const modalDialogClasses = computed(() => [
      {
        "modal-fullscreen": typeof props.fullscreen === "boolean" ? props.fullscreen : false,
        [`modal-fullscreen-${props.fullscreen}-down`]: typeof props.fullscreen === "string" ? props.fullscreen : false,
        [`modal-${props.size}`]: props.size,
        "modal-dialog-centered": props.centered,
        "modal-dialog-scrollable": props.scrollable
      },
      props.dialogClass
    ]);
    const computedBodyClasses = computed(() => [
      {
        [`bg-${props.bodyBgVariant}`]: props.bodyBgVariant,
        [`text-${props.bodyTextVariant}`]: props.bodyTextVariant
      },
      props.bodyClass
    ]);
    const computedHeaderClasses = computed(() => [
      {
        [`bg-${props.headerBgVariant}`]: props.headerBgVariant,
        [`border-${props.headerBorderVariant}`]: props.headerBorderVariant,
        [`text-${props.headerTextVariant}`]: props.headerTextVariant
      },
      props.headerClass
    ]);
    const computedFooterClasses = computed(() => [
      {
        [`bg-${props.footerBgVariant}`]: props.footerBgVariant,
        [`border-${props.footerBorderVariant}`]: props.footerBorderVariant,
        [`text-${props.footerTextVariant}`]: props.footerTextVariant
      },
      props.footerClass
    ]);
    const computedTitleClasses = computed(() => [
      {
        ["visually-hidden"]: props.titleSrOnly
      },
      props.titleClass
    ]);
    const hasHeaderCloseSlot = computed(() => !!slots["header-close"]);
    const computedCloseButtonClasses = computed(() => [
      {
        [`btn-close-content`]: hasHeaderCloseSlot.value,
        [`d-flex`]: hasHeaderCloseSlot.value,
        [`btn-close-white`]: !hasHeaderCloseSlot.value && props.headerCloseWhite
      }
    ]);
    const disableCancel = computed(() => props.cancelDisabled || props.busy);
    const disableOk = computed(() => props.okDisabled || props.busy);
    useEventListener(element, "shown.bs.modal", (e) => emit("shown", e));
    useEventListener(element, "hidden.bs.modal", (e) => emit("hidden", e));
    useEventListener(element, "hidePrevented.bs.modal", (e) => emit("hide-prevented", e));
    useEventListener(element, "show.bs.modal", (e) => {
      emit("show", e);
      if (!e.defaultPrevented) {
        emit("update:modelValue", true);
      }
    });
    useEventListener(element, "hide.bs.modal", (e) => {
      emit("hide", e);
      if (!e.defaultPrevented) {
        emit("update:modelValue", false);
      }
    });
    onMounted(() => {
      var _a;
      instance.value = new Modal(element.value, {
        backdrop: props.hideBackdrop ? false : props.noCloseOnBackdrop ? "static" : !props.hideBackdrop,
        keyboard: !props.noCloseOnEsc,
        focus: !props.noFocus
      });
      if (props.modelValue) {
        (_a = instance.value) == null ? void 0 : _a.show();
      }
    });
    watch(() => props.modelValue, (value) => {
      var _a, _b;
      if (value) {
        (_a = instance.value) == null ? void 0 : _a.show();
      } else {
        (_b = instance.value) == null ? void 0 : _b.hide();
      }
    });
    return {
      element,
      disableCancel,
      disableOk,
      modalClasses,
      modalDialogClasses,
      computedBodyClasses,
      computedFooterClasses,
      computedHeaderClasses,
      computedTitleClasses,
      computedCloseButtonClasses
    };
  }
});
const _hoisted_1$7 = ["id"];
const _hoisted_2$3 = ["aria-label"];
function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_button = resolveComponent("b-button");
  return openBlock(), createBlock(Teleport, { to: "body" }, [
    createElementVNode("div", mergeProps({
      id: _ctx.id,
      ref: "element",
      class: ["modal", _ctx.modalClasses],
      tabindex: "-1"
    }, _ctx.$attrs), [
      createElementVNode("div", {
        class: normalizeClass(["modal-dialog", _ctx.modalDialogClasses])
      }, [
        createElementVNode("div", {
          class: normalizeClass(["modal-content", _ctx.contentClass])
        }, [
          !_ctx.hideHeader ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(["modal-header", _ctx.computedHeaderClasses])
          }, [
            (openBlock(), createBlock(resolveDynamicComponent(_ctx.titleTag), {
              class: normalizeClass(["modal-title", _ctx.computedTitleClasses])
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "title", {}, () => [
                  createTextVNode(toDisplayString(_ctx.title), 1)
                ])
              ]),
              _: 3
            }, 8, ["class"])),
            !_ctx.hideHeaderClose ? (openBlock(), createElementBlock("button", {
              key: 0,
              type: "button",
              class: normalizeClass(["btn-close", _ctx.computedCloseButtonClasses]),
              "data-bs-dismiss": "modal",
              "aria-label": _ctx.headerCloseLabel
            }, [
              renderSlot(_ctx.$slots, "header-close")
            ], 10, _hoisted_2$3)) : createCommentVNode("", true)
          ], 2)) : createCommentVNode("", true),
          createElementVNode("div", {
            class: normalizeClass(["modal-body", _ctx.computedBodyClasses])
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2),
          !_ctx.hideFooter ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(["modal-footer", _ctx.computedFooterClasses])
          }, [
            renderSlot(_ctx.$slots, "footer", {}, () => [
              !_ctx.okOnly ? (openBlock(), createBlock(_component_b_button, {
                key: 0,
                type: "button",
                class: "btn",
                "data-bs-dismiss": "modal",
                disabled: _ctx.disableCancel,
                size: _ctx.buttonSize,
                variant: _ctx.cancelVariant,
                onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("cancel"))
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(_ctx.cancelTitle), 1)
                ]),
                _: 1
              }, 8, ["disabled", "size", "variant"])) : createCommentVNode("", true),
              createVNode(_component_b_button, {
                type: "button",
                class: "btn",
                "data-bs-dismiss": "modal",
                disabled: _ctx.disableOk,
                size: _ctx.buttonSize,
                variant: _ctx.okVariant,
                onClick: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("ok"))
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(_ctx.okTitle), 1)
                ]),
                _: 1
              }, 8, ["disabled", "size", "variant"])
            ])
          ], 2)) : createCommentVNode("", true)
        ], 2)
      ], 2)
    ], 16, _hoisted_1$7)
  ]);
}
var BModal$1 = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$b]]);
const _sfc_main$q = defineComponent({
  name: "BNav",
  props: {
    align: { type: String },
    fill: { type: Boolean, default: false },
    justified: { type: Boolean, default: false },
    pills: { type: Boolean, default: false },
    tabs: { type: Boolean, default: false },
    vertical: { type: Boolean, default: false }
  },
  setup(props) {
    const classes = computed(() => ({
      "flex-column": props.vertical,
      [`justify-content-${props.align}`]: props.align,
      "nav-tabs": props.tabs,
      "nav-pills": props.pills,
      "nav-fill": props.fill,
      "nav-justified": props.justified
    }));
    return {
      classes
    };
  }
});
function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("ul", {
    class: normalizeClass(["nav", _ctx.classes])
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 2);
}
var BNav = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$a]]);
const _sfc_main$p = defineComponent({
  name: "BNavItem",
  props: {
    active: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    href: { type: String, required: false }
  },
  setup(props) {
    const classes = computed(() => ({
      active: props.active,
      disabled: props.disabled
    }));
    return {
      classes
    };
  }
});
const _hoisted_1$6 = ["href", "tabindex", "aria-disabled"];
function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("li", {
    class: normalizeClass(["nav-item", _ctx.classes])
  }, [
    createElementVNode("a", {
      href: _ctx.href,
      class: "nav-link",
      tabindex: _ctx.disabled ? -1 : null,
      "aria-disabled": _ctx.disabled ? true : null
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 8, _hoisted_1$6)
  ], 2);
}
var BNavItem = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$9]]);
const _sfc_main$o = defineComponent({
  name: "BNavItemDropdown",
  components: {
    BDropdown
  },
  props: {
    autoClose: { type: String, default: "true" },
    id: { type: String },
    dark: { type: Boolean, default: false },
    dropleft: { type: Boolean, default: false },
    dropright: { type: Boolean, default: false },
    dropup: { type: Boolean, default: false },
    right: { type: [Boolean, String], default: false },
    left: { type: [Boolean, String], default: false },
    text: { type: String },
    offset: { type: String },
    offsetParent: { type: Boolean, default: false },
    split: { type: Boolean, default: false },
    splitVariant: { type: String },
    size: { type: String },
    variant: { type: String, default: "link" }
  },
  setup(props) {
    return {
      props
    };
  }
});
const _hoisted_1$5 = { class: "nav-item dropdown" };
function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_dropdown = resolveComponent("b-dropdown");
  return openBlock(), createElementBlock("li", _hoisted_1$5, [
    createVNode(_component_b_dropdown, normalizeProps(guardReactiveProps(_ctx.$props)), createSlots({ _: 2 }, [
      renderList(_ctx.$slots, (_, slot) => {
        return {
          name: slot,
          fn: withCtx((scope) => [
            renderSlot(_ctx.$slots, slot, normalizeProps(guardReactiveProps(scope || {})))
          ])
        };
      })
    ]), 1040)
  ]);
}
var BNavItemDropdown = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$8]]);
const _sfc_main$n = defineComponent({
  name: "BOffcanvas",
  props: {
    modelValue: { type: Boolean, default: false },
    bodyScrolling: { type: Boolean, default: false },
    backdrop: { type: Boolean, default: true },
    placement: { type: String, default: "start" },
    title: { type: String, required: true }
  },
  emits: ["update:modelValue", "show", "shown", "hide", "hidden"],
  setup(props, { emit }) {
    const element = ref();
    const instance = ref();
    useEventListener(element, "shown.bs.offcanvas", () => emit("shown"));
    useEventListener(element, "hidden.bs.offcanvas", () => emit("hidden"));
    useEventListener(element, "show.bs.offcanvas", () => {
      emit("show");
      emit("update:modelValue", true);
    });
    useEventListener(element, "hide.bs.offcanvas", () => {
      emit("hide");
      emit("update:modelValue", false);
    });
    onMounted(() => {
      var _a;
      instance.value = new Offcanvas(element.value);
      if (props.modelValue) {
        (_a = instance.value) == null ? void 0 : _a.show(element.value);
      }
    });
    const classes = computed(() => ({
      [`offcanvas-${props.placement}`]: props.placement
    }));
    watch(() => props.modelValue, (value) => {
      var _a, _b;
      if (value) {
        (_a = instance.value) == null ? void 0 : _a.show(element.value);
      } else {
        (_b = instance.value) == null ? void 0 : _b.hide();
      }
    });
    return {
      element,
      classes
    };
  }
});
const _hoisted_1$4 = ["data-bs-backdrop", "data-bs-scroll"];
const _hoisted_2$2 = { class: "offcanvas-header" };
const _hoisted_3$1 = {
  id: "offcanvasLabel",
  class: "offcanvas-title"
};
const _hoisted_4 = /* @__PURE__ */ createElementVNode("button", {
  type: "button",
  class: "btn-close text-reset",
  "data-bs-dismiss": "offcanvas",
  "aria-label": "Close"
}, null, -1);
const _hoisted_5 = { class: "offcanvas-body" };
function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    ref: "element",
    class: normalizeClass(["offcanvas", _ctx.classes]),
    tabindex: "-1",
    "aria-labelledby": "offcanvasLabel",
    "data-bs-backdrop": _ctx.backdrop,
    "data-bs-scroll": _ctx.bodyScrolling
  }, [
    createElementVNode("div", _hoisted_2$2, [
      createElementVNode("h5", _hoisted_3$1, [
        renderSlot(_ctx.$slots, "title", {}, () => [
          createTextVNode(toDisplayString(_ctx.title), 1)
        ])
      ]),
      _hoisted_4
    ]),
    createElementVNode("div", _hoisted_5, [
      renderSlot(_ctx.$slots, "default")
    ])
  ], 10, _hoisted_1$4);
}
var BOffcanvas = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$7]]);
const NO_FADE_PROPS = {
  name: "",
  enterActiveClass: "",
  enterToClass: "",
  leaveActiveClass: "",
  leaveToClass: "showing",
  enterFromClass: "showing",
  leaveFromClass: ""
};
const FADE_PROPS = __spreadProps(__spreadValues({}, NO_FADE_PROPS), {
  enterActiveClass: "fade showing",
  leaveActiveClass: "fade showing"
});
const _sfc_main$m = defineComponent({
  name: "BTransition",
  props: {
    appear: { type: Boolean, default: false },
    mode: { type: String, required: false },
    noFade: { type: Boolean, default: false },
    transProps: { type: Object, required: false }
  },
  setup(props, { slots }) {
    const transProperties = ref(props.transProps);
    if (!isPlainObject(transProperties.value)) {
      transProperties.value = props.noFade ? NO_FADE_PROPS : FADE_PROPS;
      if (props.appear) {
        transProperties.value = __spreadProps(__spreadValues({}, transProperties.value), {
          appear: true,
          appearClass: transProperties.value.enterClass,
          appearActiveClass: transProperties.value.enterActiveClass,
          appearToClass: transProperties.value.enterToClass
        });
      }
    }
    transProperties.value = __spreadProps(__spreadValues({
      mode: props.mode
    }, transProperties.value), {
      css: true
    });
    return () => h(Transition, __spreadValues({}, transProperties.value), {
      default: () => slots.default ? slots.default() : []
    });
  }
});
const POSITION_COVER = { top: 0, left: 0, bottom: 0, right: 0 };
const SLOT_NAME_DEFAULT = "default";
const SLOT_NAME_OVERLAY = "overlay";
const _sfc_main$l = defineComponent({
  name: "BOverlay",
  components: { BTransition: _sfc_main$m },
  props: {
    bgColor: { type: String, required: false },
    blur: { type: String, default: "2px" },
    fixed: { type: Boolean, default: false },
    noCenter: { type: Boolean, default: false },
    noFade: { type: Boolean, default: false },
    noWrap: { type: Boolean, default: false },
    opacity: {
      type: [Number, String],
      default: 0.85,
      validator: (value) => {
        const number = toFloat(value, 0);
        return number >= 0 && number <= 1;
      }
    },
    overlayTag: { type: String, default: "div" },
    rounded: { type: [Boolean, String], default: false },
    show: { type: Boolean, default: false },
    spinnerSmall: { type: Boolean, default: false },
    spinnerType: { type: String, default: "border" },
    spinnerVariant: { type: String, required: false },
    variant: { type: String, default: "light" },
    wrapTag: { type: String, default: "div" },
    zIndex: { type: [Number, String], default: 10 }
  },
  emits: ["click", "hidden", "shown"],
  setup(props, { slots, emit }) {
    const computedRounded = computed(() => props.rounded === true || props.rounded === "" ? "rounded" : !props.rounded ? "" : `rounded-${props.rounded}`);
    const computedVariant = computed(() => props.variant && !props.bgColor ? `bg-${props.variant}` : "");
    const computedSlotScope = computed(() => ({
      spinnerType: props.spinnerType || null,
      spinnerVariant: props.spinnerVariant || null,
      spinnerSmall: props.spinnerSmall
    }));
    return () => {
      const defaultOverlayFn = (scope) => h(resolveComponent("BSpinner"), {
        type: scope.spinnerType,
        variant: scope.spinnerVariant,
        small: scope.spinnerSmall
      });
      let $overlay = "";
      if (props.show) {
        const $background = h("div", {
          class: ["position-absolute", computedVariant.value, computedRounded.value],
          style: __spreadProps(__spreadValues({}, POSITION_COVER), {
            opacity: props.opacity,
            backgroundColor: props.bgColor || null,
            backdropFilter: props.blur ? `blur(${props.blur})` : null
          })
        });
        const $content = h("div", {
          class: "position-absolute",
          style: props.noCenter ? __spreadValues({}, POSITION_COVER) : { top: "50%", left: "50%", transform: "translateX(-50%) translateY(-50%)" }
        }, normalizeSlot(SLOT_NAME_OVERLAY, computedSlotScope.value, slots) || defaultOverlayFn(computedSlotScope.value) || "");
        $overlay = h(props.overlayTag, {
          class: [
            "b-overlay",
            {
              "position-absolute": !props.noWrap || props.noWrap && !props.fixed,
              "position-fixed": props.noWrap && props.fixed
            }
          ],
          style: __spreadProps(__spreadValues({}, POSITION_COVER), {
            zIndex: props.zIndex || 10
          }),
          onClick: (event) => emit("click", event),
          key: "overlay"
        }, [$background, $content]);
      }
      const getOverlayTransition = () => h(_sfc_main$m, {
        noFade: props.noFade,
        transProps: { enterToClass: "show" },
        name: "fade",
        onAfterEnter: () => emit("shown"),
        onAfterLeave: () => emit("hidden")
      }, { default: () => $overlay });
      if (props.noWrap)
        return getOverlayTransition();
      const wrapper = h(props.wrapTag, {
        "class": ["b-overlay-wrap position-relative"],
        "aria-busy": props.show ? "true" : null
      }, [h("span", normalizeSlot(SLOT_NAME_DEFAULT, {}, slots)), getOverlayTransition()]);
      return wrapper;
    };
  }
});
function alignment(props) {
  return computed(() => {
    if (props.align === "center") {
      return "justify-content-center";
    } else if (props.align === "end") {
      return "justify-content-end";
    } else if (props.align === "start") {
      return "justify-content-start";
    }
    return "justify-content-start";
  });
}
class BvEvent {
  constructor(eventType, eventInit = {}) {
    this.cancelable = true;
    this.componentId = null;
    this.defaultPrevented = false;
    this.nativeEvent = null;
    this.relatedTarget = null;
    this.target = null;
    this.eventType = "";
    this.vueTarget = null;
    if (!eventType) {
      throw new TypeError(`Failed to construct '${this.constructor.name}'. 1 argument required, ${arguments.length} given.`);
    }
    assign(this, BvEvent.Defaults, this.constructor.Defaults, eventInit, { eventType });
    defineProperties(this, {
      type: readonlyDescriptor(),
      cancelable: readonlyDescriptor(),
      nativeEvent: readonlyDescriptor(),
      target: readonlyDescriptor(),
      relatedTarget: readonlyDescriptor(),
      vueTarget: readonlyDescriptor(),
      componentId: readonlyDescriptor()
    });
    let defaultPrevented = false;
    this.preventDefault = function preventDefault() {
      if (this.cancelable) {
        defaultPrevented = true;
      }
    };
    defineProperty(this, "defaultPrevented", {
      enumerable: true,
      get() {
        return defaultPrevented;
      }
    });
  }
  static get Defaults() {
    return {
      eventType: "",
      cancelable: true,
      nativeEvent: null,
      target: null,
      relatedTarget: null,
      vueTarget: null,
      componentId: null
    };
  }
}
const DEFAULT_LIMIT = 5;
const DEFAULT_PER_PAGE = 20;
const DEFAULT_TOTAL_ROWS = 0;
const ELLIPSIS_THRESHOLD = 3;
const SLOT_NAME_ELLIPSIS_TEXT = "ellipsis-text";
const SLOT_NAME_FIRST_TEXT = "first-text";
const SLOT_NAME_LAST_TEXT = "last-text";
const SLOT_NAME_NEXT_TEXT = "next-text";
const SLOT_NAME_PAGE = "page";
const SLOT_NAME_PREV_TEXT = "prev-text";
const sanitizePerPage = (value) => Math.max(toInteger(value) || DEFAULT_PER_PAGE, 1);
const sanitizeTotalRows = (value) => Math.max(toInteger(value) || DEFAULT_TOTAL_ROWS, 0);
const sanitizeCurrentPage = (value, numberOfPages) => {
  const page = toInteger(value) || 1;
  return page > numberOfPages ? numberOfPages : page < 1 ? 1 : page;
};
const _sfc_main$k = defineComponent({
  name: "BPagination",
  props: {
    align: { type: String, default: "start" },
    ariaControls: { type: String, required: false },
    ariaLabel: { type: String, default: "Pagination" },
    disabled: { type: Boolean, default: false },
    ellipsisClass: { type: [Array, String], default: () => [] },
    ellipsisText: { type: String, default: "\u2026" },
    firstClass: { type: [Array, String], default: () => [] },
    firstNumber: { type: Boolean, default: false },
    firstText: { type: String, default: "\xAB" },
    hideEllipsis: { type: Boolean, default: false },
    hideGotoEndButtons: { type: Boolean, default: false },
    labelFirstPage: { type: String, default: "Go to first page" },
    labelLastPage: { type: String, default: "Go to last page" },
    labelNextPage: { type: String, default: "Go to next page" },
    labelPage: { type: String, default: "Go to page" },
    labelPrevPage: { type: String, default: "Go to previous page" },
    lastClass: { type: [Array, String], default: () => [] },
    lastNumber: { type: Boolean, default: false },
    lastText: { type: String, default: "\xBB" },
    limit: { type: Number, default: DEFAULT_LIMIT },
    modelValue: { type: Number, default: 1 },
    nextClass: { type: [Array, String], default: () => [] },
    nextText: { type: String, default: "\u203A" },
    pageClass: { type: [Array, String], default: () => [] },
    perPage: { type: Number, default: DEFAULT_PER_PAGE },
    pills: { type: Boolean, default: false },
    prevClass: { type: [Array, String], default: () => [] },
    prevText: { type: String, default: "\u2039" },
    size: { type: String, required: false },
    totalRows: { type: Number, default: DEFAULT_TOTAL_ROWS }
  },
  emits: ["update:modelValue", "page-click"],
  setup(props, { emit, slots }) {
    const alignment$1 = alignment(props);
    const numberOfPages = computed(() => Math.ceil(sanitizeTotalRows(props.totalRows) / sanitizePerPage(props.perPage)));
    const startNumber = computed(() => {
      let lStartNumber = 1;
      const pagesLeft = numberOfPages.value - props.modelValue;
      if (pagesLeft + 2 < props.limit && props.limit > ELLIPSIS_THRESHOLD) {
        lStartNumber = numberOfPages.value - numberOfLinks.value + 1;
      } else {
        lStartNumber = props.modelValue - Math.floor(numberOfLinks.value / 2);
      }
      if (lStartNumber < 1) {
        lStartNumber = 1;
      } else if (lStartNumber > numberOfPages.value - numberOfLinks.value) {
        lStartNumber = numberOfPages.value - numberOfLinks.value + 1;
      }
      if (props.limit <= ELLIPSIS_THRESHOLD) {
        if (props.lastNumber && numberOfPages.value === lStartNumber + numberOfLinks.value - 1) {
          lStartNumber = Math.max(lStartNumber - 1, 1);
        }
      }
      return lStartNumber;
    });
    const showFirstDots = computed(() => {
      const pagesLeft = numberOfPages.value - props.modelValue;
      let rShowDots = false;
      if (pagesLeft + 2 < props.limit && props.limit > ELLIPSIS_THRESHOLD) {
        if (props.limit > ELLIPSIS_THRESHOLD) {
          rShowDots = true;
        }
      } else {
        if (props.limit > ELLIPSIS_THRESHOLD) {
          rShowDots = !!(!props.hideEllipsis || props.firstNumber);
        }
      }
      if (startNumber.value <= 1) {
        rShowDots = false;
      }
      if (rShowDots && props.firstNumber && startNumber.value < 4) {
        rShowDots = false;
      }
      return rShowDots;
    });
    const numberOfLinks = computed(() => {
      let n = props.limit;
      if (numberOfPages.value <= props.limit) {
        n = numberOfPages.value;
      } else if (props.modelValue < props.limit - 1 && props.limit > ELLIPSIS_THRESHOLD) {
        if (!props.hideEllipsis || props.lastNumber) {
          n = props.limit - (props.firstNumber ? 0 : 1);
        }
        n = Math.min(n, props.limit);
      } else if (numberOfPages.value - props.modelValue + 2 < props.limit && props.limit > ELLIPSIS_THRESHOLD) {
        if (!props.hideEllipsis || props.firstNumber) {
          n = props.limit - (props.lastNumber ? 0 : 1);
        }
      } else {
        if (props.limit > ELLIPSIS_THRESHOLD) {
          n = props.limit - (props.hideEllipsis ? 0 : 2);
        }
      }
      return n;
    });
    computed(() => {
      let n = numberOfLinks.value;
      if (showFirstDots.value && props.firstNumber && startNumber.value < 4) {
        n = n + 2;
      }
      const lastPageNumber = startNumber.value + n - 1;
      if (showLastDots.value && props.lastNumber && lastPageNumber > numberOfPages.value - 3) {
        n = n + (lastPageNumber === numberOfPages.value - 2 ? 2 : 3);
      }
      n = Math.min(n, numberOfPages.value - startNumber.value + 1);
      return n;
    });
    const showLastDots = computed(() => {
      const paginationWindowEnd = numberOfPages.value - numberOfLinks.value;
      let rShowDots = false;
      if (props.modelValue < props.limit - 1 && props.limit > ELLIPSIS_THRESHOLD) {
        if (!props.hideEllipsis || props.lastNumber) {
          rShowDots = true;
        }
      } else {
        if (props.limit > ELLIPSIS_THRESHOLD) {
          rShowDots = !!(!props.hideEllipsis || props.lastNumber);
        }
      }
      if (startNumber.value > paginationWindowEnd) {
        rShowDots = false;
      }
      const lastPageNumber = startNumber.value + numberOfLinks.value - 1;
      if (rShowDots && props.lastNumber && lastPageNumber > numberOfPages.value - 3) {
        rShowDots = false;
      }
      return rShowDots;
    });
    const pagination = reactive({
      pageSize: sanitizePerPage(props.perPage),
      totalRows: sanitizeTotalRows(props.totalRows),
      numberOfPages: numberOfPages.value
    });
    const pageClick = (event, pageNumber) => {
      if (pageNumber === props.modelValue) {
        return;
      }
      const { target } = event;
      const clickEvent = new BvEvent("page-click", {
        cancelable: true,
        vueTarget: this,
        target
      });
      emit("page-click", clickEvent, pageNumber);
      if (clickEvent.defaultPrevented) {
        return;
      }
      emit("update:modelValue", pageNumber);
    };
    const btnSize = computed(() => props.size ? `pagination-${props.size}` : "");
    const styleClass = computed(() => props.pills ? "b-pagination-pills" : "");
    watch(() => props.modelValue, (newValue) => {
      const calculatedValue = sanitizeCurrentPage(newValue, numberOfPages.value);
      if (calculatedValue !== props.modelValue)
        emit("update:modelValue", calculatedValue);
    });
    watch(pagination, (oldValue, newValue) => {
      if (!isUndefinedOrNull(oldValue)) {
        if (newValue.pageSize !== oldValue.pageSize && newValue.totalRows === oldValue.totalRows) {
          emit("update:modelValue", 1);
        } else if (newValue.numberOfPages !== oldValue.numberOfPages && props.modelValue > newValue.numberOfPages) {
          emit("update:modelValue", 1);
        }
      }
    });
    const pages = computed(() => {
      const result = [];
      for (let index = 0; index < numberOfLinks.value; index++) {
        result.push({ number: startNumber.value + index, classes: null });
      }
      return result;
    });
    return () => {
      const buttons = [];
      const pageNumbers = pages.value.map((p) => p.number);
      const isActivePage = (pageNumber) => pageNumber === props.modelValue;
      const noCurrentPage = props.modelValue < 1;
      const fill = props.align === "fill";
      const makeEndBtn = (linkTo, ariaLabel, btnSlot, btnText, btnClass, pageTest) => {
        const isDisabled = props.disabled || isActivePage(pageTest) || noCurrentPage || linkTo < 1 || linkTo > numberOfPages.value;
        const pageNumber = linkTo < 1 ? 1 : linkTo > numberOfPages.value ? numberOfPages.value : linkTo;
        const scope = { disabled: isDisabled, page: pageNumber, index: pageNumber - 1 };
        const btnContent = normalizeSlot(btnSlot, scope, slots) || btnText || "";
        return h("li", {
          class: [
            "page-item",
            {
              "disabled": isDisabled,
              "flex-fill": fill,
              "d-flex": fill && !isDisabled
            },
            btnClass
          ]
        }, h(isDisabled ? "span" : "button", {
          "class": ["page-link", { "flex-grow-1": !isDisabled && fill }],
          "aria-label": ariaLabel,
          "aria-controls": props.ariaControls || null,
          "aria-disabled": isDisabled ? "true" : null,
          "role": "menuitem",
          "type": isDisabled ? null : "button",
          "tabindex": isDisabled ? null : "-1",
          "onClick": (event) => {
            if (isDisabled) {
              return;
            }
            pageClick(event, pageNumber);
          }
        }, btnContent));
      };
      const makeEllipsis = (isLast) => h("li", {
        class: [
          "page-item",
          "disabled",
          "bv-d-xs-down-none",
          fill ? "flex-fill" : "",
          props.ellipsisClass
        ],
        role: "separator",
        key: `ellipsis-${isLast ? "last" : "first"}`
      }, [
        h("span", { class: ["page-link"] }, normalizeSlot(SLOT_NAME_ELLIPSIS_TEXT, {}, slots) || props.ellipsisText || "...")
      ]);
      const makePageButton = (page, idx) => {
        const active = isActivePage(page.number) && !noCurrentPage;
        const tabIndex = props.disabled ? null : active || noCurrentPage && idx === 0 ? "0" : "-1";
        const scope = {
          active,
          disabled: props.disabled,
          page: page.number,
          index: page.number - 1,
          content: page.number
        };
        const btnContent = normalizeSlot(SLOT_NAME_PAGE, scope, slots) || page.number;
        const inner = h(props.disabled ? "span" : "button", {
          "class": ["page-link", { "flex-grow-1": !props.disabled && fill }],
          "aria-controls": props.ariaControls || null,
          "aria-disabled": props.disabled ? "true" : null,
          "aria-label": props.labelPage ? `${props.labelPage} ${page.number}` : null,
          "role": "menuitemradio",
          "type": props.disabled ? null : "button",
          "tabindex": tabIndex,
          "onClick": (event) => {
            if (!props.disabled) {
              pageClick(event, page.number);
            }
          }
        }, btnContent);
        return h("li", {
          class: [
            "page-item",
            {
              "disabled": props.disabled,
              active,
              "flex-fill": fill,
              "d-flex": fill && !props.disabled
            },
            props.pageClass
          ],
          role: "presentation",
          key: `page-${page.number}`
        }, inner);
      };
      if (!props.hideGotoEndButtons && !props.firstNumber) {
        const gotoFirstPageButton = makeEndBtn(1, props.labelFirstPage, SLOT_NAME_FIRST_TEXT, props.firstText, props.firstClass, 1);
        buttons.push(gotoFirstPageButton);
      }
      const previousButton = makeEndBtn(props.modelValue - 1, props.labelFirstPage, SLOT_NAME_PREV_TEXT, props.prevText, props.prevClass, 1);
      buttons.push(previousButton);
      if (props.firstNumber && pageNumbers[0] !== 1) {
        buttons.push(makePageButton({ number: 1 }, 0));
      }
      if (showFirstDots.value) {
        buttons.push(makeEllipsis(false));
      }
      pages.value.forEach((page, idx) => {
        const offset = showFirstDots.value && props.firstNumber && pageNumbers[0] !== 1 ? 1 : 0;
        buttons.push(makePageButton(page, idx + offset));
      });
      if (showLastDots.value) {
        buttons.push(makeEllipsis(true));
      }
      if (props.lastNumber && pageNumbers[pageNumbers.length - 1] !== numberOfPages.value) {
        buttons.push(makePageButton({ number: numberOfPages.value }, -1));
      }
      const nextButton = makeEndBtn(props.modelValue + 1, props.labelNextPage, SLOT_NAME_NEXT_TEXT, props.nextText, props.nextClass, numberOfPages.value);
      buttons.push(nextButton);
      if (!props.lastNumber && !props.hideGotoEndButtons) {
        const gotoLastPageButton = makeEndBtn(numberOfPages.value, props.labelLastPage, SLOT_NAME_LAST_TEXT, props.lastText, props.lastClass, numberOfPages.value);
        buttons.push(gotoLastPageButton);
      }
      const $pagination = h("ul", {
        "class": ["pagination", btnSize.value, alignment$1.value, styleClass.value],
        "role": "menubar",
        "aria-disabled": props.disabled,
        "aria-label": props.ariaLabel || null
      }, buttons);
      return $pagination;
    };
  }
});
const _sfc_main$j = defineComponent({
  name: "BPopover",
  props: {
    container: {
      type: [String, Object],
      default: "body"
    },
    content: { type: String },
    id: { type: String },
    noninteractive: { type: Boolean, default: false },
    placement: { type: String, default: "right" },
    target: {
      type: [String, Object],
      default: void 0
    },
    title: { type: String },
    delay: { type: [Number, Object], default: 0 },
    triggers: { type: String, default: "click" },
    show: { type: Boolean, default: false },
    variant: { type: String, default: void 0 },
    html: { type: Boolean, default: true },
    sanitize: { type: Boolean, default: false }
  },
  emits: ["show", "shown", "hide", "hidden", "inserted"],
  setup(props, { emit, slots }) {
    const element = ref();
    const target = ref();
    const instance = ref();
    const titleRef = ref();
    const contentRef = ref();
    const classes = computed(() => ({
      [`b-popover-${props.variant}`]: props.variant
    }));
    const cleanElementProp = (target2) => {
      if (typeof target2 === "string") {
        return target2;
      } else if (target2 instanceof HTMLElement)
        return target2;
      else if (typeof target2 !== "undefined")
        return target2.$el;
      return void 0;
    };
    const getElement = (element2) => {
      if (!element2)
        return void 0;
      if (typeof element2 === "string") {
        const idElement = document.getElementById(element2);
        return idElement ? idElement : void 0;
      }
      return element2;
    };
    onMounted(() => {
      var _a, _b, _c;
      nextTick(() => {
        target.value = getElement(cleanElementProp(props.target));
        if (target.value)
          instance.value = new Popover(target.value, {
            container: cleanElementProp(props.container),
            trigger: props.triggers,
            placement: props.placement,
            title: props.title || slots.title ? titleRef.value : "",
            content: contentRef.value,
            html: props.html,
            delay: props.delay,
            sanitize: props.sanitize
          });
        else
          console.warn("[B-Popover] Target is a mandatory props.");
      });
      (_b = (_a = element.value) == null ? void 0 : _a.parentNode) == null ? void 0 : _b.removeChild(element.value);
      if (props.show) {
        (_c = instance.value) == null ? void 0 : _c.show();
      }
    });
    watch(() => props.show, (show, oldVal) => {
      var _a, _b;
      if (show !== oldVal) {
        if (show) {
          (_a = instance.value) == null ? void 0 : _a.show();
        } else {
          (_b = instance.value) == null ? void 0 : _b.hide();
        }
      }
    });
    useEventListener(target, "show.bs.popover", () => emit("show"));
    useEventListener(target, "shown.bs.popover", () => emit("shown"));
    useEventListener(target, "hide.bs.popover", () => emit("hide"));
    useEventListener(target, "hidden.bs.popover", () => emit("hidden"));
    useEventListener(target, "inserted.bs.popover", () => emit("inserted"));
    return {
      element,
      titleRef,
      contentRef,
      classes
    };
  }
});
const _hoisted_1$3 = ["id"];
const _hoisted_2$1 = { ref: "titleRef" };
const _hoisted_3 = { ref: "contentRef" };
function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    id: _ctx.id,
    ref: "element",
    class: normalizeClass(["popover b-popover", _ctx.classes]),
    role: "tooltip",
    tabindex: "-1"
  }, [
    createElementVNode("div", _hoisted_2$1, [
      renderSlot(_ctx.$slots, "title", {}, () => [
        createTextVNode(toDisplayString(_ctx.title), 1)
      ])
    ], 512),
    createElementVNode("div", _hoisted_3, [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(_ctx.content), 1)
      ])
    ], 512)
  ], 10, _hoisted_1$3);
}
var BPopover$1 = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$6]]);
const injectionKey$1 = Symbol();
const _sfc_main$i = defineComponent({
  name: "BProgress",
  props: {
    animated: { type: Boolean, default: false },
    max: { type: [Number, String] },
    height: { type: String },
    precision: { type: [Number, String], default: 0 },
    showProgress: { type: Boolean, default: false },
    showValue: { type: Boolean, default: false },
    striped: { type: Boolean, default: false },
    value: { type: [Number, String], default: 0 },
    variant: { type: String }
  },
  setup(props) {
    provide(injectionKey$1, {
      animated: props.animated,
      max: props.max,
      showProgress: props.showProgress,
      showValue: props.showValue,
      striped: props.striped
    });
  }
});
function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_b_progress_bar = resolveComponent("b-progress-bar");
  return openBlock(), createElementBlock("div", {
    class: "progress",
    style: normalizeStyle({ height: _ctx.height })
  }, [
    renderSlot(_ctx.$slots, "default", {}, () => [
      createVNode(_component_b_progress_bar, normalizeProps(guardReactiveProps({
        animated: _ctx.animated,
        max: _ctx.max,
        precision: _ctx.precision,
        showProgress: _ctx.showProgress,
        showValue: _ctx.showValue,
        striped: _ctx.striped,
        value: _ctx.value,
        variant: _ctx.variant
      })), null, 16)
    ])
  ], 4);
}
var BProgress = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$5]]);
const _sfc_main$h = defineComponent({
  name: "BProgressBar",
  props: {
    animated: { type: Boolean, default: false },
    label: { type: String },
    labelHtml: { type: String },
    max: { type: [Number, String] },
    precision: { type: [Number, String], default: 0 },
    showProgress: { type: Boolean, default: false },
    showValue: { type: Boolean, default: false },
    striped: { type: Boolean, default: false },
    value: { type: [Number, String], default: 0 },
    variant: { type: String }
  },
  setup(props, { slots }) {
    const parent = inject(injectionKey$1);
    const classes = computed(() => ({
      "progress-bar-animated": props.animated || (parent == null ? void 0 : parent.animated),
      "progress-bar-striped": props.striped || (parent == null ? void 0 : parent.striped) || props.animated || (parent == null ? void 0 : parent.animated),
      [`bg-${props.variant}`]: props.variant
    }));
    const computedLabel = computed(() => {
      if (props.showValue || (parent == null ? void 0 : parent.showValue)) {
        return parseFloat(props.value).toFixed(props.precision);
      }
      if (props.showProgress || (parent == null ? void 0 : parent.showProgress)) {
        const progress = (props.value * 100 / parseInt(props.max || 100)).toString();
        return parseFloat(progress).toFixed(props.precision);
      }
      return props.label || "";
    });
    const width = computed(() => {
      if (props.max || (parent == null ? void 0 : parent.max)) {
        return `${props.value * 100 / parseInt(props.max || (parent == null ? void 0 : parent.max))}%`;
      }
      return typeof props.value === "string" ? props.value : `${props.value}%`;
    });
    const progressProps = computed(() => {
      const rawProps = {
        "class": ["progress-bar", classes.value],
        "role": "progressbar",
        "aria-valuenow": props.value,
        "aria-valuemin": 0,
        "aria-valuemax": props.max,
        "style": { width: width.value }
      };
      if (props.labelHtml) {
        return __spreadProps(__spreadValues({}, rawProps), {
          innerHTML: props.labelHtml
        });
      }
      return rawProps;
    });
    return () => {
      var _a;
      return h("div", progressProps.value, ((_a = slots.default) == null ? void 0 : _a.call(slots)) || computedLabel.value);
    };
  }
});
const rowColsProps = getBreakpointProps("cols", [""], { type: [String, Number], default: null });
const _sfc_main$g = defineComponent({
  name: "BRow",
  props: __spreadValues({
    tag: { type: String, default: "div" },
    gutterX: { type: String, default: null },
    gutterY: { type: String, default: null },
    alignV: { type: String, default: null },
    alignH: { type: String, default: null },
    alignContent: { type: String, default: null }
  }, rowColsProps),
  setup(props) {
    const rowColsClasses = getClasses$1(props, rowColsProps, "cols", "row-cols");
    const classes = computed(() => ({
      [`gx-${props.gutterX}`]: props.gutterX !== null,
      [`gy-${props.gutterY}`]: props.gutterY !== null,
      [`align-items-${props.alignV}`]: props.alignV,
      [`justify-content-${props.alignH}`]: props.alignH,
      [`align-content-${props.alignContent}`]: props.alignContent
    }));
    return {
      classes,
      rowColsClasses
    };
  }
});
function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    class: normalizeClass(["row", [_ctx.classes, _ctx.rowColsClasses]])
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["class"]);
}
var BRow = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$4]]);
const _sfc_main$f = /* @__PURE__ */ defineComponent({
  props: {
    animation: { type: String, default: "wave" },
    height: { type: String },
    size: { type: String },
    type: { type: String, default: "text" },
    variant: { type: String },
    width: { type: String }
  },
  setup(__props) {
    const props = __props;
    const classes = computed(() => [
      `b-skeleton-${props.type}`,
      `b-skeleton-animate-${props.animation}`,
      {
        [`bg-${props.variant}`]: props.variant
      }
    ]);
    const style = computed(() => ({
      width: props.size || props.width,
      height: props.size || props.height
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["b-skeleton", unref(classes)]),
        style: normalizeStyle(unref(style))
      }, null, 6);
    };
  }
});
const _sfc_main$e = /* @__PURE__ */ defineComponent({
  props: {
    animation: { type: String, default: "wave" }
  },
  setup(__props) {
    const props = __props;
    const classes = computed(() => [`b-skeleton-animate-${props.animation}`]);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["b-skeleton-icon-wrapper position-relative d-inline-block overflow-hidden", unref(classes)])
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const _sfc_main$d = /* @__PURE__ */ defineComponent({
  props: {
    bordered: { type: Boolean, default: false },
    borderless: { type: Boolean, default: false },
    borderVariant: { type: String },
    captionTop: { type: Boolean, default: false },
    dark: { type: Boolean, default: false },
    hover: { type: Boolean, default: false },
    responsive: { type: [Boolean, String], default: false },
    stacked: { type: [Boolean, String], default: false },
    striped: { type: Boolean, default: false },
    small: { type: Boolean, default: false },
    tableClass: { type: [Array, Object, String] },
    tableVariant: { type: String }
  },
  setup(__props) {
    var _a;
    const props = __props;
    const slots = useSlots();
    const classes = computed(() => [
      {
        "table-bordered": props.bordered,
        "table-borderless": props.borderless,
        [`border-${props.borderVariant}`]: props.borderVariant,
        "caption-top": props.captionTop,
        "table-dark": props.dark,
        "table-hover": props.hover,
        "b-table-stacked": typeof props.stacked === "boolean" && props.stacked,
        [`b-table-stacked-${props.stacked}`]: typeof props.stacked === "string",
        "table-striped": props.striped,
        "table-sm": props.small,
        [`table-${props.tableVariant}`]: props.tableVariant
      },
      props.tableClass
    ]);
    const table = h("table", {
      class: ["table b-table", classes.value],
      role: "table"
    }, (_a = slots.default) == null ? void 0 : _a.call(slots));
    let Render = table;
    if (props.responsive) {
      Render = h("div", {
        class: {
          "table-responsive": typeof props.responsive === "boolean" && props.responsive,
          [`table-responsive-${props.responsive}`]: typeof props.responsive === "string"
        }
      }, table);
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Render));
    };
  }
});
const _hoisted_1$2 = { key: 0 };
const _hoisted_2 = { key: 1 };
const _sfc_main$c = /* @__PURE__ */ defineComponent({
  props: {
    animation: { type: String, default: "wave" },
    columns: { type: Number, default: 5 },
    hideHeader: { type: Boolean, default: false },
    rows: { type: Number, default: 3 },
    showFooter: { type: Boolean, default: false },
    tableProps: { type: Object }
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$d, normalizeProps(guardReactiveProps(__props.tableProps)), {
        default: withCtx(() => [
          !__props.hideHeader ? (openBlock(), createElementBlock("thead", _hoisted_1$2, [
            createElementVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(__props.columns, (th, i) => {
                return openBlock(), createElementBlock("th", { key: i }, [
                  createVNode(_sfc_main$f)
                ]);
              }), 128))
            ])
          ])) : createCommentVNode("", true),
          createElementVNode("tbody", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(__props.rows, (tr, j) => {
              return openBlock(), createElementBlock("tr", { key: j }, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(__props.columns, (td, k) => {
                  return openBlock(), createElementBlock("td", { key: k }, [
                    createVNode(_sfc_main$f, { width: "75%" })
                  ]);
                }), 128))
              ]);
            }), 128))
          ]),
          __props.showFooter ? (openBlock(), createElementBlock("tfoot", _hoisted_2, [
            createElementVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(__props.columns, (th, l) => {
                return openBlock(), createElementBlock("th", { key: l }, [
                  createVNode(_sfc_main$f)
                ]);
              }), 128))
            ])
          ])) : createCommentVNode("", true)
        ]),
        _: 1
      }, 16);
    };
  }
});
const _sfc_main$b = /* @__PURE__ */ defineComponent({
  props: {
    loading: { type: Boolean, default: false }
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return __props.loading ? renderSlot(_ctx.$slots, "loading", { key: 0 }) : renderSlot(_ctx.$slots, "default", { key: 1 });
    };
  }
});
const _sfc_main$a = defineComponent({
  name: "BSpinner",
  props: {
    label: { type: String },
    role: { type: String, default: "status" },
    small: { type: Boolean, default: false },
    tag: { type: String, default: "span" },
    type: { type: String, default: "border" },
    variant: { type: String }
  },
  setup(props) {
    const classes = computed(() => ({
      "spinner-border": props.type === "border",
      "spinner-border-sm": props.type === "border" && props.small,
      "spinner-grow": props.type === "grow",
      "spinner-grow-sm": props.type === "grow" && props.small,
      [`text-${props.variant}`]: !!props.variant
    }));
    return {
      classes
    };
  }
});
const _hoisted_1$1 = {
  key: 0,
  class: "visually-hidden"
};
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    class: normalizeClass(_ctx.classes),
    role: _ctx.label || _ctx.$slots.label ? _ctx.role : null,
    "aria-hidden": _ctx.label || _ctx.$slots.label ? null : true
  }, {
    default: withCtx(() => [
      _ctx.label || _ctx.$slots.label ? (openBlock(), createElementBlock("span", _hoisted_1$1, [
        renderSlot(_ctx.$slots, "label", {}, () => [
          createTextVNode(toDisplayString(_ctx.label), 1)
        ])
      ])) : createCommentVNode("", true)
    ]),
    _: 3
  }, 8, ["class", "role", "aria-hidden"]);
}
var BSpinner = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$3]]);
const injectionKey = Symbol();
const getTabs = (slots) => {
  if (!slots || !slots.default)
    return [];
  return slots.default().reduce((arr, slot) => {
    if (typeof slot.type === "symbol") {
      arr = arr.concat(slot.children);
    } else {
      arr.push(slot);
    }
    return arr;
  }, []).filter((child) => {
    var _a;
    return ((_a = child.type) == null ? void 0 : _a.name) === "BTab";
  });
};
const _sfc_main$9 = defineComponent({
  name: "BTabs",
  props: {
    activeNavItemClass: { type: [Array, Object, String], default: null },
    activeTabClass: { type: [Array, Object, String], default: null },
    align: { type: String, default: null },
    card: { type: Boolean, default: false },
    contentClass: { type: [Array, Object, String], default: null },
    end: { type: Boolean, default: false },
    fill: { type: Boolean, default: false },
    id: { type: String, default: null },
    justified: { type: Boolean, default: false },
    lazy: { type: Boolean, default: false },
    navClass: { type: [Array, Object, String], default: null },
    navWrapperClass: { type: [Array, Object, String], default: null },
    noFade: { type: Boolean, default: false },
    noNavStyle: { type: Boolean, default: false },
    pills: { type: Boolean, default: false },
    small: { type: Boolean, default: false },
    tag: { type: String, default: "div" },
    vertical: { type: Boolean, default: false },
    modelValue: { type: Number, default: -1 }
  },
  emits: ["update:modelValue", "activate-tab", "click"],
  setup(props, { slots, emit }) {
    const _tabIndex = ref(props.modelValue);
    const _currentTabButton = ref("");
    const tabIndex = computed({
      get: () => _tabIndex.value,
      set: (value) => {
        _tabIndex.value = value;
        if (tabs.value.length > 0 && value >= 0 && value < tabs.value.length) {
          _currentTabButton.value = tabs.value[value].buttonId;
        } else {
          _currentTabButton.value = "";
        }
        emit("update:modelValue", value);
      }
    });
    const tabs = computed(() => {
      let tabs2 = [];
      if (slots.default) {
        tabs2 = getTabs(slots).map((tab, idx) => {
          if (!tab.props)
            tab.props = {};
          const buttonId = tab.props["button-id"] || getID("tab");
          const contentId = tab.props.id || getID();
          const active = tabIndex.value > -1 ? idx === tabIndex.value : tab.props.active === "";
          const titleItemClass = tab.props["title-item-class"];
          const titleLinkAttributes = tab.props["title-link-attributes"];
          return {
            buttonId,
            contentId,
            active,
            disabled: tab.props.disabled === "" || tab.props.disabled === true,
            navItemClasses: [
              {
                active,
                disabled: tab.props.disabled === "" || tab.props.disabled === true
              },
              active && props.activeNavItemClass ? props.activeNavItemClass : null,
              tab.props["title-link-class"]
            ],
            tabClasses: [
              {
                fade: !props.noFade
              },
              active && props.activeTabClass ? props.activeTabClass : null
            ],
            target: `#${contentId}`,
            title: tab.props.title,
            titleItemClass,
            titleLinkAttributes,
            onClick: tab.props.onClick,
            tab
          };
        });
      }
      return tabs2;
    });
    const showEmpty = computed(() => !((tabs == null ? void 0 : tabs.value) && tabs.value.length > 0));
    const classes = computed(() => ({
      "d-flex align-items-start": props.vertical
    }));
    const navTabsClasses = computed(() => ({
      "nav-pills": props.pills,
      "flex-column me-3": props.vertical,
      [`justify-content-${props.align}`]: !!props.align,
      "nav-fill": props.fill,
      "card-header-tabs": props.card,
      "nav-justified": props.justified,
      "nav-tabs": !props.noNavStyle && !props.pills,
      "small": props.small
    }));
    const activateTab = (index) => {
      let result = false;
      if (index !== void 0) {
        if (index > -1 && index < tabs.value.length && !tabs.value[index].disabled && (tabIndex.value < 0 || tabs.value[index].buttonId !== _currentTabButton.value)) {
          const tabEvent = new BvEvent("activate-tab", { cancelable: true, vueTarget: this });
          emit("activate-tab", index, tabIndex.value, tabEvent);
          if (!tabEvent.defaultPrevented) {
            tabIndex.value = index;
            result = true;
          }
        }
      }
      if (!result && props.modelValue !== tabIndex.value) {
        emit("update:modelValue", tabIndex.value);
      }
      return result;
    };
    const handleClick = (event, index) => {
      var _a;
      activateTab(index);
      if (index >= 0 && !tabs.value[index].disabled && ((_a = tabs.value[index]) == null ? void 0 : _a.onClick) && isFunction(tabs.value[index].onClick)) {
        tabs.value[index].onClick(event);
      }
    };
    activateTab(_tabIndex.value);
    watch(() => props.modelValue, (newValue, oldValue) => {
      if (newValue === oldValue)
        return;
      newValue = mathMax(newValue, -1);
      oldValue = mathMax(oldValue, -1);
      if (tabs.value.length <= 0) {
        tabIndex.value = -1;
        return;
      }
      const goForward = newValue > oldValue;
      let index = newValue;
      const maxIdx = tabs.value.length - 1;
      while (index >= 0 && index <= maxIdx && tabs.value[index].disabled) {
        index += goForward ? 1 : -1;
      }
      if (index < 0) {
        activateTab(0);
        return;
      }
      if (index >= tabs.value.length) {
        activateTab(tabs.value.length - 1);
        return;
      }
      activateTab(index);
    });
    watch(() => tabs.value, () => {
      let activeTabIndex = tabs.value.map((tab) => tab.active && !tab.disabled).lastIndexOf(true);
      if (activeTabIndex < 0) {
        if (tabIndex.value >= tabs.value.length) {
          activeTabIndex = tabs.value.map((tab) => !tab.disabled).lastIndexOf(true);
        } else {
          if (tabs.value[tabIndex.value] && !tabs.value[tabIndex.value].disabled)
            activeTabIndex = tabIndex.value;
        }
      }
      if (activeTabIndex < 0) {
        activeTabIndex = tabs.value.map((tab) => !tab.disabled).indexOf(true);
      }
      tabs.value.forEach((tab, idx) => tab.active = idx === activeTabIndex);
      activateTab(activeTabIndex);
    });
    onMounted(() => {
      if (tabIndex.value < 0 && tabs.value.length > 0 && !tabs.value.some((tab) => tab.active)) {
        const firstTab = tabs.value.map((t) => !t.disabled).indexOf(true);
        activateTab(firstTab >= 0 ? firstTab : -1);
      }
    });
    provide(injectionKey, {
      lazy: props.lazy,
      card: props.card
    });
    return {
      tabs,
      showEmpty,
      classes,
      navTabsClasses,
      tabIndex,
      handleClick
    };
  }
});
const _hoisted_1 = ["id", "data-bs-target", "aria-controls", "aria-selected", "onClick"];
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    id: _ctx.id,
    class: normalizeClass(["tabs", _ctx.classes])
  }, {
    default: withCtx(() => [
      _ctx.end ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(["tab-content", _ctx.contentClass])
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.tabs, ({ tab, contentId, tabClasses, active }, i) => {
          return openBlock(), createBlock(resolveDynamicComponent(tab), {
            key: i,
            id: contentId,
            class: normalizeClass(tabClasses),
            active
          }, null, 8, ["id", "class", "active"]);
        }), 128)),
        _ctx.showEmpty ? (openBlock(), createElementBlock("div", {
          key: "bv-empty-tab",
          class: normalizeClass(["tab-pane active", { "card-body": _ctx.card }])
        }, [
          renderSlot(_ctx.$slots, "empty")
        ], 2)) : createCommentVNode("", true)
      ], 2)) : createCommentVNode("", true),
      createElementVNode("div", {
        class: normalizeClass([_ctx.navWrapperClass, { "card-header": _ctx.card, "ms-auto": _ctx.vertical && _ctx.end }])
      }, [
        createElementVNode("ul", {
          class: normalizeClass(["nav", [_ctx.navTabsClasses, _ctx.navClass]]),
          role: "tablist"
        }, [
          renderSlot(_ctx.$slots, "tabs-start"),
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.tabs, ({ tab, buttonId, contentId, navItemClasses, active, target }, idx) => {
            return openBlock(), createElementBlock("li", {
              key: idx,
              class: normalizeClass(["nav-item", tab.props["title-item-class"]])
            }, [
              createElementVNode("button", mergeProps({
                id: buttonId,
                class: ["nav-link", navItemClasses],
                "data-bs-toggle": "tab",
                "data-bs-target": target,
                role: "tab",
                "aria-controls": contentId,
                "aria-selected": active
              }, tab.props["title-link-attributes"], {
                onClick: withModifiers((e) => _ctx.handleClick(e, idx), ["stop", "prevent"])
              }), [
                tab.children && tab.children.title ? (openBlock(), createBlock(resolveDynamicComponent(tab.children.title), { key: 0 })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(tab.props.title), 1)
                ], 64))
              ], 16, _hoisted_1)
            ], 2);
          }), 128)),
          renderSlot(_ctx.$slots, "tabs-end")
        ], 2)
      ], 2),
      !_ctx.end ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass(["tab-content", _ctx.contentClass])
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.tabs, ({ tab, contentId, tabClasses, active }, i) => {
          return openBlock(), createBlock(resolveDynamicComponent(tab), {
            key: i,
            id: contentId,
            class: normalizeClass(tabClasses),
            active
          }, null, 8, ["id", "class", "active"]);
        }), 128)),
        _ctx.showEmpty ? (openBlock(), createElementBlock("div", {
          key: "bv-empty-tab",
          class: normalizeClass(["tab-pane active", { "card-body": _ctx.card }])
        }, [
          renderSlot(_ctx.$slots, "empty")
        ], 2)) : createCommentVNode("", true)
      ], 2)) : createCommentVNode("", true)
    ]),
    _: 3
  }, 8, ["id", "class"]);
}
var BTabs = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$2]]);
const _sfc_main$8 = defineComponent({
  name: "BTab",
  props: {
    active: { type: Boolean, default: false },
    buttonId: { type: String, default: null },
    disabled: { type: Boolean, default: false },
    id: { type: String },
    lazy: { type: Boolean, default: false },
    noBody: { type: [Boolean, String], default: false },
    tag: { type: String, default: "div" },
    title: { type: String },
    titleItemClass: { type: [Array, Object, String], default: null },
    titleLinkAttributes: { type: Object, default: null },
    titleLinkClass: { type: [Array, Object, String], default: null }
  },
  setup(props) {
    const parentData = inject(injectionKey);
    const computedLazy = computed(() => (parentData == null ? void 0 : parentData.lazy) || props.lazy);
    const computedActive = computed(() => props.active && !props.disabled);
    const showSlot = computed(() => computedActive.value || !computedLazy.value);
    const classes = computed(() => ({
      "active": props.active,
      "show": props.active,
      "card-body": parentData.card && props.noBody === false
    }));
    return {
      classes,
      computedLazy,
      computedActive,
      showSlot
    };
  }
});
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    id: _ctx.id,
    class: normalizeClass(["tab-pane", _ctx.classes]),
    role: "tabpanel",
    "aria-labelledby": "profile-tab"
  }, {
    default: withCtx(() => [
      _ctx.showSlot ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("", true)
    ]),
    _: 3
  }, 8, ["id", "class"]);
}
var BTab = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$1]]);
const useItemHelper = () => {
  const normaliseFields = (origFields, items) => {
    const fields = [];
    if (!(origFields == null ? void 0 : origFields.length) && (items == null ? void 0 : items.length)) {
      Object.keys(items[0]).forEach((k) => fields.push({ key: k, label: startCase(k) }));
      return fields;
    }
    if (Array.isArray(origFields)) {
      origFields.forEach((f) => {
        if (typeof f === "string") {
          fields.push({ key: f, label: startCase(f) });
        } else if (isObject(f) && f.key && isString(f.key)) {
          fields.push(__spreadValues({}, f));
        }
      });
      return fields;
    }
    return fields;
  };
  return {
    normaliseFields
  };
};
const _sfc_main$7 = defineComponent({
  name: "BTable",
  props: {
    align: { type: String },
    caption: { type: String },
    captionTop: { type: Boolean, default: false },
    borderless: { type: Boolean, default: false },
    bordered: { type: Boolean, default: false },
    borderVariant: { type: String },
    dark: { type: Boolean, default: false },
    fields: { type: Array, default: () => [] },
    footClone: { type: Boolean, default: false },
    hover: { type: Boolean, default: false },
    items: { type: Array, default: () => [] },
    responsive: { type: [Boolean, String], default: false },
    small: { type: Boolean, default: false },
    striped: { type: Boolean, default: false },
    variant: { type: String }
  },
  setup(props, { slots }) {
    const classes = computed(() => ({
      [`align-${props.align}`]: props.align,
      [`table-${props.variant}`]: props.variant,
      "table-striped": props.striped,
      "table-hover": props.hover,
      "table-dark": props.dark,
      "table-bordered": props.bordered,
      [`border-${props.borderVariant}`]: props.borderVariant,
      "table-borderless": props.borderless,
      "table-sm": props.small,
      "caption-top": props.captionTop
    }));
    const itemHelper = useItemHelper();
    const computedFields = computed(() => itemHelper.normaliseFields(props.fields, props.items));
    return () => {
      let theadTop;
      theadTop = null;
      if (slots["thead-top"]) {
        theadTop = slots["thead-top"]();
      }
      let theadSub;
      theadSub = null;
      if (slots["thead-sub"]) {
        theadSub = h("tr", computedFields.value.map((field) => h("td", {
          scope: "col",
          class: [field.class, field.thClass, field.variant ? `table-${field.variant}` : ""]
        }, slots["thead-sub"](__spreadValues({ items: computedFields.value }, field)))));
      }
      const tHead = h("thead", [
        theadTop,
        h("tr", computedFields.value.map((field) => {
          var _a;
          const slotName = `head(${field.key})`;
          let thContent = field.label;
          if (slots[slotName]) {
            thContent = (_a = slots[slotName]) == null ? void 0 : _a.call(slots, {
              label: field.label
            });
          }
          return h("th", __spreadProps(__spreadValues({}, field.thAttr), {
            scope: "col",
            class: [field.class, field.thClass, field.variant ? `table-${field.variant}` : ""],
            title: field.headerTitle,
            abbr: field.headerAbbr,
            style: field.thStyle
          }), thContent);
        })),
        theadSub
      ]);
      const tBody = [
        h("tbody", props.items.map((tr, index) => h("tr", {
          class: [tr._rowVariant ? `table-${tr._rowVariant}` : null]
        }, computedFields.value.map((field) => {
          var _a;
          const slotName = `cell(${field.key})`;
          let tdContent = tr[field.key];
          if (slots[slotName]) {
            tdContent = (_a = slots[slotName]) == null ? void 0 : _a.call(slots, {
              value: tr[field.key],
              index,
              item: tr,
              items: props.items
            });
          }
          return h("td", __spreadProps(__spreadValues({}, field.tdAttr), {
            class: [
              field.class,
              field.tdClass,
              field.variant ? `table-${field.variant}` : "",
              (tr == null ? void 0 : tr._cellVariants) && (tr == null ? void 0 : tr._cellVariants[field.key]) ? `table-${tr == null ? void 0 : tr._cellVariants[field.key]}` : ""
            ]
          }), tdContent);
        }))))
      ];
      const tableContent = [tHead, tBody];
      if (slots["table-caption"]) {
        tableContent.push(h("caption", slots["table-caption"]()));
      } else {
        if (props.caption) {
          const tCaption = h("caption", props.caption);
          tableContent.push(tCaption);
        }
      }
      if (props.footClone) {
        const tFoot = h("tfoot", h("tr", computedFields.value.map((field) => h("th", __spreadProps(__spreadValues({}, field.thAttr), {
          scope: "col",
          class: [
            field.class,
            field.thClass,
            field.variant ? `table-${field.variant}` : ""
          ],
          title: field.headerTitle,
          abbr: field.headerAbbr,
          style: field.thStyle
        }), field.label))));
        tableContent.push(tFoot);
      }
      const table = h("table", {
        class: ["table", classes.value]
      }, tableContent);
      if (props.responsive) {
        return h("div", {
          class: {
            "table-responsive": typeof props.responsive === "boolean" && props.responsive,
            [`table-responsive-${props.responsive}`]: typeof props.responsive === "string"
          }
        }, table);
      }
      return table;
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div");
}
var BTable = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render]]);
const _sfc_main$6 = /* @__PURE__ */ defineComponent({
  props: {
    headVariant: { type: Boolean, default: false }
  },
  setup(__props) {
    const props = __props;
    const classes = computed(() => ({
      [`thead-${props.headVariant}`]: props.headVariant
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("tbody", {
        role: "rowgroup",
        class: normalizeClass(unref(classes))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const _sfc_main$5 = defineComponent({
  props: {
    colspan: { type: [String, Number] },
    rowspan: { type: [String, Number] },
    stackedHeading: { type: String },
    stickyColumn: { type: Boolean, default: false },
    variant: { type: String }
  },
  setup(props) {
    const slots = useSlots();
    const classes = computed(() => ({
      [`table-${props.variant}`]: props.variant,
      "b-table-sticky-column": props.stickyColumn,
      "table-b-table-default": props.stickyColumn && !props.variant
    }));
    const scope = computed(() => props.colspan ? "colspan" : props.rowspan ? "rowspan" : "col");
    const children = computed(() => {
      var _a, _b;
      return props.stackedHeading ? h("div", (_a = slots.default) == null ? void 0 : _a.call(slots)) : (_b = slots.default) == null ? void 0 : _b.call(slots);
    });
    return () => h("td", {
      "role": "cell",
      "scope": scope.value,
      "class": classes.value,
      "colspan": props.colspan,
      "rowspan": props.rowspan,
      "data-label": props.stackedHeading
    }, children.value);
  }
});
const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  props: {
    footVariant: { type: String }
  },
  setup(__props) {
    const props = __props;
    const classes = computed(() => ({
      [`table-${props.footVariant}`]: props.footVariant
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("tfoot", {
        role: "rowgroup",
        class: normalizeClass(unref(classes))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  props: {
    colspan: { type: [String, Number] },
    rowspan: { type: [String, Number] },
    stackedHeading: { type: String },
    stickyColumn: { type: Boolean, default: false },
    variant: { type: String }
  },
  setup(__props) {
    var _a;
    const props = __props;
    const slots = useSlots();
    const classes = computed(() => ({
      [`table-${props.variant}`]: props.variant,
      "b-table-sticky-column": props.stickyColumn,
      "table-b-table-default": props.stickyColumn && !props.variant
    }));
    const scope = computed(() => props.colspan ? "colspan" : props.rowspan ? "rowspan" : "col");
    let content = (_a = slots.default) == null ? void 0 : _a.call(slots);
    if (props.stackedHeading) {
      content = h("div", content);
    }
    const Render = h("th", {
      "role": "columnheader",
      "scope": scope.value,
      "class": classes.value,
      "colspan": props.colspan,
      "rowspan": props.rowspan,
      "data-label": props.stackedHeading
    }, content);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Render));
    };
  }
});
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  props: {
    headVariant: { type: String }
  },
  setup(__props) {
    const props = __props;
    const classes = computed(() => ({
      [`table-${props.headVariant}`]: props.headVariant
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("thead", {
        role: "rowgroup",
        class: normalizeClass(unref(classes))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  props: {
    variant: { type: String }
  },
  setup(__props) {
    const props = __props;
    const classes = computed(() => ({
      [`table-${props.variant}`]: props.variant
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("tr", {
        role: "row",
        class: normalizeClass(unref(classes))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const SLOT_NAME_TOAST_TITLE = "toast-title";
const MIN_DURATION = 5e3;
const _sfc_main = defineComponent({
  name: "BToast",
  emits: ["destroyed", "update:modelValue"],
  props: __spreadProps(__spreadValues({}, BLINK_PROPS), {
    delay: { type: Number, default: 5e3 },
    bodyClass: { type: String },
    body: { type: [Object, String] },
    headerClass: { type: String },
    headerTag: { type: String, default: "div" },
    animation: { type: Boolean, default: true },
    id: { type: String },
    isStatus: { type: Boolean, default: false },
    autoHide: { type: Boolean, default: true },
    noCloseButton: { type: Boolean, default: false },
    noFade: { type: Boolean, default: false },
    noHoverPause: { type: Boolean, default: false },
    solid: { type: Boolean, default: false },
    static: { type: Boolean, default: false },
    title: { type: String },
    modelValue: { type: Boolean, default: false },
    toastClass: { type: Array },
    variant: { type: String }
  }),
  setup(props, { emit, slots }) {
    const isTransitioning = ref(false);
    const isHiding = ref(false);
    const localShow = ref(false);
    const classes = computed(() => ({
      [`b-toast-${props.variant}`]: props.variant,
      show: localShow.value || isTransitioning.value
    }));
    let dismissTimer;
    let dismissStarted;
    let resumeDismiss;
    const clearDismissTimer = () => {
      clearTimeout(dismissTimer);
      dismissTimer = void 0;
    };
    const computedDuration = computed(() => Math.max(toInteger(props.delay, 0), MIN_DURATION));
    const hide = () => {
      if (props.modelValue) {
        dismissStarted = resumeDismiss = 0;
        clearDismissTimer();
        isHiding.value = true;
        requestAF(() => {
          localShow.value = false;
        });
      }
    };
    const show = () => {
      clearDismissTimer();
      emit("update:modelValue", true);
      dismissStarted = resumeDismiss = 0;
      isHiding.value = false;
      nextTick(() => {
        requestAF(() => {
          localShow.value = true;
        });
      });
    };
    const onPause = () => {
      if (!props.autoHide || props.noHoverPause || !dismissTimer || resumeDismiss) {
        return;
      }
      const passed = Date.now() - dismissStarted;
      if (passed > 0) {
        clearDismissTimer();
        resumeDismiss = Math.max(computedDuration.value - passed, MIN_DURATION);
      }
    };
    const onUnPause = () => {
      if (!props.autoHide || props.noHoverPause || !resumeDismiss) {
        resumeDismiss = dismissStarted = 0;
      }
      startDismissTimer();
    };
    watch(() => props.modelValue, (newValue) => {
      newValue ? show() : hide();
    });
    const startDismissTimer = () => {
      clearDismissTimer();
      if (props.autoHide) {
        dismissTimer = setTimeout(hide, resumeDismiss || computedDuration.value);
        dismissStarted = Date.now();
        resumeDismiss = 0;
      }
    };
    const OnBeforeEnter = () => {
      isTransitioning.value = true;
      emit("update:modelValue", true);
    };
    const OnAfterEnter = () => {
      isTransitioning.value = false;
      startDismissTimer();
    };
    const OnBeforeLeave = () => {
      isTransitioning.value = true;
    };
    const OnAfterLeave = () => {
      isTransitioning.value = false;
      resumeDismiss = dismissStarted = 0;
      emit("update:modelValue", false);
    };
    computed(() => ({
      OnBeforeEnter,
      OnAfterEnter,
      OnBeforeLeave,
      OnAfterLeave
    }));
    onUnmounted(() => {
      clearDismissTimer();
      if (!props.autoHide) {
        return;
      }
      emit("destroyed", props.id);
    });
    onMounted(() => {
      nextTick(() => {
        if (props.modelValue) {
          requestAF(() => {
            show();
          });
        }
      });
    });
    const onLinkClick = () => {
      nextTick(() => {
        requestAF(() => {
          hide();
        });
      });
    };
    return () => {
      const makeToast = () => {
        const $headerContent = [];
        const $title = normalizeSlot(SLOT_NAME_TOAST_TITLE, { hide }, slots);
        if ($title) {
          $headerContent.push(h($title));
        } else if (props.title) {
          $headerContent.push(h("strong", { class: "me-auto" }, props.title));
        }
        if (!props.noCloseButton && $headerContent.length !== 0) {
          $headerContent.push(h(BCloseButton, {
            class: ["btn-close"],
            onClick: () => {
              hide();
            }
          }));
        }
        const $innertoast = [];
        if ($headerContent.length > 0) {
          $innertoast.push(h(props.headerTag, {
            class: "toast-header"
          }, { default: () => $headerContent }));
        }
        if (normalizeSlot("default", { hide }, slots) || props.body) {
          const $body = h(isLink(props) ? "b-link" : "div", {
            class: ["toast-body", props.bodyClass],
            onClick: isLink(props) ? { click: onLinkClick } : {}
          }, normalizeSlot("default", { hide }, slots) || props.body);
          $innertoast.push($body);
        }
        return h("div", {
          class: ["toast", props.toastClass, classes.value],
          tabindex: "0"
        }, $innertoast);
      };
      const $toast = h("div", {
        "class": ["b-toast"],
        "id": props.id,
        "role": isHiding.value ? null : props.isStatus ? "status" : "alert",
        "aria-live": isHiding.value ? null : props.isStatus ? "polite" : "assertive",
        "aria-atomic": isHiding.value ? null : "true",
        "onmouseenter": onPause,
        "onmouseleave": onUnPause
      }, [
        h(_sfc_main$m, {
          noFade: props.noFade,
          onAfterEnter: OnAfterEnter,
          onBeforeEnter: OnBeforeEnter,
          onAfterLeave: OnAfterLeave,
          onBeforeLeave: OnBeforeLeave
        }, () => [localShow.value ? makeToast() : ""])
      ]);
      return $toast;
    };
  }
});
var Components = {
  BAccordion,
  BAccordionItem,
  BAlert,
  BAvatar,
  BAvatarGroup,
  BBadge,
  BBreadcrumb,
  BBreadcrumbItem,
  BButton,
  BButtonGroup,
  BButtonToolbar,
  BCard,
  BCardBody,
  BCardFooter,
  BCardGroup,
  BCardHeader,
  BCardImg,
  BCardSubTitle,
  BCardText,
  BCardTitle,
  BCarousel,
  BCarouselSlide,
  BCloseButton,
  BCol,
  BCollapse,
  BContainer: _sfc_main$_,
  BDropdown,
  BDropdownDivider,
  BDropdownForm,
  BDropdownGroup,
  BDropdownHeader,
  BDropdownItem,
  BDropdownItemButton,
  BDropdownText,
  BForm,
  BFormCheckbox,
  BFormCheckboxGroup,
  BFormFloatingLabel,
  BFormGroup: _sfc_main$J,
  BFormInput,
  BFormInvalidFeedback,
  BFormRadio,
  BFormRadioGroup,
  BFormRow,
  BFormSelect,
  BFormSelectOption,
  BFormSelectOptionGroup,
  BFormText,
  BFormTextarea,
  BFormTag: _sfc_main$C,
  BFormTags: _sfc_main$B,
  BFormValidFeedback,
  BImg,
  BInputGroup,
  BInputGroupAddon,
  BInputGroupAppend,
  BInputGroupPrepend,
  BInputGroupText,
  BLink,
  BListGroup,
  BListGroupItem,
  BModal: BModal$1,
  BNav,
  BNavItem,
  BNavItemDropdown,
  BOffcanvas,
  BOverlay: _sfc_main$l,
  BPagination: _sfc_main$k,
  BPopover: BPopover$1,
  BProgress,
  BProgressBar: _sfc_main$h,
  BRow,
  BSkeleton: _sfc_main$f,
  BSkeletonIcon: _sfc_main$e,
  BSkeletonTable: _sfc_main$c,
  BSkeletonWrapper: _sfc_main$b,
  BSpinner,
  BTab,
  BTable,
  BTableSimple: _sfc_main$d,
  BTbody: _sfc_main$6,
  BTd: _sfc_main$5,
  BTfoot: _sfc_main$4,
  BTh: _sfc_main$3,
  BThead: _sfc_main$2,
  BTr: _sfc_main$1,
  BToast: _sfc_main,
  BToaster: BToastContainer,
  BToastContainer,
  BTabs,
  BTransition: _sfc_main$m,
  BToastPlugin
};
var BModal = {
  mounted(el, binding) {
    let target = binding.value;
    if (Object.keys(binding.modifiers).length > 0) {
      [target] = Object.keys(binding.modifiers);
    }
    el.setAttribute("data-bs-toggle", "modal");
    el.setAttribute("data-bs-target", `#${target}`);
  }
};
const BPopover = {
  mounted(el, binding) {
    let placement = "right";
    const trigger = [];
    if (binding.modifiers.left) {
      placement = "left";
    } else if (binding.modifiers.right) {
      placement = "right";
    } else if (binding.modifiers.bottom) {
      placement = "bottom";
    } else if (binding.modifiers.top) {
      placement = "top";
    }
    if (binding.modifiers.manual) {
      trigger.push("manual");
    } else {
      if (binding.modifiers.click) {
        trigger.push("click");
      }
      if (binding.modifiers.hover) {
        trigger.push("hover");
      }
      if (binding.modifiers.focus) {
        trigger.push("focus");
      }
    }
    el.setAttribute("data-bs-toggle", "popover");
    new Popover(el, {
      trigger: trigger.length === 0 ? "click" : trigger.join(" "),
      placement,
      content: binding.value
    });
  },
  unmounted(el) {
    const instance = Popover.getInstance(el);
    instance == null ? void 0 : instance.dispose();
  }
};
function resolveTrigger(modifiers) {
  if (modifiers.manual) {
    return "manual";
  }
  const trigger = [];
  if (modifiers.click) {
    trigger.push("click");
  }
  if (modifiers.hover) {
    trigger.push("hover");
  }
  if (modifiers.focus) {
    trigger.push("focus");
  }
  if (trigger.length > 0) {
    return trigger.join(" ");
  }
  return "hover focus";
}
function resolvePlacement(modifiers) {
  if (modifiers.left) {
    return "left";
  }
  if (modifiers.right) {
    return "right";
  }
  if (modifiers.bottom) {
    return "bottom";
  }
  return "top";
}
function resolveDelay(values) {
  if (values == null ? void 0 : values.delay) {
    return values.delay;
  }
  return 0;
}
const BTooltip = {
  beforeMount(el, binding) {
    el.setAttribute("data-bs-toggle", "tooltip");
    const isHtml = /<("[^"]*"|'[^']*'|[^'">])*>/.test(el.title);
    const trigger = resolveTrigger(binding.modifiers);
    const placement = resolvePlacement(binding.modifiers);
    const delay = resolveDelay(binding.value);
    new Tooltip(el, {
      trigger,
      placement,
      delay,
      html: isHtml
    });
  },
  updated(el) {
    const title = el.getAttribute("title");
    if (title !== "") {
      const instance = Tooltip.getInstance(el);
      instance == null ? void 0 : instance.toggle();
      el.setAttribute("data-bs-original-title", title || "");
      el.setAttribute("title", "");
      instance == null ? void 0 : instance.toggle();
    }
  },
  unmounted(el) {
    const instance = Tooltip.getInstance(el);
    instance == null ? void 0 : instance.dispose();
  }
};
const observerInstances = /* @__PURE__ */ new Map();
function destroy(el) {
  if (observerInstances.has(el)) {
    const observer = observerInstances.get(el);
    if (observer && observer.stop) {
      observer.stop();
    }
    observerInstances.delete(el);
  }
}
function bind(el, binding) {
  const options = {
    margin: "0px",
    once: false,
    callback: binding.value
  };
  Object.keys(binding.modifiers).forEach((mod) => {
    if (Number.isInteger(mod)) {
      options.margin = `${mod}px`;
    } else if (mod.toLowerCase() === "once") {
      options.once = true;
    }
  });
  destroy(el);
  const observer = new VisibilityObserver(el, options.margin, options.once, options.callback, binding.instance);
  observerInstances.set(el, observer);
}
const BVisible = {
  beforeMount(el, binding) {
    bind(el, binding);
  },
  updated(el, binding) {
    bind(el, binding);
  },
  unmounted(el) {
    destroy(el);
  }
};
class VisibilityObserver {
  constructor(element, margin, once, callback, instance) {
    this.element = element;
    this.margin = margin;
    this.once = once;
    this.callback = callback;
    this.instance = instance;
    this.createObserver();
  }
  createObserver() {
    if (this.observer) {
      this.stop();
    }
    if (this.doneOnce || typeof this.callback !== "function") {
      return;
    }
    try {
      this.observer = new IntersectionObserver(this.handler.bind(this), {
        root: null,
        rootMargin: this.margin,
        threshold: 0
      });
    } catch (e) {
      console.error("Intersection Observer not supported");
      this.doneOnce = true;
      this.observer = void 0;
      this.callback(null);
      return;
    }
    this.instance.$nextTick(() => {
      if (this.observer) {
        this.observer.observe(this.element);
      }
    });
  }
  handler(entries) {
    const [entry] = entries;
    const isIntersecting = Boolean(entry.isIntersecting || entry.intersectionRatio > 0);
    if (isIntersecting !== this.visible) {
      this.visible = isIntersecting;
      this.callback(isIntersecting);
      if (this.once && this.visible) {
        this.doneOnce = true;
        this.stop();
      }
    }
  }
  stop() {
    this.observer && this.observer.disconnect();
    this.observer = null;
  }
}
var focus = {
  mounted(el, binding) {
    if (binding.value !== false) {
      el.focus();
    }
  }
};
var Directives = {
  BModal,
  BPopover,
  BToggle,
  BTooltip,
  BVisible,
  focus
};
var styles = "";
const plugin = {
  install(app, options = {}) {
    Object.entries(Components).forEach(([name, component]) => {
      app.component(name, component);
    });
    Object.entries(Directives).forEach(([name, component]) => {
      app.directive(name, component);
    });
    createBreadcrumb(app);
  }
};
export { BAccordion, BAccordionItem, BAlert, BAvatar, BAvatarGroup, BBadge, BBreadcrumb, BBreadcrumbItem, BButton, BButtonGroup, BButtonToolbar, BCard, BCardBody, BCardFooter, BCardGroup, BCardHeader, BCardImg, BCardSubTitle, BCardText, BCardTitle, BCarousel, BCarouselSlide, BCloseButton, BCol, BCollapse, _sfc_main$_ as BContainer, BDropdown, BDropdownDivider, BDropdownForm, BDropdownGroup, BDropdownHeader, BDropdownItem, BDropdownItemButton, BDropdownText, BForm, BFormCheckbox, BFormCheckboxGroup, BFormFloatingLabel, _sfc_main$J as BFormGroup, BFormInput, BFormInvalidFeedback, BFormRadio, BFormRadioGroup, BFormRow, BFormSelect, BFormSelectOption, BFormSelectOptionGroup, BFormText, BFormTextarea, BFormValidFeedback, BImg, BInputGroup, BInputGroupAddon, BInputGroupAppend, BInputGroupPrepend, BInputGroupText, BLink, BListGroup, BListGroupItem, BModal$1 as BModal, BNav, BNavItem, BOffcanvas, _sfc_main$l as BOverlay, _sfc_main$k as BPagination, BPopover$1 as BPopover, BProgress, _sfc_main$h as BProgressBar, BRow, BSpinner, BTab, BTable, _sfc_main$d as BTableSimple, BTabs, _sfc_main$6 as BTbody, _sfc_main$5 as BTd, _sfc_main$4 as BTfoot, _sfc_main$3 as BTh, _sfc_main$2 as BThead, _sfc_main as BToast, BToastPlugin, BToastContainer as BToaster, _sfc_main$1 as BTr, _sfc_main$m as BTransition, plugin as BootstrapVue3, BPopover as VBPopover, BToggle as VBToggle, BTooltip as VBTooltip, BVisible as VBVisible, plugin as default, useToast };
